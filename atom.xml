<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mustang</title>
  
  <subtitle>温欣</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://jackLovewx.github.io/"/>
  <updated>2019-02-25T06:48:28.479Z</updated>
  <id>https://jackLovewx.github.io/</id>
  
  <author>
    <name>Mustang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>java多线程核心技术七_补充</title>
    <link href="https://jackLovewx.github.io/2019/02/22/java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%83-%E8%A1%A5%E5%85%85/"/>
    <id>https://jackLovewx.github.io/2019/02/22/java多线程核心技术七-补充/</id>
    <published>2019-02-22T03:00:27.000Z</published>
    <updated>2019-02-25T06:48:28.479Z</updated>
    
    <content type="html"><![CDATA[<h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><h3 id="7-1需要掌握的技术点："><a href="#7-1需要掌握的技术点：" class="headerlink" title="7.1需要掌握的技术点："></a>7.1需要掌握的技术点：</h3><p>线程组的使用</p><p>如何切换线程的状态</p><p>SimpleDataFormat类与多线程的解决办法</p><p>如何处理线程的异常</p><h3 id="7-2线程的状态："><a href="#7-2线程的状态：" class="headerlink" title="7.2线程的状态："></a>7.2线程的状态：</h3><p>线程对象在不同的运行时期有不同的状态，状态信息就存在于State枚举类中。</p><p>线程可以处于以下状态之一；<br>NEW：至今尚未启动的线程处于这种状态</p><p>RUNNABLE：政在Java虚拟机中执行的线程处于这种状态</p><p>BLOCKED：受到阻塞并等待某个监视器锁的线程处于这种状态</p><p>WAITING：无限期的等待另一个线程来执行某一特定操作的线程处于这种状态</p><p>TIMED_WAITING：等待另一个线程来执行取决于指定等待时间的操作的线程处于这种状态。</p><p>TERMINATED：已经退出的线程处于这种状态。</p><h3 id="7-3线程组"><a href="#7-3线程组" class="headerlink" title="7.3线程组"></a>7.3线程组</h3><p>可以八线程归属到某一个线程组中，线程组中可以有线程对象，也可以有线程组，这样的组织结构类似于树的形式，</p><p>线程组的作用是可以批量的管理线程或者线程组，有效的对线程或线程组进行组织。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.primeton.threadgroup;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadGroupTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Runnable runnable1 = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">               <span class="keyword">try</span>&#123;</span><br><span class="line">                   <span class="keyword">while</span>(!Thread.currentThread().isInterrupted())&#123;</span><br><span class="line">                       System.out.println(<span class="string">"ThreadName = "</span>+Thread.currentThread().getName());</span><br><span class="line">                       Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">               &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line"></span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Runnable runnable2 = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    <span class="keyword">while</span>(!Thread.currentThread().isInterrupted())&#123;</span><br><span class="line">                        System.out.println(<span class="string">"ThreadName = "</span>+Thread.currentThread().getName());</span><br><span class="line">                        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        ThreadGroup group = <span class="keyword">new</span> ThreadGroup(<span class="string">"温欣的线程组"</span>);</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(group,runnable1);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(group,runnable2);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        System.out.println(<span class="string">"当前活跃的线程数："</span>+group.activeCount());</span><br><span class="line">        System.out.println(<span class="string">"线程组的名称是："</span>+group.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><p>当前活跃的线程数：2<br>线程组的名称是：温欣的线程组<br>ThreadName = Thread-0<br>ThreadName = Thread-1<br>ThreadName = Thread-0<br>ThreadName = Thread-1<br>ThreadName = Thread-1</p><h3 id="7-4SimpleDateFormat非线程安全"><a href="#7-4SimpleDateFormat非线程安全" class="headerlink" title="7.4SimpleDateFormat非线程安全"></a>7.4SimpleDateFormat非线程安全</h3><p>这个类主要负责日期的转换和格式化。但在多线程的环境中，使用此类容易造成数据转换及处理的不准确，因为SimpleDateFormat类并不是线程安全的。</p><p>​        </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;补充&quot;&gt;&lt;a href=&quot;#补充&quot; class=&quot;headerlink&quot; title=&quot;补充&quot;&gt;&lt;/a&gt;补充&lt;/h2&gt;&lt;h3 id=&quot;7-1需要掌握的技术点：&quot;&gt;&lt;a href=&quot;#7-1需要掌握的技术点：&quot; class=&quot;headerlink&quot; title=&quot;7
      
    
    </summary>
    
      <category term="java多线程核心技术" scheme="https://jackLovewx.github.io/categories/java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="多线程" scheme="https://jackLovewx.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>java多线程核心技术六_单例模式与多线程</title>
    <link href="https://jackLovewx.github.io/2019/02/22/java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E5%85%AD-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E4%B8%8E%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <id>https://jackLovewx.github.io/2019/02/22/java多线程核心技术六-单例模式与多线程/</id>
    <published>2019-02-22T01:49:50.000Z</published>
    <updated>2019-02-25T06:48:15.861Z</updated>
    
    <content type="html"><![CDATA[<h2 id="单例模式与多线程"><a href="#单例模式与多线程" class="headerlink" title="单例模式与多线程"></a>单例模式与多线程</h2><h3 id="6-1多线程下单例模式的安全问题解决"><a href="#6-1多线程下单例模式的安全问题解决" class="headerlink" title="6.1多线程下单例模式的安全问题解决"></a>6.1多线程下单例模式的安全问题解决</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.primeton;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SignalTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Runnable runnable = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(Signal.getInstance().hashCode());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(runnable);</span><br><span class="line">        t1.start();</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(runnable);</span><br><span class="line">        t2.start();</span><br><span class="line">        Thread t3 = <span class="keyword">new</span> Thread(runnable);</span><br><span class="line">        t3.start();</span><br><span class="line">        Thread t4 = <span class="keyword">new</span> Thread(runnable);</span><br><span class="line">        t4.start();</span><br><span class="line">        Thread t5 = <span class="keyword">new</span> Thread(runnable);</span><br><span class="line">        t5.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Signal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">volatile</span> <span class="keyword">static</span> Signal signal;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Signal</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Signal <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (Signal.class) &#123;</span><br><span class="line">            <span class="keyword">if</span> (signal == <span class="keyword">null</span>) &#123;</span><br><span class="line">                signal = <span class="keyword">new</span> Signal();</span><br><span class="line">                <span class="keyword">return</span> signal;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> signal;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p>1201841772<br>1201841772<br>1201841772<br>1201841772<br>1201841772</p><p>结论：</p><p>解决方案有俩种，上面那种是最合适的，第一种解决方案是在直接把getInstance方法设置为同步函数，但是这么做会使效率非常低下，只要一个对象获取了锁，那么其他线程再想要创建对象，只能等这个线程执行完，才能继续获取对象。</p><p>第二种就是在关键性的代码使用同步代码块来包裹。（DCL双检查锁机制）</p><h3 id="6-2使用静态内部类实现单例模式"><a href="#6-2使用静态内部类实现单例模式" class="headerlink" title="6.2使用静态内部类实现单例模式"></a>6.2使用静态内部类实现单例模式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.primeton;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SignalTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Runnable runnable = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(Signal.getInstance().hashCode());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(runnable);</span><br><span class="line">        t1.start();</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(runnable);</span><br><span class="line">        t2.start();</span><br><span class="line">        Thread t3 = <span class="keyword">new</span> Thread(runnable);</span><br><span class="line">        t3.start();</span><br><span class="line">        Thread t4 = <span class="keyword">new</span> Thread(runnable);</span><br><span class="line">        t4.start();</span><br><span class="line">        Thread t5 = <span class="keyword">new</span> Thread(runnable);</span><br><span class="line">        t5.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Signal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Signal</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SignalHandler</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> Signal signal = <span class="keyword">new</span> Signal();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Signal <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SignalHandler.signal;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p>499131126<br>499131126<br>499131126<br>499131126<br>499131126</p><h3 id="6-3使用static代码块实现单例模式"><a href="#6-3使用static代码块实现单例模式" class="headerlink" title="6.3使用static代码块实现单例模式"></a>6.3使用static代码块实现单例模式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.primeton;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SignalTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Runnable runnable = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(Signal.getInstance().hashCode());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(runnable);</span><br><span class="line">        t1.start();</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(runnable);</span><br><span class="line">        t2.start();</span><br><span class="line">        Thread t3 = <span class="keyword">new</span> Thread(runnable);</span><br><span class="line">        t3.start();</span><br><span class="line">        Thread t4 = <span class="keyword">new</span> Thread(runnable);</span><br><span class="line">        t4.start();</span><br><span class="line">        Thread t5 = <span class="keyword">new</span> Thread(runnable);</span><br><span class="line">        t5.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Signal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">static</span> Signal signal = <span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Signal</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        signal = <span class="keyword">new</span> Signal();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Signal <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  signal;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p>499131126<br>499131126<br>499131126<br>499131126<br>499131126</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;单例模式与多线程&quot;&gt;&lt;a href=&quot;#单例模式与多线程&quot; class=&quot;headerlink&quot; title=&quot;单例模式与多线程&quot;&gt;&lt;/a&gt;单例模式与多线程&lt;/h2&gt;&lt;h3 id=&quot;6-1多线程下单例模式的安全问题解决&quot;&gt;&lt;a href=&quot;#6-1多线程下单例模式
      
    
    </summary>
    
      <category term="java多线程核心技术" scheme="https://jackLovewx.github.io/categories/java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="多线程" scheme="https://jackLovewx.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>java多线程核核心技术五(定时器)</title>
    <link href="https://jackLovewx.github.io/2019/02/21/java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%A0%B8%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%BA%94-%E5%AE%9A%E6%97%B6%E5%99%A8/"/>
    <id>https://jackLovewx.github.io/2019/02/21/java多线程核核心技术五-定时器/</id>
    <published>2019-02-21T12:51:55.000Z</published>
    <updated>2019-02-25T06:48:00.442Z</updated>
    
    <content type="html"><![CDATA[<h2 id="定时器-Timer"><a href="#定时器-Timer" class="headerlink" title="定时器_Timer"></a>定时器_Timer</h2><h3 id="5-0需要掌握的技术点："><a href="#5-0需要掌握的技术点：" class="headerlink" title="5.0需要掌握的技术点："></a>5.0需要掌握的技术点：</h3><p>如何实现指定时间执行任务</p><p>如何实现按指定周期执行任务</p><h3 id="5-1定时器Timer的使用"><a href="#5-1定时器Timer的使用" class="headerlink" title="5.1定时器Timer的使用"></a>5.1定时器Timer的使用</h3><h4 id="5-1-1方法schedule-TimerTask-task-Date-time-的测试"><a href="#5-1-1方法schedule-TimerTask-task-Date-time-的测试" class="headerlink" title="5.1.1方法schedule(TimerTask task,Date time)的测试"></a>5.1.1方法schedule(TimerTask task,Date time)的测试</h4><p>Timer中允许多个TimerTask任务：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.primeton.timer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.Timer;</span><br><span class="line"><span class="keyword">import</span> java.util.TimerTask;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimerTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"当前时间为："</span>+<span class="keyword">new</span> Date());</span><br><span class="line">        Calendar calendar = Calendar.getInstance();</span><br><span class="line">        calendar.add(Calendar.SECOND,<span class="number">10</span>);</span><br><span class="line">        Date date = calendar.getTime();</span><br><span class="line">        System.out.println(<span class="string">"计划时间为："</span>+date);</span><br><span class="line">        Calendar calendar1 = Calendar.getInstance();</span><br><span class="line">        calendar1.add(Calendar.SECOND,<span class="number">15</span>);</span><br><span class="line">        Date date1 = calendar1.getTime();</span><br><span class="line">        System.out.println(<span class="string">"计划时间为："</span>+date1);</span><br><span class="line">        MyTask task1 = <span class="keyword">new</span> MyTask();</span><br><span class="line">        MyTask task2 = <span class="keyword">new</span> MyTask();</span><br><span class="line">        Timer timer = <span class="keyword">new</span> Timer();</span><br><span class="line">        timer.schedule(task1,date);</span><br><span class="line">        timer.schedule(task2,date1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTask</span> <span class="keyword">extends</span> <span class="title">TimerTask</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"任务开始执行了，时间为："</span>+<span class="keyword">new</span> Date());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p>当前时间为：Thu Feb 21 21:39:15 CST 2019<br>计划时间为：Thu Feb 21 21:39:25 CST 2019<br>计划时间为：Thu Feb 21 21:39:30 CST 2019<br>任务开始执行了，时间为：Thu Feb 21 21:39:25 CST 2019<br>任务开始执行了，时间为：Thu Feb 21 21:39:30 CST 2019</p><p>结论：TimerTask是以队列的方式一个一个被顺序性的执行，所以执行的时间有可能和预期的不一样，因为前面的任务有可能消耗的时间长，则后面的任务运行时间也被延后了。比如下面这个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.primeton.timer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.Timer;</span><br><span class="line"><span class="keyword">import</span> java.util.TimerTask;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimerTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"当前时间为："</span>+<span class="keyword">new</span> Date());</span><br><span class="line">        Calendar calendar = Calendar.getInstance();</span><br><span class="line">        calendar.add(Calendar.SECOND,<span class="number">10</span>);</span><br><span class="line">        Date date = calendar.getTime();</span><br><span class="line">        System.out.println(<span class="string">"计划时间为："</span>+date);</span><br><span class="line">        Calendar calendar1 = Calendar.getInstance();</span><br><span class="line">        calendar1.add(Calendar.SECOND,<span class="number">15</span>);</span><br><span class="line">        Date date1 = calendar1.getTime();</span><br><span class="line">        System.out.println(<span class="string">"计划时间为："</span>+date1);</span><br><span class="line">        MyTaskA taskA = <span class="keyword">new</span> MyTaskA();</span><br><span class="line">        MyTaskB taskB = <span class="keyword">new</span> MyTaskB();</span><br><span class="line">        Timer timer = <span class="keyword">new</span> Timer();</span><br><span class="line">        timer.schedule(taskA,date);</span><br><span class="line">        timer.schedule(taskB,date1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTaskA</span> <span class="keyword">extends</span> <span class="title">TimerTask</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"A任务开始执行了，时间为："</span>+<span class="keyword">new</span> Date());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"A任务结束执行了，时间为："</span>+<span class="keyword">new</span> Date());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTaskB</span> <span class="keyword">extends</span> <span class="title">TimerTask</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"B任务开始执行了，时间为："</span>+<span class="keyword">new</span> Date());</span><br><span class="line">        System.out.println(<span class="string">"B任务结束执行了，时间为："</span>+<span class="keyword">new</span> Date());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当前时间为：Thu Feb 21 21:45:47 CST 2019<br>计划时间为：Thu Feb 21 21:45:57 CST 2019<br>计划时间为：Thu Feb 21 21:46:02 CST 2019<br>A任务开始执行了，时间为：Thu Feb 21 21:45:57 CST 2019<br>A任务结束执行了，时间为：Thu Feb 21 21:46:07 CST 2019<br>B任务开始执行了，时间为：Thu Feb 21 21:46:07 CST 2019<br>B任务结束执行了，时间为：Thu Feb 21 21:46:07 CST 2019</p><h4 id="5-1-2方法schedult-TimerTask-task-Date-firstTime-long-period-的测试"><a href="#5-1-2方法schedult-TimerTask-task-Date-firstTime-long-period-的测试" class="headerlink" title="5.1.2方法schedult(TimerTask task,Date firstTime,long period)的测试"></a>5.1.2方法schedult(TimerTask task,Date firstTime,long period)的测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.primeton.timer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.Timer;</span><br><span class="line"><span class="keyword">import</span> java.util.TimerTask;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimerTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"当前时间为："</span>+<span class="keyword">new</span> Date());</span><br><span class="line">        Calendar calendar = Calendar.getInstance();</span><br><span class="line">        calendar.add(Calendar.SECOND,<span class="number">10</span>);</span><br><span class="line">        Date date = calendar.getTime();</span><br><span class="line">        System.out.println(<span class="string">"计划时间为："</span>+date);</span><br><span class="line"></span><br><span class="line">        MyTask task = <span class="keyword">new</span> MyTask();</span><br><span class="line">        Timer timer = <span class="keyword">new</span> Timer();</span><br><span class="line">        timer.schedule(task,date,<span class="number">4000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTask</span> <span class="keyword">extends</span> <span class="title">TimerTask</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"任务开始执行了，时间为："</span>+<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p>当前时间为：Thu Feb 21 22:33:20 CST 2019<br>计划时间为：Thu Feb 21 22:33:30 CST 2019<br>任务开始执行了，时间为：Thu Feb 21 22:33:30 CST 2019<br>任务开始执行了，时间为：Thu Feb 21 22:33:34 CST 2019<br>任务开始执行了，时间为：Thu Feb 21 22:33:38 CST 2019<br>任务开始执行了，时间为：Thu Feb 21 22:33:42 CST 2019<br>任务开始执行了，时间为：Thu Feb 21 22:33:46 CST 2019</p><p>结论：周期性的每四秒执行一次。</p><h4 id="5-1-3TimerTask类中的cancel方法"><a href="#5-1-3TimerTask类中的cancel方法" class="headerlink" title="5.1.3TimerTask类中的cancel方法"></a>5.1.3TimerTask类中的cancel方法</h4><p>TimerTask类中的cancel方法的作用：将自身从任务队列中除去。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.primeton.timer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.Timer;</span><br><span class="line"><span class="keyword">import</span> java.util.TimerTask;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimerTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"当前时间为："</span>+<span class="keyword">new</span> Date());</span><br><span class="line">        Calendar calendar = Calendar.getInstance();</span><br><span class="line">        calendar.add(Calendar.SECOND,<span class="number">10</span>);</span><br><span class="line">        Date date = calendar.getTime();</span><br><span class="line">        System.out.println(<span class="string">"计划时间为："</span>+date);</span><br><span class="line"></span><br><span class="line">        MyTaskA task = <span class="keyword">new</span> MyTaskA();</span><br><span class="line">        MyTaskB task1 = <span class="keyword">new</span> MyTaskB();</span><br><span class="line">        Timer timer = <span class="keyword">new</span> Timer();</span><br><span class="line">        timer.schedule(task,date,<span class="number">2000</span>);</span><br><span class="line">        timer.schedule(task1,date,<span class="number">2000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTaskA</span> <span class="keyword">extends</span> <span class="title">TimerTask</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"A任务开始执行了，时间为："</span>+<span class="keyword">new</span> Date());</span><br><span class="line">        <span class="keyword">this</span>.cancel();</span><br><span class="line">        System.out.println(<span class="string">"任务自己把自己移除了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTaskB</span> <span class="keyword">extends</span> <span class="title">TimerTask</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"B任务开始执行了，时间为："</span>+<span class="keyword">new</span> Date());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p>当前时间为：Thu Feb 21 22:40:53 CST 2019<br>计划时间为：Thu Feb 21 22:41:03 CST 2019<br>A任务开始执行了，时间为：Thu Feb 21 22:41:03 CST 2019<br>任务自己把自己移除了<br>B任务开始执行了，时间为：Thu Feb 21 22:41:03 CST 2019<br>B任务开始执行了，时间为：Thu Feb 21 22:41:05 CST 2019<br>B任务开始执行了，时间为：Thu Feb 21 22:41:07 CST 2019<br>B任务开始执行了，时间为：Thu Feb 21 22:41:09 CST 2019</p><p>结论：TimerTask类中的cancel方法时将自身从任务队列中被移除，其他任务不受影响。</p><h4 id="5-14Timer中cancel方法"><a href="#5-14Timer中cancel方法" class="headerlink" title="5.14Timer中cancel方法"></a>5.14Timer中cancel方法</h4><p>作用：将任务队列中的全部任务进行清空。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.primeton.timer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.Timer;</span><br><span class="line"><span class="keyword">import</span> java.util.TimerTask;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimerTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"当前时间为："</span>+<span class="keyword">new</span> Date());</span><br><span class="line">        Calendar calendar = Calendar.getInstance();</span><br><span class="line">        calendar.add(Calendar.SECOND,<span class="number">10</span>);</span><br><span class="line">        Date date = calendar.getTime();</span><br><span class="line">        System.out.println(<span class="string">"计划时间为："</span>+date);</span><br><span class="line"></span><br><span class="line">        MyTaskA task = <span class="keyword">new</span> MyTaskA();</span><br><span class="line">        MyTaskB task1 = <span class="keyword">new</span> MyTaskB();</span><br><span class="line">        Timer timer = <span class="keyword">new</span> Timer();</span><br><span class="line">        timer.schedule(task,date,<span class="number">2000</span>);</span><br><span class="line">        timer.schedule(task1,date,<span class="number">2000</span>);</span><br><span class="line">        Thread.sleep(<span class="number">20000</span>);</span><br><span class="line">        timer.cancel();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTaskA</span> <span class="keyword">extends</span> <span class="title">TimerTask</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"A任务开始执行了，时间为："</span>+<span class="keyword">new</span> Date());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTaskB</span> <span class="keyword">extends</span> <span class="title">TimerTask</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"B任务开始执行了，时间为："</span>+<span class="keyword">new</span> Date());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p>当前时间为：Thu Feb 21 22:48:20 CST 2019<br>计划时间为：Thu Feb 21 22:48:30 CST 2019<br>A任务开始执行了，时间为：Thu Feb 21 22:48:30 CST 2019<br>B任务开始执行了，时间为：Thu Feb 21 22:48:30 CST 2019<br>B任务开始执行了，时间为：Thu Feb 21 22:48:32 CST 2019<br>A任务开始执行了，时间为：Thu Feb 21 22:48:32 CST 2019<br>A任务开始执行了，时间为：Thu Feb 21 22:48:34 CST 2019<br>B任务开始执行了，时间为：Thu Feb 21 22:48:34 CST 2019<br>B任务开始执行了，时间为：Thu Feb 21 22:48:36 CST 2019<br>A任务开始执行了，时间为：Thu Feb 21 22:48:36 CST 2019</p><p>结论：所有的任务都被销毁了。</p><p>注意事项：</p><p>​         Timer类中的cancel方法有时并不一定会停止计划任务，而是正常执行。</p><p>​          </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.primeton.timer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.Timer;</span><br><span class="line"><span class="keyword">import</span> java.util.TimerTask;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZhuYI</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            i++;</span><br><span class="line">            Calendar calendar = Calendar.getInstance();</span><br><span class="line">            Date date = calendar.getTime();</span><br><span class="line">            MyTask task = <span class="keyword">new</span> MyTask(i);</span><br><span class="line">            Timer timer = <span class="keyword">new</span> Timer();</span><br><span class="line">            timer.schedule(task,date);</span><br><span class="line">            timer.cancel();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTask</span> <span class="keyword">extends</span> <span class="title">TimerTask</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    MyTask(<span class="keyword">int</span> i)&#123;</span><br><span class="line">        <span class="keyword">this</span>.i = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"任务的第 "</span>+i+<span class="string">" 次没有被cancel取消"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p>任务的第 10624 次没有被cancel取消</p><p>结论：原因是cancel方法没有抢到queue锁，则让TimerTask类中的任务正常执行了。</p><h4 id="5-15方法schedule-TimerTask-task，long-delay"><a href="#5-15方法schedule-TimerTask-task，long-delay" class="headerlink" title="5.15方法schedule(TimerTask task，long delay)"></a>5.15方法schedule(TimerTask task，long delay)</h4><p>作用：该方法的作用是以执行schedule方法当前的时间为参考时间，在此时间延迟指定的毫秒数后执行一次TimerTask任务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.primeton.timer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.Timer;</span><br><span class="line"><span class="keyword">import</span> java.util.TimerTask;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZhuYI</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"dangqian time:"</span>+<span class="keyword">new</span> Date());</span><br><span class="line">        MyTask task = <span class="keyword">new</span> MyTask();</span><br><span class="line">        Timer timer = <span class="keyword">new</span> Timer();</span><br><span class="line">        timer.schedule(task,<span class="number">2000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTask</span> <span class="keyword">extends</span> <span class="title">TimerTask</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"任务开始执行了时间为："</span>+<span class="keyword">new</span> Date());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p>dangqian time:Thu Feb 21 23:22:40 CST 2019<br>任务开始执行了时间为：Thu Feb 21 23:22:42 CST 2019</p><p>任务task被延迟了俩秒执行。</p><h4 id="5-16方法schedule-TimerTask-task，long-delay，long-period"><a href="#5-16方法schedule-TimerTask-task，long-delay，long-period" class="headerlink" title="5.16方法schedule(TimerTask task，long delay，long period)"></a>5.16方法schedule(TimerTask task，long delay，long period)</h4><p>作用：该方法的作用是以执行schedule方法当前的时间为参考时间，在此时间延迟指定的毫秒数后执行一次TimerTask任务,再以指定的时间周期执行这个任务。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.primeton.timer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.Timer;</span><br><span class="line"><span class="keyword">import</span> java.util.TimerTask;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZhuYI</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"dangqian time:"</span>+<span class="keyword">new</span> Date());</span><br><span class="line">        MyTask task = <span class="keyword">new</span> MyTask();</span><br><span class="line">        Timer timer = <span class="keyword">new</span> Timer();</span><br><span class="line">        timer.schedule(task,<span class="number">2000</span>,<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTask</span> <span class="keyword">extends</span> <span class="title">TimerTask</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"任务开始执行了时间为："</span>+<span class="keyword">new</span> Date());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p>dangqian time:Thu Feb 21 23:24:39 CST 2019<br>任务开始执行了时间为：Thu Feb 21 23:24:41 CST 2019<br>任务开始执行了时间为：Thu Feb 21 23:24:42 CST 2019<br>任务开始执行了时间为：Thu Feb 21 23:24:43 CST 2019<br>任务开始执行了时间为：Thu Feb 21 23:24:44 CST 2019</p><h4 id="5-17方法scheduleAtFixedRate-TimerTask-task-Date-firstTime-long-period-的测试。"><a href="#5-17方法scheduleAtFixedRate-TimerTask-task-Date-firstTime-long-period-的测试。" class="headerlink" title="5.17方法scheduleAtFixedRate(TimerTask task,Date firstTime,long period)的测试。"></a>5.17方法scheduleAtFixedRate(TimerTask task,Date firstTime,long period)的测试。</h4><p>方法schedule和scheduleAtFixedRate都会按顺序执行，他们之间的区别就是：在于有没有追赶特性。</p><p>如果计划执行时间早于当前时间，那么schedulr方法执行的任务不具备追赶性，也就是说，从计划之间到当前时间的任务都会被取消，而scheduleAtFixedRate方法具有追赶性，也就是计划时间到当前时间的任务，被补充性的执行了。</p><p>总结：定时器Timer更多的应用在了andriod技术中，比如实现类似于轮询，动画等常见的功能。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;定时器-Timer&quot;&gt;&lt;a href=&quot;#定时器-Timer&quot; class=&quot;headerlink&quot; title=&quot;定时器_Timer&quot;&gt;&lt;/a&gt;定时器_Timer&lt;/h2&gt;&lt;h3 id=&quot;5-0需要掌握的技术点：&quot;&gt;&lt;a href=&quot;#5-0需要掌握的技术点：&quot;
      
    
    </summary>
    
      <category term="java多线程核心技术" scheme="https://jackLovewx.github.io/categories/java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="多线程" scheme="https://jackLovewx.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java多线程核心技术(四)</title>
    <link href="https://jackLovewx.github.io/2019/02/21/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF-%E5%9B%9B/"/>
    <id>https://jackLovewx.github.io/2019/02/21/Java多线程核心技术-四/</id>
    <published>2019-02-21T01:33:15.000Z</published>
    <updated>2019-02-25T06:47:47.254Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Lock的使用"><a href="#Lock的使用" class="headerlink" title="Lock的使用"></a>Lock的使用</h2><h3 id="4-1使用ReentrantLock类"><a href="#4-1使用ReentrantLock类" class="headerlink" title="4.1使用ReentrantLock类"></a>4.1使用ReentrantLock类</h3><h4 id="4-1-1使用ReentrantLock"><a href="#4-1-1使用ReentrantLock" class="headerlink" title="4.1.1使用ReentrantLock"></a>4.1.1使用ReentrantLock</h4><p>实现同步：</p><p>在java多线程中可以使用synchronized关键字和同步代码块来实现线程之间同步互斥，但在JDK1.5中新增了ReentrantLock类也能达到同样的效果。并且在扩展上更加强大。比如具有嗅探锁定，多路分支通知等功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.primeton.lock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReentrantLockTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Resource resource = <span class="keyword">new</span> Resource();</span><br><span class="line">        Thread1 thread1 = <span class="keyword">new</span> Thread1(resource);</span><br><span class="line">        thread1.start();</span><br><span class="line">        Thread1 thread2 = <span class="keyword">new</span> Thread1(resource);</span><br><span class="line">        thread2.start();</span><br><span class="line">        Thread1 thread3 = <span class="keyword">new</span> Thread1(resource);</span><br><span class="line">        thread3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Resource</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"ThreadName="</span>+Thread.currentThread().getName()+(<span class="string">" "</span>+(i+<span class="number">1</span>)));</span><br><span class="line">        &#125;</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Thread1</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Resource resource;</span><br><span class="line">    Thread1(Resource resource)&#123;</span><br><span class="line">        <span class="keyword">this</span>.resource = resource;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        resource.method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Thread2</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Resource resource;</span><br><span class="line">    Thread2(Resource resource)&#123;</span><br><span class="line">        <span class="keyword">this</span>.resource = resource;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        resource.method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结论：调用ReentrantLock对象的lock方法获取锁，调用unlock方法释放锁。</p><h4 id="4-1-2修改多生产者多消费者代码"><a href="#4-1-2修改多生产者多消费者代码" class="headerlink" title="4.1.2修改多生产者多消费者代码"></a>4.1.2修改多生产者多消费者代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.primeton.lock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Condition;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerLock</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Resour resour = <span class="keyword">new</span> Resour();</span><br><span class="line">        Producer producer1 = <span class="keyword">new</span> Producer(resour);</span><br><span class="line">        producer1.start();</span><br><span class="line">        Producer producer2 = <span class="keyword">new</span> Producer(resour);</span><br><span class="line">        producer2.start();</span><br><span class="line">        Customer customer1 = <span class="keyword">new</span> Customer(resour);</span><br><span class="line">        customer1.start();</span><br><span class="line">        Customer customer2 = <span class="keyword">new</span> Customer(resour);</span><br><span class="line">        customer2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Resour</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">private</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    Condition producer_con = lock.newCondition();</span><br><span class="line">    Condition customer_com = lock.newCondition();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">produce</span><span class="params">(String name)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">while</span>(flag)&#123;</span><br><span class="line">            producer_con.await();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.name = name + count;</span><br><span class="line">        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">"...生产者..."</span>+<span class="keyword">this</span>.name);</span><br><span class="line">        count++;</span><br><span class="line">        flag = <span class="keyword">true</span>;</span><br><span class="line">        customer_com.signal();</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">customer</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">while</span>(!flag)&#123;</span><br><span class="line">            customer_com.await();</span><br><span class="line">        &#125;</span><br><span class="line">        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">"...消费者........."</span>+<span class="keyword">this</span>.name);</span><br><span class="line">        flag = <span class="keyword">false</span>;</span><br><span class="line">        producer_con.signal();</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">extends</span>  <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Resour r ;</span><br><span class="line">    Producer(Resour r)&#123;</span><br><span class="line">        <span class="keyword">this</span>.r = r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                r.produce(<span class="string">"烤鸭"</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Customer</span> <span class="keyword">extends</span>  <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Resour r ;</span><br><span class="line">    Customer(Resour r)&#123;</span><br><span class="line">        <span class="keyword">this</span>.r = r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                r.customer();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结论：</p><p>使用ReentrantLock代替了之前的synchronized同步函数，使用Condition代替了之前的Object中的wait/notify方法。</p><h4 id="4-1-3公平锁和非公平锁"><a href="#4-1-3公平锁和非公平锁" class="headerlink" title="4.1.3公平锁和非公平锁"></a>4.1.3公平锁和非公平锁</h4><p>公平锁：加锁前检查是否有排队等待的线程，优先排队等待的线程先来先得的FIFO先进先出的顺序。</p><p>非公平锁：加锁时不考虑排队等待的问题，直接尝试获取锁获取不到自动到队尾等待</p><p>如何设置公平锁和非公平锁：</p><p>源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ReentrantLock</span><span class="params">(<span class="keyword">boolean</span> fair)</span> </span>&#123;    sync = fair ? <span class="keyword">new</span> FairSync() : <span class="keyword">new</span> NonfairSync();&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ReentrantLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    sync = <span class="keyword">new</span> NonfairSync();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由源码可以知道ReentrantLock无参时为默认的非公平锁，传入参数true时，为公平锁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.primeton.lock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IsFair</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Service service = <span class="keyword">new</span> Service(<span class="keyword">false</span>);</span><br><span class="line">        ThreadA target = <span class="keyword">new</span> ThreadA(service);</span><br><span class="line">        Thread[] thread = <span class="keyword">new</span> Thread[<span class="number">10</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            thread[i] = <span class="keyword">new</span> Thread(target);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            thread[i].start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Service</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Lock lock;</span><br><span class="line">    Service(<span class="keyword">boolean</span> isFair)&#123;</span><br><span class="line">        lock = <span class="keyword">new</span> ReentrantLock(isFair);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            System.out.println(<span class="string">"ThreadName = "</span>+Thread.currentThread().getName()+<span class="string">"获得了锁"</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadA</span> <span class="keyword">implements</span>  <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Service service;</span><br><span class="line">    ThreadA(Service service)&#123;</span><br><span class="line">        <span class="keyword">this</span>.service = service;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        service.method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过改变isFair的值改变公平锁和非公平锁。</p><p>当isFair为true时，说明是公平锁</p><p>hreadName = Thread-0获得了锁<br>ThreadName = Thread-1获得了锁<br>ThreadName = Thread-2获得了锁<br>ThreadName = Thread-3获得了锁<br>ThreadName = Thread-4获得了锁<br>ThreadName = Thread-5获得了锁<br>ThreadName = Thread-6获得了锁<br>ThreadName = Thread-8获得了锁<br>ThreadName = Thread-9获得了锁<br>ThreadName = Thread-7获得了锁</p><p>打印的结果基本上时按线程启动的顺序来获取锁的</p><p>当isFair为false时，说明是非公平锁</p><p>ThreadName = Thread-0获得了锁<br>ThreadName = Thread-1获得了锁<br>ThreadName = Thread-3获得了锁<br>ThreadName = Thread-4获得了锁<br>ThreadName = Thread-5获得了锁<br>ThreadName = Thread-7获得了锁<br>ThreadName = Thread-9获得了锁<br>ThreadName = Thread-2获得了锁<br>ThreadName = Thread-6获得了锁<br>ThreadName = Thread-8获得了锁</p><p>乱序，说明先start启动的线程不代表先获得锁。</p><h4 id="4-1-4方法getHoldCount，getQueueLength，和getWaitQueueLength的测试"><a href="#4-1-4方法getHoldCount，getQueueLength，和getWaitQueueLength的测试" class="headerlink" title="4.1.4方法getHoldCount，getQueueLength，和getWaitQueueLength的测试"></a>4.1.4方法getHoldCount，getQueueLength，和getWaitQueueLength的测试</h4><p>1）方法 int getHoldCount的作用是查询当前线程保持此锁定的个数，也就是调用lock方法的次数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.primeton.lock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetHoldCount</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Ser ser = <span class="keyword">new</span> Ser();</span><br><span class="line">        Runnable runnable1 = <span class="keyword">new</span> Runnable()&#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                ser.serviceMethod1();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Runnable runnable2 = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                ser.serviceMethod2();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(runnable1);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(runnable2);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ser</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">serviceMethod1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">"serviceMethod1 getHoldCount="</span>+lock.getHoldCount());</span><br><span class="line">            serviceMethod2();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">serviceMethod2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">"serviceMethod2 getHoldCount="</span>+lock.getHoldCount());</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p>Thread-0serviceMethod1 getHoldCount=1<br>Thread-0serviceMethod2 getHoldCount=2<br>Thread-1serviceMethod2 getHoldCount=1</p><p>2）方法  int getQueueLength()的作用是返回正在等待获取此锁的线程的估计数。</p><p>比如：有五个线程，1个线程首先执行了await方法，那么在调用getQueueLength方法后返回的值是4，说明有4个线程同时在等待llock锁的释放。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.primeton.lock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetQueueLength</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Ser2 ser2 = <span class="keyword">new</span> Ser2();</span><br><span class="line">        Runnable runnable = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                ser2.method1();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Thread[] threads = <span class="keyword">new</span> Thread[<span class="number">10</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            threads[i] = <span class="keyword">new</span> Thread(runnable);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            threads[i].start();</span><br><span class="line">        &#125;</span><br><span class="line">        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        System.out.println(<span class="string">"当前等待的线程数是："</span>+ser2.lock.getQueueLength());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ser2</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            System.out.println(<span class="string">"TheadName= "</span> + Thread.currentThread().getName()+<span class="string">"进入方法"</span>);</span><br><span class="line">            Thread.sleep(Integer.MAX_VALUE);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p>TheadName= Thread-0进入方法<br>当前等待的线程数是：9</p><p>3） int getWaitQueueLength() 的作用是返回等待与此锁相关的给定条件Condition的线程估计数。</p><p>比如有五个线程，每个线程都执行了同一个Condition对象的await方法，则调用getWaitQueueLength方法返回的值就是五了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.primeton.lock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Condition;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetQueueLength</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Ser2 ser2 = <span class="keyword">new</span> Ser2();</span><br><span class="line">        Runnable runnable = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                ser2.method1();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Thread[] threads = <span class="keyword">new</span> Thread[<span class="number">10</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            threads[i] = <span class="keyword">new</span> Thread(runnable);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            threads[i].start();</span><br><span class="line">        &#125;</span><br><span class="line">        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        ser2.method2();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ser2</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    Condition condition = lock.newCondition();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            condition.await();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            System.out.println(<span class="string">"当前正在等待的线程数是："</span>+lock.getWaitQueueLength(condition));</span><br><span class="line">            condition.signal();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p>当前正在等待的线程数是：10</p><h4 id="4-1-5-方法hasQueuedTrhead-hasQueuedThreads-hasWaiters-测试"><a href="#4-1-5-方法hasQueuedTrhead-hasQueuedThreads-hasWaiters-测试" class="headerlink" title="4.1.5 方法hasQueuedTrhead(),hasQueuedThreads(),hasWaiters()测试"></a>4.1.5 方法hasQueuedTrhead(),hasQueuedThreads(),hasWaiters()测试</h4><p>1）方法 boolean hasQueuedThread(Thread thread) 的作用是查询指定的线程是否正在等待获取这个锁。</p><p>2）方法 boolean hasQueuedThread(sThread thread) 的作用是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.primeton.lock;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetQueueLength</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Ser2 ser2 = <span class="keyword">new</span> Ser2();</span><br><span class="line">        Runnable runnable = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                ser2.method1();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(runnable);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(runnable);</span><br><span class="line">        t1.start();</span><br><span class="line">        Thread.sleep(<span class="number">500</span>);</span><br><span class="line">        t2.start();</span><br><span class="line">        Thread.sleep(<span class="number">500</span>);</span><br><span class="line">        System.out.println(ser2.lock.hasQueuedThread(t1));</span><br><span class="line">        System.out.println(ser2.lock.hasQueuedThread(t2));</span><br><span class="line">        System.out.println(ser2.lock.hasQueuedThreads());</span><br><span class="line">       <span class="comment">/* Thread[] threads = new Thread[10];</span></span><br><span class="line"><span class="comment">        for (int i = 0; i &lt; 10; i++) &#123;</span></span><br><span class="line"><span class="comment">            threads[i] = new Thread(runnable);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        for (int i = 0; i &lt; 10; i++) &#123;</span></span><br><span class="line"><span class="comment">            threads[i].start();</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">        <span class="comment">/*Thread.sleep(2000);*/</span></span><br><span class="line">        <span class="comment">/*ser2.method2();*/</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ser2</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="comment">/*Condition condition = lock.newCondition();*/</span><span class="comment">/**/</span></span><br><span class="line"><span class="comment">    public void method1()&#123;</span></span><br><span class="line"><span class="comment">        try&#123;</span></span><br><span class="line"><span class="comment">            lock.lock();</span></span><br><span class="line"><span class="comment">            Thread.sleep(Integer.MAX_VALUE);</span></span><br><span class="line"><span class="comment">        &#125;catch(Exception e)&#123;</span></span><br><span class="line"><span class="comment">            e.printStackTrace();</span></span><br><span class="line"><span class="comment">        &#125;finally&#123;</span></span><br><span class="line"><span class="comment">            lock.unlock();</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">   /* public void method2()&#123;</span></span><br><span class="line"><span class="comment">        try&#123;</span></span><br><span class="line"><span class="comment">            lock.lock();</span></span><br><span class="line"><span class="comment">            System.out.println("当前正在等待的线程数是："+lock.getWaitQueueLength(condition));</span></span><br><span class="line"><span class="comment">            condition.signal();</span></span><br><span class="line"><span class="comment">        &#125;catch(Exception e)&#123;</span></span><br><span class="line"><span class="comment">            e.printStackTrace();</span></span><br><span class="line"><span class="comment">        &#125;finally&#123;</span></span><br><span class="line"><span class="comment">            lock.unlock();</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3)方法boolean hasWaiters(Condition condition)的作用是查询是否有线程正在等待与此锁有关的condition条件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.primeton.lock;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Condition;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetQueueLength</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Ser2 ser2 = <span class="keyword">new</span> Ser2();</span><br><span class="line">        Runnable runnable = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                ser2.method1();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Thread[] threads = <span class="keyword">new</span> Thread[<span class="number">10</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            threads[i] = <span class="keyword">new</span> Thread(runnable);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            threads[i].start();</span><br><span class="line">        &#125;</span><br><span class="line">        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        ser2.method2();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ser2</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    Condition condition = lock.newCondition();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            condition.await();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            System.out.println(<span class="string">"是否有线程正在等待newCondition?"</span>+lock.hasWaiters(condition)+<span class="string">"线程数是；"</span>+lock.getWaitQueueLength(condition));</span><br><span class="line">            condition.signal();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p>是否有线程正在等待newCondition?true线程数是；10</p><h4 id="4-1-5方法-isFair-，isHeldByCurrentThread-isLocked-测试"><a href="#4-1-5方法-isFair-，isHeldByCurrentThread-isLocked-测试" class="headerlink" title="4.1.5方法 isFair()，isHeldByCurrentThread(),isLocked()测试"></a>4.1.5方法 isFair()，isHeldByCurrentThread(),isLocked()测试</h4><p>1）方法 boolean isFair()的作用是判断是不是公平锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.primeton.lock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IsFair</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Service service = <span class="keyword">new</span> Service(<span class="keyword">false</span>);</span><br><span class="line">        ThreadA target = <span class="keyword">new</span> ThreadA(service);</span><br><span class="line">        Thread[] thread = <span class="keyword">new</span> Thread[<span class="number">10</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            thread[i] = <span class="keyword">new</span> Thread(target);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            thread[i].start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Service</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ReentrantLock lock;</span><br><span class="line">    Service(<span class="keyword">boolean</span> isFair)&#123;</span><br><span class="line">        lock = <span class="keyword">new</span> ReentrantLock(isFair);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">          <span class="comment">/*  System.out.println("ThreadName = "+Thread.currentThread().getName()+"获得了锁");*/</span></span><br><span class="line">            System.out.println(<span class="string">"公平锁的情况："</span>+lock.isFair());</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadA</span> <span class="keyword">implements</span>  <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Service service;</span><br><span class="line">    ThreadA(Service service)&#123;</span><br><span class="line">        <span class="keyword">this</span>.service = service;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        service.method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p>公平锁的情况：false</p><p>。。。</p><p>把参数改成true，运行结果就是true了。</p><p>2）方法boolean isHeldByCurrentThread() 作用是查询当前线程是否持有锁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.primeton.lock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IsFair</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Service service = <span class="keyword">new</span> Service(<span class="keyword">false</span>);</span><br><span class="line">        ThreadA target = <span class="keyword">new</span> ThreadA(service);</span><br><span class="line">        <span class="comment">/*Thread[] thread = new Thread[10];</span></span><br><span class="line"><span class="comment">        for (int i = 0; i &lt; 10; i++) &#123;</span></span><br><span class="line"><span class="comment">            thread[i] = new Thread(target);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        for (int i = 0; i &lt; 10; i++) &#123;</span></span><br><span class="line"><span class="comment">            thread[i].start();</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(target);</span><br><span class="line">        thread.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Service</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ReentrantLock lock;</span><br><span class="line">    Service(<span class="keyword">boolean</span> isFair)&#123;</span><br><span class="line">        lock = <span class="keyword">new</span> ReentrantLock(isFair);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"判断当前线程是否持有锁"</span>+lock.isHeldByCurrentThread());</span><br><span class="line">            lock.lock();</span><br><span class="line">            System.out.println(<span class="string">"判断当前线程是否持有锁"</span>+lock.isHeldByCurrentThread());</span><br><span class="line">          <span class="comment">/*  System.out.println("ThreadName = "+Thread.currentThread().getName()+"获得了锁");*/</span></span><br><span class="line">            System.out.println(<span class="string">"公平锁的情况："</span>+lock.isFair());</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadA</span> <span class="keyword">implements</span>  <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Service service;</span><br><span class="line">    ThreadA(Service service)&#123;</span><br><span class="line">        <span class="keyword">this</span>.service = service;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        service.method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果；</p><p>判断当前线程是否持有锁false<br>判断当前线程是否持有锁true</p><p>3）方法 boolean isLocked()方法的作用是查询此锁是否由任意线程保持。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.primeton.lock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IsFair</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Service service = <span class="keyword">new</span> Service(<span class="keyword">false</span>);</span><br><span class="line">        ThreadA target = <span class="keyword">new</span> ThreadA(service);</span><br><span class="line">        <span class="comment">/*Thread[] thread = new Thread[10];</span></span><br><span class="line"><span class="comment">        for (int i = 0; i &lt; 10; i++) &#123;</span></span><br><span class="line"><span class="comment">            thread[i] = new Thread(target);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        for (int i = 0; i &lt; 10; i++) &#123;</span></span><br><span class="line"><span class="comment">            thread[i].start();</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(target);</span><br><span class="line">        thread.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Service</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ReentrantLock lock;</span><br><span class="line">    Service(<span class="keyword">boolean</span> isFair)&#123;</span><br><span class="line">        lock = <span class="keyword">new</span> ReentrantLock(isFair);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"判断这个锁是否由任意线程持有"</span>+lock.isLocked());</span><br><span class="line">           <span class="comment">/* System.out.println("判断当前线程是否持有锁"+lock.isHeldByCurrentThread());*/</span></span><br><span class="line">            lock.lock();</span><br><span class="line">            System.out.println(<span class="string">"判断这个锁是否由任意线程持有"</span>+lock.isLocked());</span><br><span class="line">          <span class="comment">/*  System.out.println("ThreadName = "+Thread.currentThread().getName()+"获得了锁");*/</span></span><br><span class="line">            <span class="comment">/*System.out.println("公平锁的情况："+lock.isFair());*/</span></span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadA</span> <span class="keyword">implements</span>  <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Service service;</span><br><span class="line">    ThreadA(Service service)&#123;</span><br><span class="line">        <span class="keyword">this</span>.service = service;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        service.method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p>判断这个锁是否由任意线程持有false<br>判断这个锁是否由任意线程持有true</p><h4 id="4-1-6方法lockInterruptibly，tryLock-tryLock-long-timeout-TimeUtil-unit-测试"><a href="#4-1-6方法lockInterruptibly，tryLock-tryLock-long-timeout-TimeUtil-unit-测试" class="headerlink" title="4.1.6方法lockInterruptibly，tryLock(),tryLock(long timeout,TimeUtil unit)测试"></a>4.1.6方法lockInterruptibly，tryLock(),tryLock(long timeout,TimeUtil unit)测试</h4><p>1）方法lockinterruptibly的作用是如果当前线程未被中断，则获取锁，如果已经中断则抛出异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.primeton.lock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Condition;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockInterruptibly</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Serv3 serv3 = <span class="keyword">new</span> Serv3();</span><br><span class="line">        Runnable runnable = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                serv3.method();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(runnable,<span class="string">"A"</span>);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(runnable,<span class="string">"B"</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        Thread.sleep(<span class="number">200</span>);</span><br><span class="line">        t2.start();</span><br><span class="line">        t2.interrupt();</span><br><span class="line">        System.out.println(<span class="string">"main end"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Serv3</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="keyword">private</span> Condition condition = lock.newCondition();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            lock.lockInterruptibly();</span><br><span class="line">            System.out.println(<span class="string">"lock begin"</span> + Thread.currentThread().getName());</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Integer.MAX_VALUE / <span class="number">10</span>; i++) &#123;</span><br><span class="line">                String s = <span class="keyword">new</span> String();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"lock begin"</span> + Thread.currentThread().getName());</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(lock.isHeldByCurrentThread())&#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p>lock beginA<br>lock beginA<br>main end<br>java.lang.InterruptedException<br>    at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireInterruptibly(AbstractQueuedSynchronizer.java:1220)<br>    at java.util.concurrent.locks.ReentrantLock.lockInterruptibly(ReentrantLock.java:335)<br>    at com.primeton.lock.Serv3.method(LockInterruptibly.java:29)<br>    at com.primeton.lock.LockInterruptibly1.run(LockInterruptibly.java:12)<br>    at java.lang.Thread.run(Thread.java:748)</p><p>2）tryLock()的作用是，仅在调用时锁未被另一个线程保持的情况下，才获取该锁。</p><p>3）boolean tryLock(longtime,TimeUnit unit)的作用是如果锁在给定的等待时间内没有被另一个线程保持，且当前线程没有被中断，则获取该锁。 </p><h4 id="4-1-7方法awaitUninterruptibly的使用"><a href="#4-1-7方法awaitUninterruptibly的使用" class="headerlink" title="4.1.7方法awaitUninterruptibly的使用"></a>4.1.7方法awaitUninterruptibly的使用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.primeton.lock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Condition;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AwaitUninterruptibly</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Serv4 serv4 = <span class="keyword">new</span> Serv4();</span><br><span class="line">        Runnable runnable =<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                serv4.method();</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(runnable);</span><br><span class="line">        t1.start();</span><br><span class="line">        Thread.sleep(<span class="number">200</span>);</span><br><span class="line">        t1.interrupt();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Serv4</span></span>&#123;</span><br><span class="line">    ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    Condition condition = lock.newCondition();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            System.out.println(<span class="string">"wait begin"</span>);</span><br><span class="line">            condition.awaitUninterruptibly();</span><br><span class="line">            System.out.println(<span class="string">"wait end"</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p>wait begin</p><p>不会抛出异常，如果改为condition.await()就会抛出异常了。</p><h4 id="4-1-8方法awaitUntil的使用"><a href="#4-1-8方法awaitUntil的使用" class="headerlink" title="4.1.8方法awaitUntil的使用"></a>4.1.8方法awaitUntil的使用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.primeton.lock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Condition;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AwaitUntil</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Serv5 ser5 = <span class="keyword">new</span> Serv5();</span><br><span class="line">        Runnable runnable = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    ser5.method();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(runnable);</span><br><span class="line">        t1.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Serv5</span></span>&#123;</span><br><span class="line">    ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    Condition condition = lock.newCondition();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Calendar calendar = Calendar.getInstance();</span><br><span class="line">        calendar.add(Calendar.SECOND,<span class="number">10</span>);</span><br><span class="line">        lock.lock();</span><br><span class="line">        System.out.println(<span class="string">"wait begin..."</span>);</span><br><span class="line">        condition.awaitUntil(calendar.getTime());</span><br><span class="line">        System.out.println(<span class="string">"wait end"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结论：等待十秒之后自动进行唤醒。</p><h3 id="4-2使用ReentrantReadWriteLock"><a href="#4-2使用ReentrantReadWriteLock" class="headerlink" title="4.2使用ReentrantReadWriteLock"></a>4.2使用ReentrantReadWriteLock</h3><p>在某些不需要操作实例变量的方中，完全可以使用读写锁ReentrantReadWriteLock来提升方法的代码运行速度。</p><p>读写锁表示也有俩个锁，一个是读操作相关的锁，也成为共享锁，另一个是写操作相关的锁，也叫排他锁，也就</p><p>是多个读锁之间不互斥，读锁与写锁互斥，写锁与写锁互斥，在没有线程，进行写入操作的时候，进行读取操作的</p><p>多个线程，都可以获取读锁，而进行写入操作的Thread只有在获取写锁之后才能进行写入操作，即多个线程可以同时</p><p>进行读取操作，但是同一时刻，只允许一个线程进行写入操作。</p><h4 id="4-2-1使用：读读共享"><a href="#4-2-1使用：读读共享" class="headerlink" title="4.2.1使用：读读共享"></a>4.2.1使用：读读共享</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.primeton.lock;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">import</span> java.util.concurrent.locks.ReentrantReadWriteLock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReetrantReadWriteLockTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Serv6 serv6 = <span class="keyword">new</span> Serv6();</span><br><span class="line">        Runnable runnable = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                serv6.read();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(runnable);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(runnable);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Serv6</span></span>&#123;</span><br><span class="line">    ReentrantReadWriteLock lock = <span class="keyword">new</span> ReentrantReadWriteLock();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            lock.readLock().lock();</span><br><span class="line">            System.out.println(<span class="string">"ThreadName = "</span> +Thread.currentThread().getName()+<span class="string">"获得了读锁"</span>+System.currentTimeMillis());</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            lock.readLock().lock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p>ThreadName = Thread-0获得了读锁1550751235314<br>ThreadName = Thread-1获得了读锁1550751235315</p><p>结论：</p><p>从控制台打印的运结果来看，来个线程几乎是同时进入lock方法后面的代码，说明在使用lock.readLock()读锁可以提高运行效率，允许多个线程同时执行lock（）方法后面的代码</p><h4 id="4-2-2写写互斥"><a href="#4-2-2写写互斥" class="headerlink" title="4.2.2写写互斥"></a>4.2.2写写互斥</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.primeton.lock;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">import</span> java.util.concurrent.locks.ReentrantReadWriteLock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReetrantReadWriteLockTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Serv6 serv6 = <span class="keyword">new</span> Serv6();</span><br><span class="line">        Runnable runnable = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                serv6.write();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(runnable);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(runnable);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Serv6</span></span>&#123;</span><br><span class="line">    ReentrantReadWriteLock lock = <span class="keyword">new</span> ReentrantReadWriteLock();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            lock.writeLock().lock();</span><br><span class="line">            System.out.println(<span class="string">"ThreadName = "</span> +Thread.currentThread().getName()+<span class="string">"获得了写锁"</span>+System.currentTimeMillis());</span><br><span class="line">            Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            lock.writeLock().unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p>ThreadName = Thread-0获得了写锁1550751915637<br>ThreadName = Thread-1获得了写锁1550751925639</p><p>结论：</p><p>证明了 ，写锁，在同一时间，只允许一个线程执行lock后面的代码</p><h4 id="4-2-3读写互斥"><a href="#4-2-3读写互斥" class="headerlink" title="4.2.3读写互斥"></a>4.2.3读写互斥</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.primeton.lock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantReadWriteLock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReetrantReadWriteLockTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Serv6 serv6 = <span class="keyword">new</span> Serv6();</span><br><span class="line">        Runnable runnable1 = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                serv6.read();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Runnable runnable2 = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                serv6.write();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(runnable1);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(runnable2);</span><br><span class="line">        t1.start();</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Serv6</span></span>&#123;</span><br><span class="line">    ReentrantReadWriteLock lock = <span class="keyword">new</span> ReentrantReadWriteLock();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            lock.readLock().lock();</span><br><span class="line">            System.out.println(<span class="string">"ThreadName = "</span> +Thread.currentThread().getName()+<span class="string">"获得了读锁"</span>+System.currentTimeMillis());</span><br><span class="line">            Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            lock.readLock().unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            lock.writeLock().lock();</span><br><span class="line">            System.out.println(<span class="string">"ThreadName = "</span> +Thread.currentThread().getName()+<span class="string">"获得了写锁"</span>+System.currentTimeMillis());</span><br><span class="line">            Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            lock.writeLock().unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p>ThreadName = Thread-0获得了读锁1550753188015<br>ThreadName = Thread-1获得了写锁1550753198016</p><p>结论：从运行结果上看获取了读锁在同一时间就不能获取写锁了，所以读写是互斥的。</p><p>同理写读也是互斥的</p><p>总结：读写，写写，写读都是互斥的，而读读是异步的，非互斥的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Lock的使用&quot;&gt;&lt;a href=&quot;#Lock的使用&quot; class=&quot;headerlink&quot; title=&quot;Lock的使用&quot;&gt;&lt;/a&gt;Lock的使用&lt;/h2&gt;&lt;h3 id=&quot;4-1使用ReentrantLock类&quot;&gt;&lt;a href=&quot;#4-1使用Reentrant
      
    
    </summary>
    
      <category term="java多线程核心技术" scheme="https://jackLovewx.github.io/categories/java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="多线程" scheme="https://jackLovewx.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java多线程编程核心技术(三)</title>
    <link href="https://jackLovewx.github.io/2019/02/18/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF-%E4%B8%89/"/>
    <id>https://jackLovewx.github.io/2019/02/18/Java多线程编程核心技术-三/</id>
    <published>2019-02-18T06:10:52.000Z</published>
    <updated>2019-02-25T06:47:28.916Z</updated>
    
    <content type="html"><![CDATA[<h2 id="线程之间的通信"><a href="#线程之间的通信" class="headerlink" title="线程之间的通信"></a>线程之间的通信</h2><p>线程时操作系统中独立的个体，但这些个体如果不经过特殊的处理就不能成为一个整体，线程间的通信就是成为整体的核心，使线程进行通信后，系统之间的交互性会更强大，在大大提高CPU利用率的同事，还会使程序员对各线程任务在处理的过程中进行有效的把控与监督。</p><h3 id="3-1技术点："><a href="#3-1技术点：" class="headerlink" title="3.1技术点："></a>3.1技术点：</h3><p>​    1，使用wait/notify实现线程之间的通信</p><p>​    2，生产者/消费者的实现</p><p>​    3，方法join的使用</p><p>​    4，ThreadLocal类的使用</p><h3 id="3-2等待通知机制"><a href="#3-2等待通知机制" class="headerlink" title="3.2等待通知机制"></a>3.2等待通知机制</h3><p>一句话：wait和notify：</p><p>​            wait使线程停止运行</p><p>​            notify使线程继续运行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.primeton.tongxin;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ArrayList list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">        list.add(<span class="string">"any"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> list.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadA</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span>  Object lock;</span><br><span class="line">    ThreadA(Object lock)&#123;</span><br><span class="line">        <span class="keyword">this</span>.lock = lock;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (lock)&#123;</span><br><span class="line">            <span class="keyword">if</span>(MyList.getSize() != <span class="number">5</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">"begin = "</span>+ System.currentTimeMillis());</span><br><span class="line">                    lock.wait();</span><br><span class="line">                    System.out.println(<span class="string">"end = "</span>+System.currentTimeMillis());</span><br><span class="line"></span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadB</span> <span class="keyword">extends</span>  <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object lock;</span><br><span class="line">    ThreadB(Object lock)&#123;</span><br><span class="line">        <span class="keyword">this</span>.lock = lock;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (lock)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                MyList.add();</span><br><span class="line">                <span class="keyword">if</span>(MyList.getSize() == <span class="number">5</span>)&#123;</span><br><span class="line">                    lock.notify();</span><br><span class="line">                    System.out.println(<span class="string">"已经发出通知"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">"添加了第"</span> + (i+<span class="number">1</span>) + <span class="string">"个数"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Running</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Object lock = <span class="keyword">new</span> Object();</span><br><span class="line">        ThreadA threadA = <span class="keyword">new</span> ThreadA(lock);</span><br><span class="line">        threadA.start();</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        ThreadB threadB = <span class="keyword">new</span> ThreadB(lock);</span><br><span class="line">        threadB.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p>begin = 1550473581521<br>添加了第1个数<br>添加了第2个数<br>添加了第3个数<br>添加了第4个数<br>已经发出通知<br>添加了第5个数<br>添加了第6个数<br>添加了第7个数<br>添加了第8个数<br>添加了第9个数<br>添加了第10个数<br>end = 1550473582521</p><p>结论：</p><p>​    日志信息wait end 在最后输出，这也说明了notify方法在执行后并不立即释放锁。</p><p>​    wait()方法：可以使调用该方法的线程释放共享资源的锁，然后从运行状态退出，进入等待队列，直到再次被唤醒。</p><p>​    notify()方法：可以随机唤醒等待队列中等待同一资源的 一个线程，并使该线程退出等待队列，进入可运行的状态，也就是notify方法只能通知一个线程。</p><p>​    notifyAll方法：可以使所有正在等待队列中等待同一资源的全部线程从等待状态退出，进入可运行状态，此时，优先级最高的那个线程最先执行，但是也有可能是随机执行，因为这取决于JVM虚拟机的实现。</p><h3 id="3-3线程状态切换描述："><a href="#3-3线程状态切换描述：" class="headerlink" title="3.3线程状态切换描述："></a>3.3线程状态切换描述：</h3><p>1）新创建一个新的线程兑现后，再调用它的start（）方法，系统会给该线程分配CPU资源，使其处于Runnable（可运行）状态，这个一个准备运行的阶段，如果线程抢占到CPU资源，此线程就处于Running(运行)状态</p><p>2）Runnable状态和Running状态可以相互切换，以为有可能线程运行一段时间后，有其他高优先级的线程抢占了CPU资源，这时此线程就从Running状态变成可Runnable状态</p><p>线程进入Runnable状态大体分为如下五种情况：</p><p>​    调用sleep方法后经过的时间超过了指定的休眠时间</p><p>​    线程调用的阻塞IO已经返回，阻塞方法执行完毕</p><p>​    线程成功的获取了锁对象</p><p>​    线程正在等待某个通知，其他线程发出了通知</p><p>​    处于挂起状态的线程调用了resume恢复方法。</p><p>3）Blocked是阻塞的意思，例如遇到了一个IO操作，此时CPU处于空闲状态，可能会转而把CPU时间片分配给其他线程，这时也可以称为暂停状态，Blocked状态结束后，进入Runnable状态，等待系统重新分配资源。</p><p>出现阻塞的情况：</p><p>​    线程调用sleep方法，主动放弃占有的处理器资源</p><p>​    线程调用了阻塞式IO方法，在该方法返回前，该线程被阻塞</p><p>​    线程试图获得锁，但是该锁正在被其他线程持有</p><p>​    线程正在等待某个通知</p><p>​    程序调用了suspend方法将该线程挂起，此方法容易导致死锁。不使用。</p><p>4）run方法运行结束后进入销毁阶段，整个线程执行完毕。</p><p>小结：</p><p>​    每个锁对象都有俩个队列，一个是就绪队列，一个是阻塞队列，就绪队列存储了将要获得锁的线程，阻塞队列存储了被阻塞了的线程，一个线程被唤醒后，才会进入就绪队列，等待CPU调度，相反，一个线程被wait后救护进入注射队列，等待下一次被唤醒。</p><h3 id="3-4方法wait-锁释放，与notify-锁不释放。"><a href="#3-4方法wait-锁释放，与notify-锁不释放。" class="headerlink" title="3.4方法wait()锁释放，与notify()锁不释放。"></a>3.4方法wait()锁释放，与notify()锁不释放。</h3><p>1）执行完同步代码块就会释放对象的锁</p><p>2）在执行同步代码块的过程中，遇到异常而导致线程终止，锁也会被释放</p><p>3）在执行同步代码块的过程中，执行了锁所属对象的wait方法，这个行程会释放对象锁，而此线程会进入线程池等待被唤醒。</p><h3 id="3-5只通知一个线程"><a href="#3-5只通知一个线程" class="headerlink" title="3.5只通知一个线程"></a>3.5只通知一个线程</h3><p>调用方法notify方法一次只随机通知一个线程进行唤醒。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.primeton.tongxin;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodTest</span><span class="params">(Object lock)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (lock)&#123;</span><br><span class="line">            System.out.println(<span class="string">"begin "</span>+ Thread.currentThread().getName());</span><br><span class="line">            lock.wait();</span><br><span class="line">            System.out.println(<span class="string">"end "</span>+Thread.currentThread().getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Object lock = <span class="keyword">new</span> Object();</span><br><span class="line">        Thread1 thread1 = <span class="keyword">new</span> Thread1(lock);</span><br><span class="line">        thread1.start();</span><br><span class="line">        Thread2 thread2 = <span class="keyword">new</span> Thread2(lock);</span><br><span class="line">        thread2.start();</span><br><span class="line">        Thread3 thread3 = <span class="keyword">new</span> Thread3(lock);</span><br><span class="line">        thread3.start();</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        Notify notify = <span class="keyword">new</span> Notify(lock);</span><br><span class="line">        notify.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Thread1</span> <span class="keyword">extends</span>  <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object lock;</span><br><span class="line">    Thread1(Object lock)&#123;</span><br><span class="line">        <span class="keyword">this</span>.lock = lock;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Service service = <span class="keyword">new</span> Service();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            service.methodTest(lock);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Thread2</span> <span class="keyword">extends</span>  <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object lock;</span><br><span class="line">    Thread2(Object lock)&#123;</span><br><span class="line">        <span class="keyword">this</span>.lock = lock;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Service service = <span class="keyword">new</span> Service();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            service.methodTest(lock);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Thread3</span> <span class="keyword">extends</span>  <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object lock;</span><br><span class="line">    Thread3(Object lock)&#123;</span><br><span class="line">        <span class="keyword">this</span>.lock = lock;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Service service = <span class="keyword">new</span> Service();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            service.methodTest(lock);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Notify</span> <span class="keyword">extends</span>  <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object lock;</span><br><span class="line">    Notify(Object lock)&#123;</span><br><span class="line">        <span class="keyword">this</span>.lock = lock;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (lock)&#123;</span><br><span class="line">            lock.notify();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结论： 方法notify只能唤醒一个线程，当多次调用notify方法时，会随机将等待wait状态的线程唤醒。</p><h3 id="3-6唤醒所有线程"><a href="#3-6唤醒所有线程" class="headerlink" title="3.6唤醒所有线程"></a>3.6唤醒所有线程</h3><p>将上面的lock.notify()改为 lock.notifyAll（）即可</p><h3 id="3-7方法wait-long-的使用"><a href="#3-7方法wait-long-的使用" class="headerlink" title="3.7方法wait(long)的使用"></a>3.7方法wait(long)的使用</h3><p>带一个参数的wait(long)方法是等待某一时间是否有线程对锁进行唤醒，如果超过这个时间会自动唤醒。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.primeton.tongxin;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">private</span> Object lock = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">private</span> Runnable runnable = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (lock)&#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">"wait begin "</span> + System.currentTimeMillis());</span><br><span class="line">                    lock.wait(<span class="number">5000</span>);</span><br><span class="line">                    System.out.println(<span class="string">"wait end "</span> + System.currentTimeMillis());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(runnable);</span><br><span class="line">        thread.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然也可以使用其他线程去唤醒。</p><h3 id="3-8通知太早问题"><a href="#3-8通知太早问题" class="headerlink" title="3.8通知太早问题"></a>3.8通知太早问题</h3><p>如果有俩个线程，负责通知的那个线程先执行了，那么wait永远都不会执行。</p><h3 id="3-8为什么wait方法定义在呢Object中？"><a href="#3-8为什么wait方法定义在呢Object中？" class="headerlink" title="3.8为什么wait方法定义在呢Object中？"></a>3.8为什么wait方法定义在呢Object中？</h3><p>因为这些方法时监视器的方法，而监视器其实就是对象的锁，而锁可以使任意对象。所以定义在了Object类中。</p><p>wait notify 示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.primeton.tongxin;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Resource</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    String sex;</span><br><span class="line">    <span class="keyword">boolean</span> flag  = <span class="keyword">false</span>;</span><br><span class="line">    <span class="function"><span class="keyword">synchronized</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">input</span><span class="params">(String name,String sex)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            <span class="keyword">this</span>.wait();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">        flag = <span class="keyword">true</span>;</span><br><span class="line">        notify();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">synchronized</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!flag)&#123;</span><br><span class="line">            <span class="keyword">this</span>.wait();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(name+<span class="string">"......"</span>+sex);</span><br><span class="line">        flag = <span class="keyword">false</span>;</span><br><span class="line">        notify();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Resource resource = <span class="keyword">new</span> Resource();</span><br><span class="line">        Input t1 = <span class="keyword">new</span> Input(resource);</span><br><span class="line">        t1.start();</span><br><span class="line">        Output t2 = <span class="keyword">new</span> Output(resource);</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Input</span> <span class="keyword">extends</span>  <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Resource resource;</span><br><span class="line">    Input(Resource resource)&#123;</span><br><span class="line">        <span class="keyword">this</span>.resource = resource;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i == <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        resource.input(<span class="string">"mike"</span>,<span class="string">"nan"</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        resource.input(<span class="string">"lili"</span>,<span class="string">"女"</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            i = (i+<span class="number">1</span>)%<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Output</span> <span class="keyword">extends</span>  <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Resource resource;</span><br><span class="line">    Output(Resource resource)&#123;</span><br><span class="line">        <span class="keyword">this</span>.resource = resource;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                resource.print();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-9生产者消费者问题。"><a href="#3-9生产者消费者问题。" class="headerlink" title="3.9生产者消费者问题。"></a>3.9生产者消费者问题。</h3><h4 id="3-9-1单生产单消费问题"><a href="#3-9-1单生产单消费问题" class="headerlink" title="3.9.1单生产单消费问题"></a>3.9.1单生产单消费问题</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.primeton.tongxin;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProDucerCustomerDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Resour resour = <span class="keyword">new</span> Resour();</span><br><span class="line">        Producer producer1 = <span class="keyword">new</span> Producer(resour);</span><br><span class="line">        producer1.start();</span><br><span class="line">        </span><br><span class="line">        Customer customer1 = <span class="keyword">new</span> Customer(resour);</span><br><span class="line">        customer1.start();</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Resour</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">    <span class="function"><span class="keyword">synchronized</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">produce</span><span class="params">(String name)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            <span class="keyword">this</span>.wait();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.name = name + count;</span><br><span class="line">        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">"...生产者..."</span>+<span class="keyword">this</span>.name);</span><br><span class="line">        count++;</span><br><span class="line">        flag = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">this</span>.notify();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">synchronized</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">customer</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!flag)&#123;</span><br><span class="line">            <span class="keyword">this</span>.wait();</span><br><span class="line">        &#125;</span><br><span class="line">        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">"...消费者........."</span>+<span class="keyword">this</span>.name);</span><br><span class="line">        flag = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">this</span>.notify();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">extends</span>  <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Resour r ;</span><br><span class="line">    Producer(Resour r)&#123;</span><br><span class="line">        <span class="keyword">this</span>.r = r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                r.produce(<span class="string">"烤鸭"</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Customer</span> <span class="keyword">extends</span>  <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Resour r ;</span><br><span class="line">    Customer(Resour r)&#123;</span><br><span class="line">        <span class="keyword">this</span>.r = r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                r.customer();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p>Thread-0…生产者…烤鸭1<br>Thread-1…消费者………烤鸭1<br>Thread-0…生产者…烤鸭2<br>Thread-1…消费者………烤鸭2<br>Thread-0…生产者…烤鸭3<br>Thread-1…消费者………烤鸭3<br>Thread-0…生产者…烤鸭4<br>Thread-1…消费者………烤鸭4<br>Thread-0…生产者…烤鸭5<br>Thread-1…消费者………烤鸭5</p><p>结论：使用同步解决了线程安全的问题，再使用wait/notify  等待唤醒机制达到每生产出一个，就消费一个，然后在生产这么一个循环的过程。</p><h4 id="3-9-2多生产者多消费者问题"><a href="#3-9-2多生产者多消费者问题" class="headerlink" title="3.9.2多生产者多消费者问题"></a>3.9.2多生产者多消费者问题</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.primeton.tongxin;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProDucerCustomerDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Resour resour = <span class="keyword">new</span> Resour();</span><br><span class="line">        Producer producer1 = <span class="keyword">new</span> Producer(resour);</span><br><span class="line">        producer1.start();</span><br><span class="line">        Producer producer2 = <span class="keyword">new</span> Producer(resour);</span><br><span class="line">        producer2.start();</span><br><span class="line">        Customer customer1 = <span class="keyword">new</span> Customer(resour);</span><br><span class="line">        customer1.start();</span><br><span class="line">        Customer customer2 = <span class="keyword">new</span> Customer(resour);</span><br><span class="line">        customer2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Resour</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">    <span class="function"><span class="keyword">synchronized</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">produce</span><span class="params">(String name)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            <span class="keyword">this</span>.wait();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.name = name + count;</span><br><span class="line">        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">"...生产者..."</span>+<span class="keyword">this</span>.name);</span><br><span class="line">        count++;</span><br><span class="line">        flag = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">this</span>.notify();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">synchronized</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">customer</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!flag)&#123;</span><br><span class="line">            <span class="keyword">this</span>.wait();</span><br><span class="line">        &#125;</span><br><span class="line">        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">"...消费者........."</span>+<span class="keyword">this</span>.name);</span><br><span class="line">        flag = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">this</span>.notify();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">extends</span>  <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Resour r ;</span><br><span class="line">    Producer(Resour r)&#123;</span><br><span class="line">        <span class="keyword">this</span>.r = r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                r.produce(<span class="string">"烤鸭"</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Customer</span> <span class="keyword">extends</span>  <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Resour r ;</span><br><span class="line">    Customer(Resour r)&#123;</span><br><span class="line">        <span class="keyword">this</span>.r = r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                r.customer();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p>Thread-1…生产者…烤鸭10<br>Thread-0…生产者…烤鸭11<br>Thread-3…消费者………烤鸭11<br>Thread-1…生产者…烤鸭12<br>Thread-0…生产者…烤鸭13<br>Thread-3…消费者………烤鸭13</p><p>结论：</p><p>为什么在多生产多消费者使用同步了，还是出现了线程安全问题呢？</p><p>分析：负责生产的线程被唤醒之后没有判断标记。</p><p>为了让判断标记那么把if改成while就可以了但是出现了死锁的问题。</p><p>原因是负责生产的线程唤醒了己方正在等待的线程，导致四个线程全部等待产生死锁。</p><p>解决方案：将notify改成notifyAll唤醒全部线程，就可以避免只唤醒一个己方线程了。</p><h3 id="3-10Join方法的使用"><a href="#3-10Join方法的使用" class="headerlink" title="3.10Join方法的使用"></a>3.10Join方法的使用</h3><p>在很多情况下，主线程创建并且启动子线程，如果子线程中要进行大量的耗时运算，主线程往往早于子线程就结束了，这时，如果主线程想等待子线程执行完成后再结束，就要使用join方法了，作用就是，等待线程对象销毁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.primeton.tongxin;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JoinDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        JoinTest thread = <span class="keyword">new</span> JoinTest();</span><br><span class="line">        thread.start();</span><br><span class="line">        thread.join();</span><br><span class="line">        System.out.println(<span class="string">"等待thread执行完我再执行了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JoinTest</span> <span class="keyword">extends</span>  <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sleepTime = (<span class="keyword">int</span>)(Math.random() * <span class="number">10000</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(sleepTime);</span><br><span class="line">            Thread.sleep(sleepTime);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p>8048<br>等待thread执行完我再执行了</p><p>结论：</p><p>方法join的作用是：使所属线程对象x 正常执行run方法中的任务，而使当前线程z进行无线阻塞，等待线程x销毁了之后</p><p>再继续执行线程z后面的代码。</p><p>join方法内部使用wait方法进行等待。</p><h4 id="3-10-1join-long-方法和sleep-long-方法的区别"><a href="#3-10-1join-long-方法和sleep-long-方法的区别" class="headerlink" title="3.10.1join(long)方法和sleep(long)方法的区别"></a>3.10.1join(long)方法和sleep(long)方法的区别</h4><p>方法join(long)的功能在内部是使用wait(long)方法来实现的，所以join(long)方法具有释放锁的特点，当执行完wait(long)</p><p>方法后，当前线程的锁被释放，那么其他线程就可以调用此线程的同步方法了。     </p><p>而Thread.slepp(long)方法却不释放锁。</p><h3 id="3-11ThreadLocal详解："><a href="#3-11ThreadLocal详解：" class="headerlink" title="3.11ThreadLocal详解："></a>3.11ThreadLocal详解：</h3><h4 id="3-11-1一-对ThreadLocal的理解"><a href="#3-11-1一-对ThreadLocal的理解" class="headerlink" title="3.11.1一.对ThreadLocal的理解"></a>3.11.1一.对ThreadLocal的理解</h4><p>　　ThreadLocal，很多地方叫做线程本地变量，也有些地方叫做线程本地存储，其实意思差不多。可能很多朋友都知道ThreadLocal为变量在每个线程中都创建了一个副本，那么每个线程可以访问自己内部的副本变量。</p><p>　　这句话从字面上看起来很容易理解，但是真正理解并不是那么容易。</p><p>　　我们还是先来看一个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConnectionManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Connection connect = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">openConnection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(connect == <span class="keyword">null</span>)&#123;</span><br><span class="line">            connect = DriverManager.getConnection();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> connect;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">closeConnection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(connect!=<span class="keyword">null</span>)</span><br><span class="line">            connect.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　假设有这样一个数据库链接管理类，这段代码在单线程中使用是没有任何问题的，但是如果在多线程中使用呢？很显然，在多线程中使用会存在线程安全问题：第一，这里面的2个方法都没有进行同步，很可能在openConnection方法中会多次创建connect；第二，由于connect是共享变量，那么必然在调用connect的地方需要使用到同步来保障线程安全，因为很可能一个线程在使用connect进行数据库操作，而另外一个线程调用closeConnection关闭链接。</p><p>　　所以出于线程安全的考虑，必须将这段代码的两个方法进行同步处理，并且在调用connect的地方需要进行同步处理。</p><p>　　这样将会大大影响程序执行效率，因为一个线程在使用connect进行数据库操作的时候，其他线程只有等待。</p><p>　　那么大家来仔细分析一下这个问题，这地方到底需不需要将connect变量进行共享？事实上，是不需要的。假如每个线程中都有一个connect变量，各个线程之间对connect变量的访问实际上是没有依赖关系的，即一个线程不需要关心其他线程是否对这个connect进行了修改的。</p><p>　　到这里，可能会有朋友想到，既然不需要在线程之间共享这个变量，可以直接这样处理，在每个需要使用数据库连接的方法中具体使用时才创建数据库链接，然后在方法调用完毕再释放这个连接。比如下面这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConnectionManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>  Connection connect = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Connection <span class="title">openConnection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(connect == <span class="keyword">null</span>)&#123;</span><br><span class="line">            connect = DriverManager.getConnection();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> connect;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">closeConnection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(connect!=<span class="keyword">null</span>)</span><br><span class="line">            connect.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dao</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ConnectionManager connectionManager = <span class="keyword">new</span> ConnectionManager();</span><br><span class="line">        Connection connection = connectionManager.openConnection();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用connection进行操作</span></span><br><span class="line"></span><br><span class="line">        connectionManager.closeConnection();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样处理确实也没有任何问题，由于每次都是在方法内部创建的连接，那么线程之间自然不存在线程安全问题。但是这样会有一个致命的影响：导致服务器压力非常大，并且严重影响程序执行性能。由于在方法中需要频繁地开启和关闭数据库连接，这样不尽严重影响程序执行效率，还可能导致服务器压力巨大。</p><p>　　那么这种情况下使用ThreadLocal是再适合不过的了，因为ThreadLocal在每个线程中对该变量会创建一个副本，即每个线程内部都会有一个该变量，且在线程内部任何地方都可以使用，线程之间互不影响，这样一来就不存在线程安全问题，也不会严重影响程序执行性能。</p><p>　　但是要注意，虽然ThreadLocal能够解决上面说的问题，但是由于在每个线程中都创建了副本，所以要考虑它对资源的消耗，比如内存的占用会比不使用ThreadLocal要大。</p><h4 id="3-11-2二深入理解ThreadLocal"><a href="#3-11-2二深入理解ThreadLocal" class="headerlink" title="3.11.2二深入理解ThreadLocal"></a>3.11.2二深入理解ThreadLocal</h4><p>在上面谈到了对ThreadLocal的一些理解，那我们下面来看一下具体ThreadLocal是如何实现的。</p><p>　　先了解一下ThreadLocal类提供的几个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(T value)</span> </span>&#123; &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line"><span class="function"><span class="keyword">protected</span> T <span class="title">initialValue</span><span class="params">()</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure><p>get()方法是用来获取ThreadLocal在当前线程中保存的变量副本，set()用来设置当前线程中变量的副本，remove()用来移除当前线程中变量的副本，initialValue()是一个protected方法，一般是用来在使用时进行重写的，它是一个延迟加载方法，下面会详细说明。</p><p>　　首先我们来看一下ThreadLocal类是如何为每个线程创建一个变量的副本的。</p><p>　　先看下get方法的实现：</p><p><img src="/2019/02/18/Java多线程编程核心技术-三/1.jpg" alt="img"> </p><p>　第一句是取得当前线程，然后通过getMap(t)方法获取到一个map，map的类型为ThreadLocalMap。然后接着下面获取到&lt;key,value&gt;键值对，注意这里获取键值对传进去的是  this，而不是当前线程t。</p><p>　　如果获取成功，则返回value值。</p><p>　　如果map为空，则调用setInitialValue方法返回value。</p><p>　　我们上面的每一句来仔细分析：</p><p>　　首先看一下getMap方法中做了什么：</p><p><img src="/2019/02/18/Java多线程编程核心技术-三/2.jpg" alt="img"> </p><p>可能大家没有想到的是，在getMap中，是调用当期线程t，返回当前线程t中的一个成员变量threadLocals。</p><p>　　那么我们继续取Thread类中取看一下成员变量threadLocals是什么：</p><p>　　<img src="https://images0.cnblogs.com/blog/288799/201408/241029514406632.jpg" alt="img"></p><p>　　实际上就是一个ThreadLocalMap，这个类型是ThreadLocal类的一个内部类，我们继续取看ThreadLocalMap的实现：</p><p><img src="/2019/02/18/Java多线程编程核心技术-三/3.jpg" alt="img"> </p><p>　可以看到ThreadLocalMap的Entry继承了WeakReference，并且使用ThreadLocal作为键值。</p><p>　　然后再继续看setInitialValue方法的具体实现：</p><p><img src="/2019/02/18/Java多线程编程核心技术-三/4.jpg" alt="img"> </p><p>很容易了解，就是如果map不为空，就设置键值对，为空，再创建Map，看一下createMap的实现： </p><p><img src="/2019/02/18/Java多线程编程核心技术-三/5.jpg" alt="img"> </p><p>至此，可能大部分朋友已经明白了ThreadLocal是如何为每个线程创建变量的副本的：</p><p>　　首先，在每个线程Thread内部有一个ThreadLocal.ThreadLocalMap类型的成员变量threadLocals，这个threadLocals就是用来存储实际的变量副本的，键值为当前ThreadLocal变量，value为变量副本（即T类型的变量）。</p><p>　　初始时，在Thread里面，threadLocals为空，当通过ThreadLocal变量调用get()方法或者set()方法，就会对Thread类中的threadLocals进行初始化，并且以当前ThreadLocal变量为键值，以ThreadLocal要保存的副本变量为value，存到threadLocals。</p><p>　　然后在当前线程里面，如果要使用副本变量，就可以通过get方法在threadLocals里面查找。</p><p>　　下面通过一个例子来证明通过ThreadLocal能达到在每个线程中创建变量副本的效果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    ThreadLocal&lt;Long&gt; longLocal = <span class="keyword">new</span> ThreadLocal&lt;Long&gt;();</span><br><span class="line">    ThreadLocal&lt;String&gt; stringLocal = <span class="keyword">new</span> ThreadLocal&lt;String&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        longLocal.set(Thread.currentThread().getId());</span><br><span class="line">        stringLocal.set(Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getLong</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> longLocal.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stringLocal.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Test test = <span class="keyword">new</span> Test();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        test.set();</span><br><span class="line">        System.out.println(test.getLong());</span><br><span class="line">        System.out.println(test.getString());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                test.set();</span><br><span class="line">                System.out.println(test.getLong());</span><br><span class="line">                System.out.println(test.getString());</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;;</span><br><span class="line">        thread1.start();</span><br><span class="line">        thread1.join();</span><br><span class="line"></span><br><span class="line">        System.out.println(test.getLong());</span><br><span class="line">        System.out.println(test.getString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2019/02/18/Java多线程编程核心技术-三/6.jpg" alt="img"> </p><p>从这段代码的输出结果可以看出，在main线程中和thread1线程中，longLocal保存的副本值和stringLocal保存的副本值都不一样。最后一次在main线程再次打印副本值是为了证明在main线程中和thread1线程中的副本值确实是不同的。</p><p>　　总结一下：</p><p>　　1）实际的通过ThreadLocal创建的副本是存储在每个线程自己的threadLocals中的；</p><p>　　2）为何threadLocals的类型ThreadLocalMap的键值为ThreadLocal对象，因为每个线程中可有多个threadLocal变量，就像上面代码中的longLocal和stringLocal；</p><p>　　3）在进行get之前，必须先set，否则会报空指针异常；</p><p>　　    如果想在get之前不需要调用set就能正常访问的话，必须重写initialValue()方法。</p><p>　　　 因为在上面的代码分析过程中，我们发现如果没有先set的话，即在map中查找不到对应的存储，则会通过调用setInitialValue方法返回i，而在setInitialValue方法中，有一个语句是T value = initialValue()， 而默认情况下，initialValue方法返回的是null。</p><p><img src="/2019/02/18/Java多线程编程核心技术-三/7.jpg" alt="img"> </p><p>看下面这个例子： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    ThreadLocal&lt;Long&gt; longLocal = <span class="keyword">new</span> ThreadLocal&lt;Long&gt;();</span><br><span class="line">    ThreadLocal&lt;String&gt; stringLocal = <span class="keyword">new</span> ThreadLocal&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        longLocal.set(Thread.currentThread().getId());</span><br><span class="line">        stringLocal.set(Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getLong</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> longLocal.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stringLocal.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Test test = <span class="keyword">new</span> Test();</span><br><span class="line"></span><br><span class="line">        System.out.println(test.getLong());</span><br><span class="line">        System.out.println(test.getString());</span><br><span class="line"></span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                test.set();</span><br><span class="line">                System.out.println(test.getLong());</span><br><span class="line">                System.out.println(test.getString());</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;;</span><br><span class="line">        thread1.start();</span><br><span class="line">        thread1.join();</span><br><span class="line"></span><br><span class="line">        System.out.println(test.getLong());</span><br><span class="line">        System.out.println(test.getString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在main线程中，没有先set，直接get的话，运行时会报空指针异常。</p><p>　　但是如果改成下面这段代码，即重写了initialValue方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    ThreadLocal&lt;Long&gt; longLocal = <span class="keyword">new</span> ThreadLocal&lt;Long&gt;()&#123;</span><br><span class="line">        <span class="function"><span class="keyword">protected</span> Long <span class="title">initialValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Thread.currentThread().getId();</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">    ThreadLocal&lt;String&gt; stringLocal = <span class="keyword">new</span> ThreadLocal&lt;String&gt;()&#123;;</span><br><span class="line">        <span class="function"><span class="keyword">protected</span> String <span class="title">initialValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Thread.currentThread().getName();</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        longLocal.set(Thread.currentThread().getId());</span><br><span class="line">        stringLocal.set(Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getLong</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> longLocal.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stringLocal.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Test test = <span class="keyword">new</span> Test();</span><br><span class="line"></span><br><span class="line">        test.set();</span><br><span class="line">        System.out.println(test.getLong());</span><br><span class="line">        System.out.println(test.getString());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                test.set();</span><br><span class="line">                System.out.println(test.getLong());</span><br><span class="line">                System.out.println(test.getString());</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;;</span><br><span class="line">        thread1.start();</span><br><span class="line">        thread1.join();</span><br><span class="line"></span><br><span class="line">        System.out.println(test.getLong());</span><br><span class="line">        System.out.println(test.getString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就可以直接不用先set而直接调用get了。 </p><h4 id="3-11-3三-ThreadLocal的应用场景"><a href="#3-11-3三-ThreadLocal的应用场景" class="headerlink" title="3.11.3三.ThreadLocal的应用场景"></a>3.11.3三.ThreadLocal的应用场景</h4><p>最常见的ThreadLocal使用场景为 用来解决 数据库连接、Session管理等。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> ThreadLocal&lt;Connection&gt; connectionHolder</span><br><span class="line">        = <span class="keyword">new</span> ThreadLocal&lt;Connection&gt;() &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Connection <span class="title">initialValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DriverManager.getConnection(DB_URL);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> connectionHolder.get();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal threadSession = <span class="keyword">new</span> ThreadLocal();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Session <span class="title">getSession</span><span class="params">()</span> <span class="keyword">throws</span> InfrastructureException </span>&#123;</span><br><span class="line">        Session s = (Session) threadSession.get();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (s == <span class="keyword">null</span>) &#123;</span><br><span class="line">                s = getSessionFactory().openSession();</span><br><span class="line">                threadSession.set(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (HibernateException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InfrastructureException(ex);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;线程之间的通信&quot;&gt;&lt;a href=&quot;#线程之间的通信&quot; class=&quot;headerlink&quot; title=&quot;线程之间的通信&quot;&gt;&lt;/a&gt;线程之间的通信&lt;/h2&gt;&lt;p&gt;线程时操作系统中独立的个体，但这些个体如果不经过特殊的处理就不能成为一个整体，线程间的通信就是成为整
      
    
    </summary>
    
      <category term="java多线程核心技术" scheme="https://jackLovewx.github.io/categories/java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="多线程" scheme="https://jackLovewx.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java多线程(二)对象及变量的并发访问</title>
    <link href="https://jackLovewx.github.io/2019/02/14/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E4%BA%8C-%E5%AF%B9%E8%B1%A1%E5%8F%8A%E5%8F%98%E9%87%8F%E7%9A%84%E5%B9%B6%E5%8F%91%E8%AE%BF%E9%97%AE/"/>
    <id>https://jackLovewx.github.io/2019/02/14/Java多线程-二-对象及变量的并发访问/</id>
    <published>2019-02-14T08:18:32.000Z</published>
    <updated>2019-02-25T06:47:12.186Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java多线程-二-对象及变量的并发访问"><a href="#Java多线程-二-对象及变量的并发访问" class="headerlink" title="Java多线程(二)对象及变量的并发访问"></a>Java多线程(二)对象及变量的并发访问</h2><h3 id="2-1synchronized同步方法"><a href="#2-1synchronized同步方法" class="headerlink" title="2.1synchronized同步方法"></a>2.1synchronized同步方法</h3><h4 id="2-1-1方法内的变量为线程安全"><a href="#2-1-1方法内的变量为线程安全" class="headerlink" title="2.1.1方法内的变量为线程安全"></a>2.1.1方法内的变量为线程安全</h4><p>非线程安全问题存在于实例变量分中，如果是方法内部的私有变量，则不存在非线程安全问题了，也就是线程安全的了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.primeton.thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HasSelfPrivateNum</span>  </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addI</span><span class="params">(String username)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>(username.equals(<span class="string">"a"</span>))&#123;</span><br><span class="line">                num = <span class="number">100</span>;</span><br><span class="line">                System.out.println(<span class="string">"a set over"</span>);</span><br><span class="line">                Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                num = <span class="number">200</span>;</span><br><span class="line">                System.out.println(<span class="string">"b set over"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(username + <span class="string">"  num="</span> + num);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        HasSelfPrivateNum hasSelfPrivateNum = <span class="keyword">new</span> HasSelfPrivateNum();</span><br><span class="line">        ThreadA threadA = <span class="keyword">new</span> ThreadA(hasSelfPrivateNum);</span><br><span class="line">        threadA.start();</span><br><span class="line">        ThreadB threadB = <span class="keyword">new</span> ThreadB(hasSelfPrivateNum);</span><br><span class="line">        threadB.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadA</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> HasSelfPrivateNum hasSelfPrivateNum;</span><br><span class="line">    ThreadA(HasSelfPrivateNum hasSelfPrivateNum)&#123;</span><br><span class="line">        <span class="keyword">this</span>.hasSelfPrivateNum = hasSelfPrivateNum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        hasSelfPrivateNum.addI(<span class="string">"a"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadB</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> HasSelfPrivateNum hasSelfPrivateNum;</span><br><span class="line">    ThreadB(HasSelfPrivateNum hasSelfPrivateNum)&#123;</span><br><span class="line">        <span class="keyword">this</span>.hasSelfPrivateNum = hasSelfPrivateNum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        hasSelfPrivateNum.addI(<span class="string">"b"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可见，方法中的变量不存在非线程安全问题，永远都是线程安全的，这是方法内部的变量时私有的特性造成的。</p><h4 id="2-1-2实例变量非线程安全"><a href="#2-1-2实例变量非线程安全" class="headerlink" title="2.1.2实例变量非线程安全"></a>2.1.2实例变量非线程安全</h4><p>如果将上面的局部变量num换成成员变量的话就会出现线程安全问题了原因是俩个线程共同操作了同一个实例变量，在public   void   addI(String username) 方法前加关键字synchronized即可。可以解决线程安全的问题了。</p><p>所谓的同步，就是给要操作的代码加了一个锁，一个线程过来拿到锁了，他先执行，另一个线程等待，知道上一个线程执行完毕了，他再执行。整个过程就是多个线程争抢同一把锁的过程。</p><p>运行结果：</p><p>a set over<br>a  num=100<br>b set over<br>b  num=200</p><h4 id="2-1-3多个对象多个锁"><a href="#2-1-3多个对象多个锁" class="headerlink" title="2.1.3多个对象多个锁"></a>2.1.3多个对象多个锁</h4><p>如果将上面main方法中的代码换成：</p><p>运行结果：</p><p>a set over<br>b set over<br>b  num=200<br>a  num=100</p><p>关键字synchronized取得的锁都是对象说，而不是把一点代码或者方法当作锁，哪个线程先执行synchronized关键字的方法，哪个线程就持有该方法所属对象的锁Lock，那么其他线程只能是等待状态，前提是多个线程访问的是同一个对象。</p><p>但是如果多个线程访问多个对象，则JVM会创建多个锁，换成创建了俩个对象，产生了俩个锁。</p><h4 id="2-1-4synchronized方法与锁对象"><a href="#2-1-4synchronized方法与锁对象" class="headerlink" title="2.1.4synchronized方法与锁对象"></a>2.1.4synchronized方法与锁对象</h4><p>证明线程锁是对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.primeton.thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PromissLock</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">synchronized</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"begin method threadName="</span> + Thread.currentThread().getName());</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            System.out.println(<span class="string">"end method threadName="</span> + Thread.currentThread().getName());</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        PromissLock promissLock = <span class="keyword">new</span> PromissLock();</span><br><span class="line">        ProTest1 thread1 = <span class="keyword">new</span> ProTest1(promissLock);</span><br><span class="line">        thread1.start();</span><br><span class="line">        ProTest1 thread2 = <span class="keyword">new</span> ProTest1(promissLock);</span><br><span class="line">        thread2.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProTest1</span> <span class="keyword">extends</span>  <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span>  PromissLock promissLock;</span><br><span class="line">    ProTest1(PromissLock promissLock)&#123;</span><br><span class="line">        <span class="keyword">this</span>.promissLock = promissLock;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        promissLock.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProTest2</span> <span class="keyword">extends</span>  <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span>  PromissLock promissLock;</span><br><span class="line">    ProTest2(PromissLock promissLock)&#123;</span><br><span class="line">        <span class="keyword">this</span>.promissLock = promissLock;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        promissLock.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p>begin method threadName=Thread-0<br>end method threadName=Thread-0<br>begin method threadName=Thread-1<br>end method threadName=Thread-1</p><p>结论：用关键字synchronized声明的方法一定是排队运行的。</p><p>​       只有共享资源的读写访问才需要同步化，如果不是公共资源，</p><p>​       那么根本没有同步的必要。</p><p>​      A线程先持有object对象的Lock锁，B线程可以以异步的方式调用object对象中的非synchronized类型的方法</p><p>​      A线程先持有object对象的Lock锁，B线程如果在这时调用object对象中的synchronized类型的方法则需等待</p><h4 id="2-1-5脏读"><a href="#2-1-5脏读" class="headerlink" title="2.1.5脏读"></a>2.1.5脏读</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.primeton.thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DirtyRead</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String username = <span class="string">"AA"</span>;</span><br><span class="line">    <span class="keyword">private</span> String password = <span class="string">"AA"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">synchronized</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(String username,String password)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.username = username;</span><br><span class="line">            Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">            <span class="keyword">this</span>.password = password;</span><br><span class="line">            System.out.println(<span class="string">"setValue method thread name="</span></span><br><span class="line">                    +Thread.currentThread().getName()+<span class="string">"username="</span></span><br><span class="line">            + username + <span class="string">"password="</span> + password);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getValue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"getValue method thread name="</span></span><br><span class="line">                +Thread.currentThread().getName()+<span class="string">"username="</span></span><br><span class="line">                + username + <span class="string">"password="</span> + password);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            DirtyRead dirtyRead = <span class="keyword">new</span> DirtyRead();</span><br><span class="line">            DirtyTest thread = <span class="keyword">new</span> DirtyTest(dirtyRead);</span><br><span class="line">            thread.start();</span><br><span class="line">            Thread.sleep(<span class="number">200</span>);</span><br><span class="line">            dirtyRead.getValue();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DirtyTest</span> <span class="keyword">extends</span>  <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> DirtyRead dirtyRead;</span><br><span class="line">    DirtyTest(DirtyRead dirtyRead)&#123;</span><br><span class="line">        <span class="keyword">this</span>.dirtyRead = dirtyRead;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        dirtyRead.setValue(<span class="string">"CC"</span>,<span class="string">"CC"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p>getValue method thread name=mainusername=CCpassword=AA<br>setValue method thread name=Thread-0username=CCpassword=CC</p><p>结论：虽然在赋值时进行了同步，但在取值时有可能出现一些意向不到的意外，这种情况就是脏读(DirtyRead)</p><p>​       发生脏读的情况实在读取实例变量时，这个值已经被其他线程更改过了出现脏读是因为pulbic void getValue()</p><p>​       方法并不是同步的，所以可以在任意时间进行调用，解决办法就是加上synchronized关键字。</p><p> 当A线程调用任何对象加入synchronized关键字的某个方法时，A线程就获得了这个方法锁，更准确的是说，获得了对象</p><p> 的锁，所以其他线程必须等A线程执行完毕才可以调用这个方法，但是B线程可以随意调用其他的非synchronized同步方         法p><h4 id="2-1-6synchronized锁重入"><a href="#2-1-6synchronized锁重入" class="headerlink" title="2.1.6synchronized锁重入"></a>2.1.6synchronized锁重入</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.primeton.thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockInsert</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">synchronized</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"service1"</span>);</span><br><span class="line">        service2();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">synchronized</span> <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">service2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"service2"</span>);</span><br><span class="line">        service3();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">synchronized</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"service3"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LockInsert lockInsert = <span class="keyword">new</span> LockInsert();</span><br><span class="line">        LockTest thread = <span class="keyword">new</span> LockTest(lockInsert);</span><br><span class="line">        thread.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LockTest</span> <span class="keyword">extends</span>  <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> LockInsert lockInsert;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LockTest</span><span class="params">(LockInsert lockInsert)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.lockInsert = lockInsert;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        lockInsert.service1();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p>service1<br>service2<br>service3</p><p>结论：</p><p>​    关键字synchronized拥有锁重入的功能，也就是在使用synchronized是，当一个线程得到一个对象锁时，再次请求此</p><p>​    对象锁是可以再次得到该对象的锁的，这也就证明了在一个同步方法内部调用其他同步方法时，永远可以得到锁。</p><p>​    可重入锁的概念是：自己可以再次获取自己的内部锁。比如有一个线程获得了某个对象的锁，此时这个对象的锁还</p><pre><code>没有被释放，当其再次想要获取这个对象的时候还是可以获得的，如果不锁重入的话，就会在成死锁。</code></pre><p>可重入锁也支持在父子类继承的环境中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.primeton.thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.security.auth.Subject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SynInsert</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line">    <span class="function"><span class="keyword">synchronized</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            i--;</span><br><span class="line">            System.out.println(<span class="string">"i="</span>+i);</span><br><span class="line">            Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SynInsertTest thread = <span class="keyword">new</span> SynInsertTest();</span><br><span class="line">        thread.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sub</span> <span class="keyword">extends</span> <span class="title">SynInsert</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">synchronized</span>  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">while</span> (i &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                i--;</span><br><span class="line">                System.out.println(<span class="string">"i=="</span>+i);</span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                <span class="keyword">this</span>.operate();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SynInsertTest</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Sub sub = <span class="keyword">new</span> Sub();</span><br><span class="line">        sub.method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p>i==9<br>i=8<br>i==7<br>i=6<br>i==5<br>i=4<br>i==3<br>i=2<br>i==1<br>i=0</p><h4 id="2-1-7出现异常，锁自动释放"><a href="#2-1-7出现异常，锁自动释放" class="headerlink" title="2.1.7出现异常，锁自动释放"></a>2.1.7出现异常，锁自动释放</h4><p>当一个线程执行的代码出现异常时，其持有的锁会自动释放。</p><h4 id="2-1-8同步不具有继承性"><a href="#2-1-8同步不具有继承性" class="headerlink" title="2.1.8同步不具有继承性"></a>2.1.8同步不具有继承性</h4><h3 id="2-2synchronized同步语句块"><a href="#2-2synchronized同步语句块" class="headerlink" title="2.2synchronized同步语句块"></a>2.2synchronized同步语句块</h3><p>谁用关键字synchronized声明方法在某些情况下是有弊端的，比如A线程调用同步方法执行一个长时间的任务，那么B线程</p><p>则必须等待比较长的时间，在这样的情况下可以使用语句块来解决。synchronized方法是对当前对象进行加锁，而</p><p>synchronized代码块是对某一个对象加锁。</p><p>注意：当一个线程访问对象中的一个同步代码快时，其他线程对同一个对象中的其他同步代码块的访问将被阻塞，则说明</p><p>​       synchronized使用的对象监视器是一个。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.primeton.thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SynWait</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodA</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="keyword">this</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">"A thread begin time="</span>+System.currentTimeMillis());</span><br><span class="line">                Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">                System.out.println(<span class="string">"A thread end time="</span> +System.currentTimeMillis());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodB</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="keyword">this</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">"B thread begin time="</span>+System.currentTimeMillis());</span><br><span class="line">                Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">                System.out.println(<span class="string">"B thread end time="</span> +System.currentTimeMillis());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SynWait synWait = <span class="keyword">new</span> SynWait();</span><br><span class="line">        ThreadOne threadOne = <span class="keyword">new</span> ThreadOne(synWait);</span><br><span class="line">        threadOne.start();</span><br><span class="line">        ThreadTwo threadTwo = <span class="keyword">new</span> ThreadTwo(synWait);</span><br><span class="line">        threadTwo.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadOne</span> <span class="keyword">extends</span>  <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> SynWait synWait;</span><br><span class="line">    ThreadOne(SynWait synWait)&#123;</span><br><span class="line">        <span class="keyword">this</span>.synWait = synWait;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        synWait.methodA();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadTwo</span> <span class="keyword">extends</span>  <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> SynWait synWait;</span><br><span class="line">    ThreadTwo(SynWait synWait)&#123;</span><br><span class="line">        <span class="keyword">this</span>.synWait = synWait;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        synWait.methodB();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p>A thread begin time=1550213865729<br>A thread end time=1550213867731<br>B thread begin time=1550213867731<br>B thread end time=1550213869731</p><p>总结：</p><p>​    synchronized同步方法和同步代码块：</p><p>​    1）对其他同步方法或代码块调用呈阻塞状态。</p><p>​    2）同一时间只有一个线程可以执行同步方法或同步代码块的任务。</p><h3 id="2-3静态同步synchronized方法与同步代码块"><a href="#2-3静态同步synchronized方法与同步代码块" class="headerlink" title="2.3静态同步synchronized方法与同步代码块"></a>2.3静态同步synchronized方法与同步代码块</h3><p>关键字synchronized还可以应用在static静态方法上，如果这样写，那就是对当前的.java文件对应的class类进行持锁，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.primeton.thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Static</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">synchronized</span>  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"thread1 begin at "</span>+ System.currentTimeMillis());</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        System.out.println(<span class="string">"thread1 end at "</span> + System.currentTimeMillis());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">synchronized</span>  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"thread2 begin at "</span>+ System.currentTimeMillis());</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        System.out.println(<span class="string">"thread2 end at "</span> + System.currentTimeMillis());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Static s1 = <span class="keyword">new</span> Static();</span><br><span class="line">        Static s2 = <span class="keyword">new</span> Static();</span><br><span class="line">        StaticTest1 thread1 = <span class="keyword">new</span> StaticTest1(s1);</span><br><span class="line">        thread1.start();</span><br><span class="line">        StaticTest2 thread2 = <span class="keyword">new</span> StaticTest2(s2);</span><br><span class="line">        thread2.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StaticTest1</span> <span class="keyword">extends</span>  <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Static aStatic;</span><br><span class="line">    StaticTest1(Static aStatic)&#123;</span><br><span class="line">        <span class="keyword">this</span>.aStatic = aStatic;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            aStatic.method1();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StaticTest2</span> <span class="keyword">extends</span>  <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Static aStatic;</span><br><span class="line">    StaticTest2(Static aStatic)&#123;</span><br><span class="line">        <span class="keyword">this</span>.aStatic = aStatic;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            aStatic.method2();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p>thread1 begin at 1550217938717<br>thread1 end at 1550217939721<br>thread2 begin at 1550217939721<br>thread2 end at 1550217940722</p><p>结论：虽然俩个线程持有了不同的锁，但是，synchronized方法加了static关键字了，这时的锁就不是当前的对象了</p><p>​       而是Class，也就是说俩个线程都是持有Class类锁。所以打印的结果会是同步的，而不是异步的。</p><h3 id="2-4同步方法无限等待与解决"><a href="#2-4同步方法无限等待与解决" class="headerlink" title="2.4同步方法无限等待与解决"></a>2.4同步方法无限等待与解决</h3><p>同步方法容易造成死循环：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.primeton.thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dead</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">synchronized</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodA</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"methodA begin"</span>);</span><br><span class="line">        <span class="keyword">boolean</span> isFlag = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">while</span>(isFlag)&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"methodB begin"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">synchronized</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodB</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"methodB begin"</span>);</span><br><span class="line">        System.out.println(<span class="string">"methodB end"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Dead dead = <span class="keyword">new</span> Dead();</span><br><span class="line">        DeadTest1 thread1 = <span class="keyword">new</span> DeadTest1(dead);</span><br><span class="line">        thread1.start();</span><br><span class="line">        DeadTest2 thread2 = <span class="keyword">new</span> DeadTest2(dead);</span><br><span class="line">        thread2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DeadTest1</span> <span class="keyword">extends</span>  <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Dead dead;</span><br><span class="line">    DeadTest1(Dead dead)&#123;</span><br><span class="line">        <span class="keyword">this</span>.dead = dead;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        dead.methodA();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DeadTest2</span> <span class="keyword">extends</span>  <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Dead dead;</span><br><span class="line">    DeadTest2(Dead dead)&#123;</span><br><span class="line">        <span class="keyword">this</span>.dead = dead;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        dead.methodA();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p>methodA begin</p><p>结论：</p><p>​    线程B永远得不到执行的机会，因为线程A一直持有锁，没有释放掉，所以线程B锁死了。</p><p>可以使用同步代码块来解决这个问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.primeton.thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dead</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodA</span><span class="params">()</span></span>&#123;</span><br><span class="line">            Object obj = <span class="keyword">new</span> Object();</span><br><span class="line">            <span class="keyword">synchronized</span> (obj)&#123;</span><br><span class="line">                System.out.println(<span class="string">"methodA begin"</span>);</span><br><span class="line">                <span class="keyword">boolean</span> isFlag = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">while</span>(isFlag)&#123;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">"methodA end"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">synchronized</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodB</span><span class="params">()</span></span>&#123;</span><br><span class="line">            Object obj = <span class="keyword">new</span> Object();</span><br><span class="line">            <span class="keyword">synchronized</span> (obj)&#123;</span><br><span class="line">                System.out.println(<span class="string">"methodB begin"</span>);</span><br><span class="line">                System.out.println(<span class="string">"methodB end"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Dead dead = <span class="keyword">new</span> Dead();</span><br><span class="line">        DeadTest1 thread1 = <span class="keyword">new</span> DeadTest1(dead);</span><br><span class="line">        thread1.start();</span><br><span class="line">        DeadTest2 thread2 = <span class="keyword">new</span> DeadTest2(dead);</span><br><span class="line">        thread2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DeadTest1</span> <span class="keyword">extends</span>  <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Dead dead;</span><br><span class="line">    DeadTest1(Dead dead)&#123;</span><br><span class="line">        <span class="keyword">this</span>.dead = dead;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        dead.methodA();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DeadTest2</span> <span class="keyword">extends</span>  <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Dead dead;</span><br><span class="line">    DeadTest2(Dead dead)&#123;</span><br><span class="line">        <span class="keyword">this</span>.dead = dead;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        dead.methodB();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p>methodA begin</p><p>methodB begin</p><p>methodB end</p><h3 id="2-5，多线程的死锁。"><a href="#2-5，多线程的死锁。" class="headerlink" title="2.5，多线程的死锁。"></a>2.5，多线程的死锁。</h3><p>不同的线程都在等待，根本不节能被释放的锁，从而导致所有的任务都无法继续完成。多线程中死锁是必须避免的，</p><p>因为这会造成线程的假死。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.primeton.thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WaitTogether</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String username;</span><br><span class="line">    <span class="keyword">public</span> Object lock1 = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="keyword">public</span> Object lock2 = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(username.equals(<span class="string">"a"</span>))&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (lock1)&#123;</span><br><span class="line">                System.out.println(<span class="string">"username="</span>+username);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">synchronized</span> (lock2)&#123;</span><br><span class="line">                    System.out.println(<span class="string">"lock1 --&gt; lock2"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(username.equals(<span class="string">"b"</span>))&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (lock2)&#123;</span><br><span class="line">                System.out.println(<span class="string">"username="</span>+username);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">synchronized</span> (lock1)&#123;</span><br><span class="line">                    System.out.println(<span class="string">"lock2 --&gt; lock1"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">       WaitTogether target = <span class="keyword">new</span> WaitTogether();</span><br><span class="line">       target.setUsername(<span class="string">"a"</span>);</span><br><span class="line">       Thread t1 = <span class="keyword">new</span> Thread(target);</span><br><span class="line">       t1.start();</span><br><span class="line">       Thread.sleep(<span class="number">100</span>);</span><br><span class="line">       target.setUsername(<span class="string">"b"</span>);</span><br><span class="line">       Thread t2 = <span class="keyword">new</span> Thread(target);</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p>username=a<br>username=b</p><p>结论：</p><p>上面俩个线程都是互相等待对方锁，因此造成了死锁。</p><h3 id="2-6volatile关键字"><a href="#2-6volatile关键字" class="headerlink" title="2.6volatile关键字"></a>2.6volatile关键字</h3><p>主要作用：使变量在多个线程间可见</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.primeton.thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VolatileTest</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isRunning = <span class="keyword">true</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRunning</span><span class="params">(<span class="keyword">boolean</span> isRunning)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.isRunning = isRunning;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span> <span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"run threadName"</span>+Thread.currentThread().getName());</span><br><span class="line">        System.out.println(<span class="string">"进入 run 了"</span>);</span><br><span class="line">        <span class="keyword">while</span>(isRunning == <span class="keyword">true</span>)&#123;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"线程被停止了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        VolatileTest thread = <span class="keyword">new</span> VolatileTest();</span><br><span class="line">        thread.start();</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        thread.setRunning(<span class="keyword">false</span>);</span><br><span class="line">        System.out.println(<span class="string">"已经赋值为false"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p>进入run了</p><p>线程被停止了<br>已经赋值为false</p><p>如果运行在JVM为Server服务器的环境中，出现死循环，为啥？</p><p>原因：变量 private boolean isRunning = true；存在于公共堆栈及线程的私有堆栈中，在JVM被设置为-server模式时，</p><p>为了线程运行的效率，线程一直在私有堆栈中取得isRunning的值为true，而代码thread.setRunning(false)；虽然被执</p><p>行了，更新的却是公共堆栈中的isRunning变量值false，所以一直就是死循环的状态。</p><p>将isRunning变量用volatile关键字修饰，可以强制线程直接从公共堆栈中取得变量值。解决了死循环问题。</p><p>比较volatile和synchronized：</p><p>1）：关键字volatile是线程同步的轻量级实现，并且只能修饰变量，而synchronized可以修饰方法，以及代码块</p><p>2）：多线程访问volatile不会发生阻塞，而synchronized会出现阻塞</p><p>3）：volatile可以保证数据的可见性，但是不能保证原子性，而synchronized可以保证原子性，也可以简介保证</p><p>​     可见性，因为它会将私有内存和公共内存的数据做同步。</p><p>4）：关键字volatile解决的是变量在多个线程之间的可见性，而synchronized解决的是多个线程之间访问资源的同步性。</p><p>结论：</p><p>1）read和load阶段： 从主存复制变量到当前线程工作内存</p><p>2）use和assign阶段：执行代码，改变共享变量值</p><p>3）store和write阶段：用工作内存数据刷新</p><h3 id="2-7使用原子类进行i-操作"><a href="#2-7使用原子类进行i-操作" class="headerlink" title="2.7使用原子类进行i++操作"></a>2.7使用原子类进行i++操作</h3><p>除了使用i++操作时使用synchronized关键字实现同步外，还可以使用AtomicInteger原子类实现。</p><p>原子操作是不可分割的整体，没有其他线程能够中断或检查正在原子操作的变量，一个原子类型就是一个原子操作</p><p>可用的类型，他可以在没有锁的情况下做到线程安全。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.primeton.thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AddCountThread</span> <span class="keyword">extends</span>  <span class="title">Thread</span></span>&#123;</span><br><span class="line">    AtomicInteger atomicInteger = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">            System.out.println(atomicInteger.incrementAndGet()+Thread.currentThread().getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AddCountThread addCountThread = <span class="keyword">new</span> AddCountThread();</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(addCountThread);</span><br><span class="line">        t1.start();</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(addCountThread);</span><br><span class="line">        t2.start();</span><br><span class="line">        Thread t3 = <span class="keyword">new</span> Thread(addCountThread);</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p>29995Thread-2<br>29996Thread-2<br>29997Thread-2<br>29998Thread-2<br>29999Thread-2<br>30000Thread-2</p><p>累加到了3万</p><h3 id="2-8原子类也并不是完全安全"><a href="#2-8原子类也并不是完全安全" class="headerlink" title="2.8原子类也并不是完全安全"></a>2.8原子类也并不是完全安全</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.primeton.thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AtomicNoSafe</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> AtomicInteger atomicInteger = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line">    <span class="function"><span class="keyword">synchronized</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addNum</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">"加了100之后的值："</span>+</span><br><span class="line">                atomicInteger.addAndGet(<span class="number">100</span>));</span><br><span class="line">        atomicInteger.addAndGet(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        AtomicNoSafe target1 = <span class="keyword">new</span> AtomicNoSafe();</span><br><span class="line">        AtomicThread[] array = <span class="keyword">new</span> AtomicThread[<span class="number">5</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;array.length ; i++) &#123;</span><br><span class="line">            array[i] = <span class="keyword">new</span> AtomicThread(target1);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">            array[i].start();</span><br><span class="line">        &#125;</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        System.out.println(target1.atomicInteger.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AtomicThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> AtomicNoSafe atomicNoSafe;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AtomicThread</span><span class="params">(AtomicNoSafe atomicNoSafe)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.atomicNoSafe = atomicNoSafe;</span><br><span class="line">    &#125;    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        atomicNoSafe.addNum();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p>100  501  200 400 300</p><p>addAndGet方法时原子的，但是方法和方法之间的调用不是原子的。必须同步。</p><p>100  201  302  403  504</p><h3 id="2-9synchronizd代码块有volatile同步的功能"><a href="#2-9synchronizd代码块有volatile同步的功能" class="headerlink" title="2.9synchronizd代码块有volatile同步的功能"></a>2.9synchronizd代码块有volatile同步的功能</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.primeton.thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isRunning = <span class="keyword">true</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">runMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"开始运行"</span>);</span><br><span class="line">        <span class="keyword">while</span>(isRunning == <span class="keyword">true</span>)&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"停下来了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stopMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">        isRunning = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Service service = <span class="keyword">new</span> Service();</span><br><span class="line">        ThreadC threadC = <span class="keyword">new</span> ThreadC(service);</span><br><span class="line">        threadC.start();</span><br><span class="line">        ThreadD threadD = <span class="keyword">new</span> ThreadD(service);</span><br><span class="line">        threadD.start();</span><br><span class="line">        System.out.println(<span class="string">"已经发起停止命令了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadC</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Service service;</span><br><span class="line">    ThreadC(Service service)&#123;</span><br><span class="line">        <span class="keyword">this</span>.service = service;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        service.runMethod();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadD</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Service service;</span><br><span class="line">    ThreadD(Service service)&#123;</span><br><span class="line">        <span class="keyword">this</span>.service = service;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        service.stopMethod();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p>已经发起停止命令了<br>开始运行</p><p>结论：出现死循环的状态原因是各个线程之间的数据没有可视性造成的。</p><p>修改runmethod代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">runMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"开始运行"</span>);</span><br><span class="line">    String anything = <span class="keyword">new</span> String();</span><br><span class="line">    <span class="keyword">while</span>(isRunning == <span class="keyword">true</span>)&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (anything)&#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"停下来了"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Java多线程-二-对象及变量的并发访问&quot;&gt;&lt;a href=&quot;#Java多线程-二-对象及变量的并发访问&quot; class=&quot;headerlink&quot; title=&quot;Java多线程(二)对象及变量的并发访问&quot;&gt;&lt;/a&gt;Java多线程(二)对象及变量的并发访问&lt;/h2&gt;&lt;
      
    
    </summary>
    
      <category term="java多线程核心技术" scheme="https://jackLovewx.github.io/categories/java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="多线程" scheme="https://jackLovewx.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>java多线程编程核心技术</title>
    <link href="https://jackLovewx.github.io/2019/02/13/java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/"/>
    <id>https://jackLovewx.github.io/2019/02/13/java多线程编程核心技术/</id>
    <published>2019-02-13T01:21:06.000Z</published>
    <updated>2019-02-25T06:46:51.470Z</updated>
    
    <content type="html"><![CDATA[<h2 id="java多线程编程核心技术"><a href="#java多线程编程核心技术" class="headerlink" title="java多线程编程核心技术"></a>java多线程编程核心技术</h2><h3 id="一Java多线程技能"><a href="#一Java多线程技能" class="headerlink" title="一Java多线程技能"></a>一Java多线程技能</h3><h3 id="1-1线程的概念："><a href="#1-1线程的概念：" class="headerlink" title="1.1线程的概念："></a>1.1线程的概念：</h3><p>​    线程可以理解成是在进程中独立运行的子任务</p><p>​    注意：多线程是异步的，代码的顺序不是线程执行的顺序，线程被调用的时机是随机的，一个进程正在运行时，至少     会有一个线程在运行，</p><h3 id="1-2继承Thread类："><a href="#1-2继承Thread类：" class="headerlink" title="1.2继承Thread类："></a>1.2继承Thread类：</h3><h4 id="1-2-1线程的调用随机性："><a href="#1-2-1线程的调用随机性：" class="headerlink" title="1.2.1线程的调用随机性："></a>1.2.1线程的调用随机性：</h4><p>1，Thread类的结构： public class Thread implements Runnable</p><p>2，创建一个自定义的 线程类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.primeton.thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.run();</span><br><span class="line">        System.out.println(<span class="string">"MyThread"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    运行类代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.primeton.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.primeton.thread.MyThread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyThread myThread = <span class="keyword">new</span> MyThread();</span><br><span class="line">        myThread.start();</span><br><span class="line">        System.out.println(<span class="string">"运行结束！！！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p>​    运行结束！！！</p><p>​    MyThread</p><p>分析：从运行结果看，run方法执行的时间比较晚，这也就说明使用多线程技术时，代码的运行结果与代码执行顺序或者</p><p>​       调用顺序是无关的。</p><p>​       线程是一个子任务，CPU以不确定的形式，或者说以随机的时间来调用线程中的run方法，所以出现上面的结果</p><p>注意：如果多次调用start()方法，则会出现异常Exception in thread “main” java.lang.IllegalThreadStateExceprton</p><h4 id="1-2-2线程的随机性："><a href="#1-2-2线程的随机性：" class="headerlink" title="1.2.2线程的随机性："></a>1.2.2线程的随机性：</h4><p>线程类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.primeton.thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread02</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;<span class="number">10</span> ; i++) &#123;</span><br><span class="line">                <span class="keyword">int</span> time = (<span class="keyword">int</span>)(Math.random() * <span class="number">1000</span>);</span><br><span class="line">                Thread.sleep(time);</span><br><span class="line">                System.out.println(<span class="string">"run="</span> + Thread.currentThread().getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            System.out.println(e.getStackTrace());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.primeton.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.primeton.thread.MyThread02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            MyThread02 thread = <span class="keyword">new</span> MyThread02();</span><br><span class="line">            thread.setName(<span class="string">"mythread"</span>);</span><br><span class="line">            thread.start();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;<span class="number">10</span> ; i++) &#123;</span><br><span class="line">                <span class="keyword">int</span> time = (<span class="keyword">int</span>)(Math.random() * <span class="number">1000</span>);</span><br><span class="line">                Thread.sleep(time);</span><br><span class="line">                System.out.println(<span class="string">"main="</span> + Thread.currentThread().getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            System.out.println(e.getStackTrace());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p>run=mythread<br>main=main<br>run=mythread<br>main=main<br>main=main<br>run=mythread<br>run=mythread<br>run=mythread<br>main=main<br>main=main<br>run=mythread<br>run=mythread<br>main=main<br>main=main<br>run=mythread<br>run=mythread<br>main=main<br>main=main<br>main=main<br>run=mythread</p><h4 id="1-2-3注意："><a href="#1-2-3注意：" class="headerlink" title="1.2.3注意："></a>1.2.3注意：</h4><p>执行start()方法的顺序不代表线程启动的顺序。</p><p>代码示例：</p><p>线程类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.primeton.thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread03</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> i;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyThread03</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.i = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"i="</span> + i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.primeton.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.primeton.thread.MyThread03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyThread03 thread1 = <span class="keyword">new</span> MyThread03(<span class="number">1</span>);</span><br><span class="line">        thread1.start();</span><br><span class="line">        MyThread03 thread2 = <span class="keyword">new</span> MyThread03(<span class="number">2</span>);</span><br><span class="line">        thread2.start();</span><br><span class="line">        MyThread03 thread3 = <span class="keyword">new</span> MyThread03(<span class="number">3</span>);</span><br><span class="line">        thread3.start();</span><br><span class="line">        MyThread03 thread4 = <span class="keyword">new</span> MyThread03(<span class="number">4</span>);</span><br><span class="line">        thread4.start();</span><br><span class="line">        MyThread03 thread5 = <span class="keyword">new</span> MyThread03(<span class="number">5</span>);</span><br><span class="line">        thread5.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p>i=2<br>i=4<br>i=1<br>i=3<br>i=5</p><h4 id="1-2-4继承Thread总结："><a href="#1-2-4继承Thread总结：" class="headerlink" title="1.2.4继承Thread总结："></a>1.2.4继承Thread总结：</h4><p>Thread类实现了Runnable接口，他们之间是多态的关系</p><p>使用继承Thread类的方式创建新线程时，最大的局限就是不支持多继承，以为java语言的特性就是单继承，所以为了</p><p>支持多继承，完全可以实现Runnable接口的方式，一边实现，一边继承。</p><h3 id="1-3实现Runnable’接口"><a href="#1-3实现Runnable’接口" class="headerlink" title="1.3实现Runnable’接口"></a>1.3实现Runnable’接口</h3><p>如果欲创建的线程类已经有一个父类了，这时就不能再继承Thread类了，因为java不支持多继承，</p><p>所以需要实现Runnable接口来应对这样的情况。</p><p>Thread类有俩个构造函数，Thread(Runnable target)</p><p>Thread(Runnable target,String name)可以传递Runnable接口，</p><p>说明构造函数支持传入一个Runnable对象。</p><h4 id="1-3-1示例一："><a href="#1-3-1示例一：" class="headerlink" title="1.3.1示例一："></a>1.3.1示例一：</h4><p>线程类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.primeton.thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRunnable01</span> <span class="keyword">implements</span>  <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"运行中。。。。。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试运行类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.primeton.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.primeton.thread.MyRunnable01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunnableTest01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Runnable run = <span class="keyword">new</span> MyRunnable01();</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(run);</span><br><span class="line">        thread.start();</span><br><span class="line">        System.out.println(<span class="string">"运行结束。。。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p>运行结束。。。<br>运行中。。。。。</p><h4 id="1-3-2实例变量与线程安全"><a href="#1-3-2实例变量与线程安全" class="headerlink" title="1.3.2实例变量与线程安全"></a>1.3.2实例变量与线程安全</h4><p>自定义线程类中的实例变量针对其他线程可以有共享和不共享之分，这在多个线程之间进行交互时是重要的一个技术点</p><h5 id="1-3-2-1示例：变量不共享"><a href="#1-3-2-1示例：变量不共享" class="headerlink" title="1.3.2.1示例：变量不共享"></a>1.3.2.1示例：变量不共享</h5><p>线程类代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.primeton.thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRunnable02</span> <span class="keyword">implements</span>  <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">5</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (count &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            count--;</span><br><span class="line">            System.out.println(<span class="string">"由"</span>+Thread.currentThread().getName()+<span class="string">"计算,count="</span>+count);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行类代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.primeton.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.primeton.thread.MyRunnable02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunnableTest02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Runnable target = <span class="keyword">new</span> MyRunnable02();</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(target);</span><br><span class="line">        thread.start();</span><br><span class="line"></span><br><span class="line">        Runnable target2 = <span class="keyword">new</span> MyRunnable02();</span><br><span class="line">        Thread thread2 = <span class="keyword">new</span> Thread(target2);</span><br><span class="line">        thread2.start();</span><br><span class="line"></span><br><span class="line">        Runnable target3 = <span class="keyword">new</span> MyRunnable02();</span><br><span class="line">        Thread thread3 = <span class="keyword">new</span> Thread(target3);</span><br><span class="line">        thread3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p>由Thread-0计算,count=4<br>由Thread-0计算,count=3<br>由Thread-1计算,count=4<br>由Thread-1计算,count=3<br>由Thread-1计算,count=2<br>由Thread-0计算,count=2<br>由Thread-1计算,count=1<br>由Thread-2计算,count=4<br>由Thread-2计算,count=3<br>由Thread-1计算,count=0<br>由Thread-0计算,count=1<br>由Thread-0计算,count=0<br>由Thread-2计算,count=2<br>由Thread-2计算,count=1<br>由Thread-2计算,count=0</p><p>总结上面示例：</p><p>​    一共创建了3个线程，每个线程都有自己的count变量，自己减少自己的count值，这种情况就是变量的不共享。</p><p>​    不会存在多个线程访问同一个实例变量的情况。</p><h5 id="1-3-2-2示例：变量共享"><a href="#1-3-2-2示例：变量共享" class="headerlink" title="1.3.2.2示例：变量共享"></a>1.3.2.2示例：变量共享</h5><p>共享数据的情况就是多个线程可以访问同一个变量，比如投票功能的软件时，多个线程可以同时处理同一个人的票数</p><p>通过在run方法前加入synchronized关键字，使多个线程在执行run方法时，以排队的方式进行处理，当一个线程调用</p><p>run前，先判断run方法有没有被上锁，如果上锁，说明有其他线程正在调用run方法，必须等其他线程对run方法调用</p><p>结束后才可以执行run方法。</p><p>synchronized可以在任意对象及方法上加锁，而加锁的这段代码被称为互斥区或者临界区</p><p>模拟一个servlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.primeton.thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(String username,String password)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            username = username;</span><br><span class="line">            <span class="keyword">if</span>(username.equals(<span class="string">"a"</span>))&#123;</span><br><span class="line">                Thread.sleep(<span class="number">6000</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            password = password;</span><br><span class="line">            System.out.println(<span class="string">"username="</span>+username + <span class="string">"  password="</span>+password);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>线程类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.primeton.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.primeton.thread.LoginServlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ALogin</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        LoginServlet.doPost(<span class="string">"a"</span>,<span class="string">"aa"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.primeton.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.primeton.thread.LoginServlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BLogin</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        LoginServlet.doPost(<span class="string">"b"</span>,<span class="string">"bb"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.primeton.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunLoginThread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">synchronized</span> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ALogin a = <span class="keyword">new</span> ALogin();</span><br><span class="line">        a.start();</span><br><span class="line">        BLogin b = <span class="keyword">new</span> BLogin();</span><br><span class="line">        b.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p>username=b  password=bb<br>username=a  password=aa</p><h5 id="1-3-2-3留意i–与syso的异常"><a href="#1-3-2-3留意i–与syso的异常" class="headerlink" title="1.3.2.3留意i–与syso的异常"></a>1.3.2.3留意i–与syso的异常</h5><p>线程类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.primeton.thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread04</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> i = <span class="number">5</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"i="</span> + (i--) + <span class="string">"threadName="</span> + Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.primeton.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.primeton.thread.MyThread04;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest04</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyThread04 target = <span class="keyword">new</span> MyThread04();</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(target);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(target);</span><br><span class="line">        Thread t3 = <span class="keyword">new</span> Thread(target);</span><br><span class="line">        Thread t4 = <span class="keyword">new</span> Thread(target);</span><br><span class="line">        Thread t5 = <span class="keyword">new</span> Thread(target);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">        t4.start();</span><br><span class="line">        t5.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p>i=4threadName=Thread-3<br>i=3threadName=Thread-4<br>i=2threadName=Thread-5<br>i=5threadName=Thread-2<br>i=5threadName=Thread-1</p><p>结论：虽然println方法内部是同步的，但是i–的操作缺失在进入println方法之前发生的，所以有线程安全问题的概率</p><p>所以为了防止发生非线程安全问题，还是应该继续使用同步的方法。</p><h5 id="1-3-2-4currentThread-方法"><a href="#1-3-2-4currentThread-方法" class="headerlink" title="1.3.2.4currentThread()方法"></a>1.3.2.4currentThread()方法</h5><p>currentThread方法可以返回代码段正在被哪个线程调用的信息。</p><h5 id="1-3-2-5-isAlive-方法"><a href="#1-3-2-5-isAlive-方法" class="headerlink" title="1.3.2.5 isAlive()方法"></a>1.3.2.5 isAlive()方法</h5><p>判断当前线程时候处于活动状态</p><p>线程类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.primeton.thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IsAlive</span> <span class="keyword">extends</span>  <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"run="</span> + <span class="keyword">this</span>.isAlive());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.primeton.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.primeton.thread.IsAlive;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IsAliveTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        IsAlive thread = <span class="keyword">new</span> IsAlive();</span><br><span class="line">        System.out.println(<span class="string">"begin =="</span> + thread.isAlive());</span><br><span class="line">        thread.start();</span><br><span class="line">        System.out.println(<span class="string">"end =="</span> + thread.isAlive());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结论：方法isAlive()的作用是测试线程时候处于活动状态，活动状态就是线程已经启动，且尚未终止，线程政处于正在运行或者准备开始运行的状态，就认为线程时存活的。</p><p>另外在使用isAlive()方法时，如果将线程对象以构造函数的方式传递给Thread对象，进行start启动时，由于Thread.currentThread()和this的差异，运行结果会有所不同。</p><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.primeton.thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IsAliveGouzao</span> <span class="keyword">extends</span>  <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IsAliveGouzao</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"IsAliveGouzao -- begin"</span>);</span><br><span class="line">        System.out.println(<span class="string">"Thread.currentThread().getName()="</span>+Thread.currentThread().getName());</span><br><span class="line">        System.out.println(<span class="string">"Thread.currentThread().isAlive()="</span>+Thread.currentThread().isAlive());</span><br><span class="line">        System.out.println(<span class="string">"this.getName()="</span> + <span class="keyword">this</span>.getName());</span><br><span class="line">        System.out.println(<span class="string">"this.isAlive()="</span> + <span class="keyword">this</span>.isAlive());</span><br><span class="line">        System.out.println(<span class="string">"IsAliveGouzao -- end"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"run -- begin"</span>);</span><br><span class="line">        System.out.println(<span class="string">"Thread.currentThread().getName()="</span>+Thread.currentThread().getName());</span><br><span class="line">        System.out.println(<span class="string">"Thread.currentThread().isAlive()="</span>+Thread.currentThread().isAlive());</span><br><span class="line">        System.out.println(<span class="string">"this.getName()="</span> + <span class="keyword">this</span>.getName());</span><br><span class="line">        System.out.println(<span class="string">"this.isAlive()="</span> + <span class="keyword">this</span>.isAlive());</span><br><span class="line">        System.out.println(<span class="string">"run-- end"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.primeton.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.primeton.thread.IsAliveGouzao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IsAliveTest02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        IsAliveGouzao target = <span class="keyword">new</span> IsAliveGouzao();</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(target);</span><br><span class="line">        System.out.println(<span class="string">"main begin t1 isAlive="</span> + thread.isAlive());</span><br><span class="line">        thread.setName(<span class="string">"A"</span>);</span><br><span class="line">        thread.start();</span><br><span class="line">        System.out.println(<span class="string">"main end t1 isLive="</span> + thread.isAlive());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p>IsAliveGouzao – begin<br>Thread.currentThread().getName()=main<br>Thread.currentThread().isAlive()=true<br>this.getName()=Thread-0<br>this.isAlive()=false<br>IsAliveGouzao – end<br>main begin t1 isAlive=false<br>main end t1 isLive=true<br>run – begin<br>Thread.currentThread().getName()=A<br>Thread.currentThread().isAlive()=true<br>this.getName()=Thread-0<br>this.isAlive()=false<br>run– end</p><h5 id="1-3-2-6sleep-方法"><a href="#1-3-2-6sleep-方法" class="headerlink" title="1.3.2.6sleep()方法"></a>1.3.2.6sleep()方法</h5><p>方法sleep的作用是在指定的毫秒数让当前正在执行的线程休眠，这个正在执行的线程是指this.currentThread()返回的线程</p><p>示例：</p><p>线程类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.primeton.thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sleep</span> <span class="keyword">extends</span>  <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"run threadName="</span> + <span class="keyword">this</span>.currentThread().getName()+<span class="string">" begin"</span>);</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            System.out.println(<span class="string">"run threadName="</span> + <span class="keyword">this</span>.currentThread().getName()+<span class="string">" end"</span> );</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.primeton.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.primeton.thread.Sleep;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SleepTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Sleep thread = <span class="keyword">new</span> Sleep();</span><br><span class="line">        System.out.println(<span class="string">"begin = "</span> + System.currentTimeMillis());</span><br><span class="line">        thread.run();</span><br><span class="line">        System.out.println(<span class="string">"end = "</span> + System.currentTimeMillis());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果；</p><p>begin = 1550123724929<br>run threadName=main begin<br>run threadName=main end<br>end = 1550123726931</p><p>线程休眠了俩秒钟</p><h5 id="1-3-2-7getId-方法"><a href="#1-3-2-7getId-方法" class="headerlink" title="1.3.2.7getId()方法"></a>1.3.2.7getId()方法</h5><p>getId()方法的作用是取得线程的唯一标识</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.primeton.thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetId</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread thread = Thread.currentThread();</span><br><span class="line">        System.out.println(thread.getName() + <span class="string">""</span> + thread.getId());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p>main1</p><p>结论：当前执行线程名称为main，线程id是1</p><h3 id="1-4暂停线程："><a href="#1-4暂停线程：" class="headerlink" title="1.4暂停线程："></a>1.4暂停线程：</h3><p>暂停线程意味着此线程还可以恢复运行，在java多线程中可以使用suspend()方法暂停线程，使用resume()方法恢复线程</p><h3 id="1-5yield方法"><a href="#1-5yield方法" class="headerlink" title="1.5yield方法"></a>1.5yield方法</h3><p>yield方法的作用是放弃当前的CPU资源，将它让给其他的任务去占用CPU执行时间，但是放弃的时间不确定，有可能刚刚放弃马上获得CPU的时间片</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.primeton.thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Yield</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">long</span> beginTime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">500000</span>; i++) &#123;</span><br><span class="line">            Thread.yield();</span><br><span class="line">            count = count + (i + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"用时："</span>+(endTime - beginTime) +<span class="string">"毫秒"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Yield thread = <span class="keyword">new</span> Yield();</span><br><span class="line">        thread.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不加Thread.yield()用时5毫秒</p><p>加了用时38毫秒</p><h3 id="1-6线程的优先级："><a href="#1-6线程的优先级：" class="headerlink" title="1.6线程的优先级："></a>1.6线程的优先级：</h3><p>操作系统中线程可以划分优先级，优先级较高的线程得到的CPU资源较多，也就是CPU优先执行优先级较高的线程对象中的任务。</p><p>设置线程的优先级使用setPriority()方法</p><p>在java中，线程的优先级分为1-10这10个等级，如果小于1或大于10，抛出throw new IllegalArfumentException()</p><p>JDK中使用3个常量来预置定义优先级的值。</p><p>public final static int MIN_PROORITY = 1;</p><p>public final static int NORM_PROORITY = 5;</p><p>public final static int MAX_PROORITY = 10;</p><p>线程类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.primeton.thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Priority01</span> <span class="keyword">extends</span>  <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">long</span> beginTime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">long</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">50000</span>; j++) &#123;</span><br><span class="line">                result = result+ j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"thread1 use time:"</span>+(endTime-beginTime));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.primeton.thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Priority02</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">long</span> beginTime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">long</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">50000</span>; j++) &#123;</span><br><span class="line">                result = result + j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"thread2 use time: "</span> + (endTime - beginTime));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.primeton.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.primeton.thread.Priority01;</span><br><span class="line"><span class="keyword">import</span> com.primeton.thread.Priority02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PriorityTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Priority01 thread1 = <span class="keyword">new</span> Priority01();</span><br><span class="line">        thread1.setPriority(<span class="number">10</span>);</span><br><span class="line">        thread1.start();</span><br><span class="line">        Priority02 thread2 = <span class="keyword">new</span> Priority02();</span><br><span class="line">        thread2.setPriority(<span class="number">1</span>);</span><br><span class="line">        thread2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p>thread1 use time:4<br>thread2 use time: 9</p><h3 id="1-7守护线程"><a href="#1-7守护线程" class="headerlink" title="1.7守护线程"></a>1.7守护线程</h3><p>在java中有俩种线程，一种是用户线程，另一种就是守护线程。</p><p>守护线程是一种特殊的线程，他的特性有陪伴的含义，当进程中不存在非守护线程了，则守护线程就自动销毁了，</p><p>典型的守护线程就是垃圾回收线程，</p><p>守护线程的作用就是为其他线程的运行提供便利服务，最典型的应用就是GC（垃圾回收器）。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;java多线程编程核心技术&quot;&gt;&lt;a href=&quot;#java多线程编程核心技术&quot; class=&quot;headerlink&quot; title=&quot;java多线程编程核心技术&quot;&gt;&lt;/a&gt;java多线程编程核心技术&lt;/h2&gt;&lt;h3 id=&quot;一Java多线程技能&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
      <category term="java多线程核心技术" scheme="https://jackLovewx.github.io/categories/java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="多线程" scheme="https://jackLovewx.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>css3—</title>
    <link href="https://jackLovewx.github.io/2019/01/29/css3%E2%80%94/"/>
    <id>https://jackLovewx.github.io/2019/01/29/css3—/</id>
    <published>2019-01-29T08:42:21.000Z</published>
    <updated>2019-01-29T09:25:32.446Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CSS3"><a href="#CSS3" class="headerlink" title="CSS3"></a>CSS3</h2><h3 id="一，边框："><a href="#一，边框：" class="headerlink" title="一，边框："></a>一，边框：</h3><p>1，使用css3可以创建圆角边框，添加阴影框。</p><p>2，常见的边框属性有：</p><p>​    1，border-radius</p><p>​    2，box-shadow</p><p>​    3，border-image（IE浏览器不支持）</p><p>3，css3圆角：</p><p>​    </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.box&#123;</span><br><span class="line">width: 100px;</span><br><span class="line">height: 100px;</span><br><span class="line">border: 2px solid;</span><br><span class="line">border-radius: 25px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4，css3盒阴影：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">div </span><br><span class="line">&#123; </span><br><span class="line">box-shadow: 10px 10px 5px #888888; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5，border-image：可以使用图像创建一个边框，在div中还创建边框</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">div&#123;</span><br><span class="line">    border-image:url(1.jpg) 30 30 round;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二，CSS3圆角："><a href="#二，CSS3圆角：" class="headerlink" title="二，CSS3圆角："></a>二，CSS3圆角：</h3><p>1，使用 CSS3 border-radius 属性，你可以给任何元素制作 “圆角”。 </p><p>2，指定背景颜色的元素圆角</p><p>3，指定边框的元素圆角</p><p>4，指定背景图片的元素圆角</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;CSS3&quot;&gt;&lt;a href=&quot;#CSS3&quot; class=&quot;headerlink&quot; title=&quot;CSS3&quot;&gt;&lt;/a&gt;CSS3&lt;/h2&gt;&lt;h3 id=&quot;一，边框：&quot;&gt;&lt;a href=&quot;#一，边框：&quot; class=&quot;headerlink&quot; title=&quot;一，边框：&quot;&gt;
      
    
    </summary>
    
      <category term="前端学习" scheme="https://jackLovewx.github.io/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="CSS3" scheme="https://jackLovewx.github.io/tags/CSS3/"/>
    
  </entry>
  
  <entry>
    <title>css3_flex布局</title>
    <link href="https://jackLovewx.github.io/2019/01/29/css3-flex%E5%B8%83%E5%B1%80/"/>
    <id>https://jackLovewx.github.io/2019/01/29/css3-flex布局/</id>
    <published>2019-01-29T05:50:17.000Z</published>
    <updated>2019-01-29T08:40:31.677Z</updated>
    
    <content type="html"><![CDATA[<h2 id="css3-flex布局"><a href="#css3-flex布局" class="headerlink" title="css3_flex布局"></a>css3_flex布局</h2><h3 id="1，布局方式："><a href="#1，布局方式：" class="headerlink" title="1，布局方式："></a>1，布局方式：</h3><p>1，传统布局方式：</p><p>​    盒子模型： content-box –&gt;如果给一个div加上padding，border或者marging盒子会变大，向外扩展</p><p>​    flex布局：border-box，向内扩展，加上padding，border盒子不会变大</p><p>​    以上content-box和border-box都是box-sizing的属性</p><p>2，之前的css版本提供了一个内置的计算函数：</p><p>​    calc(100px - 20px),数值和减号之间要有一个空格</p><p>3，使用postCss可以自动添加浏览器前缀</p><h3 id="2，父级元素："><a href="#2，父级元素：" class="headerlink" title="2，父级元素："></a>2，父级元素：</h3><p>1，display:flex</p><p>​      注意：如果使用弹性布局，子元素就不需要浮动了。</p><p>2，父级元素其他属性：</p><p>1，justify-content:  子元素水平排列方式</p><p>​     属性： center：居中            flex-start：居左           flex-end：居右</p><p>​              space-between：两端对齐</p><p>​         space-around：每个元素拉手分布    </p><p>2，align-items：子元素垂直排列</p><p>​        center：居中            flex-start：居上        flex-end：居下</p><p>3，flex-direction： 排列方式</p><p>​        默认的是： row 横向排列</p><p>​                   row-reverse：横向翻过排列</p><p>​                   column：纵向排列</p><p>​                   column-reverse：纵向翻过排列</p><p>4，flex-wrap：子元素是否在一行显示</p><p>​        默认：wrap：不换行</p><p>​               nowrap：换行</p><p>5，align-content：多行时，垂直排列</p><p>​        center：居中</p><p>​        flex-start：居上</p><p>​        flex-end：居下    </p><h3 id="3，子级元素："><a href="#3，子级元素：" class="headerlink" title="3，子级元素："></a>3，子级元素：</h3><p>1，flex：1      1指的是一个系数，将父级分为俩份，每个占一份</p><p>2，flex-grow：1    定义子元素放大比例</p><p>3，align-self：用来覆盖父级align-items： 垂直排列</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;css3-flex布局&quot;&gt;&lt;a href=&quot;#css3-flex布局&quot; class=&quot;headerlink&quot; title=&quot;css3_flex布局&quot;&gt;&lt;/a&gt;css3_flex布局&lt;/h2&gt;&lt;h3 id=&quot;1，布局方式：&quot;&gt;&lt;a href=&quot;#1，布局方式：&quot; c
      
    
    </summary>
    
      <category term="前端学习" scheme="https://jackLovewx.github.io/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="CSS3" scheme="https://jackLovewx.github.io/tags/CSS3/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins+SVN+Maven自动化部署</title>
    <link href="https://jackLovewx.github.io/2018/12/25/Jenkins-SVN-Maven%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/"/>
    <id>https://jackLovewx.github.io/2018/12/25/Jenkins-SVN-Maven自动化部署/</id>
    <published>2018-12-25T03:33:28.000Z</published>
    <updated>2019-02-25T06:48:46.087Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Jenkins-SVN-Maven自动化部署"><a href="#Jenkins-SVN-Maven自动化部署" class="headerlink" title="Jenkins+SVN+Maven自动化部署"></a>Jenkins+SVN+Maven自动化部署</h2><h2 id="一，Devops"><a href="#一，Devops" class="headerlink" title="一，Devops"></a>一，Devops</h2><p>1，devops是开发和运维的缩写。</p><p>2，devops是一组实践，强调(IT研发，运维，测试)在应用和服务生命周期中的协作，和沟通，强调整个组织的合作，以及         交付和基础设施变更的自动化，从而实现持续集成，持续部署，持续交付。</p><p>DevOps平台四大模块</p><p>​    项目管理：创建项目，项目需求</p><p>​    运维平台：监控，日志收集，</p><p>​    持续交付：提交完代码，自动打包，构建</p><p>​    代码托管：svn或者gitlab代码提交</p><h2 id="二、服务介绍"><a href="#二、服务介绍" class="headerlink" title="二、服务介绍"></a>二、服务介绍</h2><p><strong>很多事情不是光运维就可以决定的，还需要跟研发交流，我这里只是演示一个大概的持续交付的流程~</strong></p><p><strong>2.1 Jenkins介绍</strong><br><code>Jenkins</code>只是一个平台，真正运作的都是插件。这就是jenkins流行的原因，因为jenkins什么插件都有<br><code>Hudson</code>是Jenkins的前身，是基于Java开发的一种持续集成工具，用于监控程序重复的工作，Hudson后来被收购，成为商业版。后来创始人又写了一个jenkins，jenkins在功能上远远超过hudson</p><p><strong>2.2 Maven 介绍</strong><br>maven的用途<br>maven是一个项目构建和管理的工具，提供了帮助<code>管理 构建、文档、报告、依赖、scms、发布、分发</code>的方法。可以方便的编译代码、进行依赖管理、管理二进制库等等。<br>maven的好处在于可以将项目过程规范化、自动化、高效化以及强大的可扩展性<br>利用maven自身及其插件还可以获得代码检查报告、单元测试覆盖率、实现持续集成等等。</p><p><strong>maven的核心概念介绍</strong></p><blockquote><p><strong>Pom</strong><br>pom是指project object Model。pom是一个xml，在maven2里为pom.xml。是maven工作的基础，在执行task或者goal时，maven会去项目根目录下读取pom.xml获得需要的配置信息</p><p>pom文件中包含了项目的信息和maven build项目所需的配置</p><p><strong>Artifact</strong><br>这个有点不好解释，大致说就是一个项目将要产生的文件，可以是jar文件，源文件，二进制文件，war文件，甚至是pom文件。每个artifact都由groupId:artifactId:version组成的标识符唯一识别。需要被使用(依赖)的artifact都要放在仓库(见Repository)中</p><p><strong>Repositories</strong><br>Repositories是用来存储Artifact的。如果说我们的项目产生的Artifact是一个个小工具，那么Repositories就是一个仓库，里面有我们自己创建的工具，也可以储存别人造的工具，我们在项目中需要使用某种工具时，在pom中声明dependency，编译代码时就会根据dependency去下载工具（Artifact），供自己使用。</p><p><strong>Build Lifecycle</strong><br>是指一个项目build的过程。maven的Build<br>Lifecycle分为三种，分别为default（处理项目的部署）、clean（处理项目的清理）、site（处理项目的文档生成）。他们都包含不同的lifecycle。<br>Build Lifecycle是由phases构成的</p></blockquote><p><strong>2.3 SVN介绍</strong>  </p><p>SVN是近年来崛起的非常优秀的版本管理工具，与CVS管理工具一样，SVN是一个固态的跨平台的开源的版本控制系统。SVN版本管理工具管理者随时间改变的各种数据。这些数据放置在一个中央资料档案库<code>repository</code>中，这个档案库很像一个普通的文件服务器或者FTP服务器，但是，与其他服务器不同的是，SVN会备份并记录每个文件每一次的修改更新变动。这样我们就可以把任意一个时间点的档案恢复到想要的某一个旧的版本，当然也可以直接浏览指定的更新历史记录。</p><p><strong>2.4 Nexus介绍</strong></p><p>maven的仓库只有两大类：<strong>1.本地仓库</strong> <strong>2.远程仓库</strong>，在远程仓库中又分成了3种：<br><code>1 中央仓库 2 私服 3 其它公共库。</code></p><p>私服是一种特殊的远程仓库，它是架设在局域网内的仓库服务，私服代理广域网上的远程仓库，供局域网内的Maven用户使用。当Maven需要下载构件的时候，它从私服请求，如果私服上不存在该构件，则从外部的远程仓库下载，缓存在私服上之后，再为Maven的下载请求提供服务。我们还可以把一些无法从外部仓库下载到的构件上传到私服上。</p><p><strong>Maven私服的 特性：</strong></p><blockquote><ul><li>1.节省自己的外网带宽：减少重复请求造成的外网带宽消耗</li><li>2.加速Maven构件：如果项目配置了很多外部远程仓库的时候，构建速度就会大大降低</li><li>3.部署第三方构件：有些构件无法从外部仓库获得的时候，我们可以把这些构件部署到内部仓库(私服)中，供内部maven项目使用</li><li>4.提高稳定性，增强控制：Internet不稳定的时候，maven构建也会变的不稳定，一些私服软件还提供了其他的功能</li><li>5.降低中央仓库的负荷：maven中央仓库被请求的数量是巨大的，配置私服也可以大大降低中央仓库的压力</li></ul><p><strong>因此我们在实际的项目中通常使用私服来间接访问中央仓库，项目通常不直接访问中央仓库</strong> </p></blockquote><h2 id="三、环境搭建"><a href="#三、环境搭建" class="headerlink" title="三、环境搭建"></a>三、环境搭建</h2><ul><li>首先最新版本2.97 只支持java1.8，我们需要将jdk版本设置为1.8</li><li>tomcat的版本最好也是8.0.x版本或者7.0，如果使用8.5可能会有问题</li><li>系统我们使用Centos7</li></ul><h3 id="3-1安装jdk"><a href="#3-1安装jdk" class="headerlink" title="3.1安装jdk"></a>3.1安装jdk</h3><ol><li><code>$ wget http://download.oracle.com/otn-pub/java/jdk/8u144-b01/090f390dda5b47b9b721c7dfaa008135/jdk-8u144-linux-x64.tar.gz</code>这种方式是不行的下载之后解压不了，直接先去下载下来再win7客户端使用sftp服务传上去。</li><li><p>使用sftp方式上传：</p><ol><li>lcd  d:/packages  (路径填自己jdk的路径不要有中文)</li><li>put jdk-8u121-linux-x64.tar.gz</li></ol><p>3，tar -zxf jdk-8u121-linux-x64.tar.gz -C  /usr/local      （路径随便）</p><p>4，ln -s /usr/local/jdk1.8.0_121 /usr/local/jdk   （建立一个软连接方便操作）</p><p>5，vim /etc/profile  （编辑etc目录下的profile文件）</p><p>6，在上述文件中最上面添加：</p><pre><code>    export JAVA_HOME=/usr/local/jdkexport CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jarexport PATH=$JAVA_HOME/bin:$PATHpathmunge () {  直接在pathmunge上面添加三句export就行</code></pre></li></ol><p>​    7，使用 java -version 查看jdk的版本  出现以下信息说明搞定：</p><p>​            openjdk version “1.8.0_65”<br>            OpenJDK Runtime Environment (build 1.8.0_65-b17)<br>            OpenJDK 64-Bit Server VM (build 25.65-b01, mixed mode)             </p><h3 id="3-2安装Jenkins"><a href="#3-2安装Jenkins" class="headerlink" title="3.2安装Jenkins"></a>3.2安装Jenkins</h3><p>1，首先需要jdk我们已经安装好了</p><p>2，使用yum的方式安装jenkins</p><p>​    sudo wget -O /etc/yum.repos.d/jenkins.repo <a href="http://pkg.jenkins-ci.org/redhat/jenkins.repo" target="_blank" rel="noopener">http://pkg.jenkins-ci.org/redhat/jenkins.repo</a></p><p>​    sudo rpm –import <a href="https://jenkins-ci.org/redhat/jenkins-ci.org.key" target="_blank" rel="noopener">https://jenkins-ci.org/redhat/jenkins-ci.org.key</a></p><p>​    sudo yum install jenkins</p><p>3，接下来配置jenkins端口</p><p>​    vi /etc/sysconfig/jenkins</p><p>​    查找/JENKINS_PORT，修改JENKINS_PORT=”8080”，默认为“8080”，我修改为了8088</p><p>4，启动Jenkins：</p><p>​    service jenkins restart </p><p>5，在浏览器输入  ： <a href="http://192.168.10.138:8088" target="_blank" rel="noopener">http://192.168.10.138:8088</a>    (ip地址填自己主机的ip)</p><p>6，发现不能访问，需要关闭主机的 防火墙功能。linux默认使用的firewall我们替换成为iptables</p><h4 id="7，替换防火墙为iptables："><a href="#7，替换防火墙为iptables：" class="headerlink" title="7，替换防火墙为iptables："></a>7，替换防火墙为iptables：</h4><p>​    0，安装iptables：</p><p>​         yum install iptables-services</p><p>​    1，停止firewall： </p><p>​         systemctl stop firewalld       </p><p>​         systemctl  mask firewalld</p><p>​         或者：systemctl stop firewalld.service &amp;&amp; systemctl disable firewalld.service 关闭服务并且禁止开机自启动</p><p>​    2，开放443端口：</p><p>​         iptables -A INPUT -p tcp –dport 443 -j ACCEPT </p><pre><code>3，保存上述规则：</code></pre><p>​         service iptables save</p><p>​     4，开启服务</p><p>​         systemctl restart iptables.service</p><p>​     5，编辑防火墙文件</p><p>​        vi /etc/sysconfig/iptables  </p><p>​            添加80和3306端口 等等（自己配置）：</p><p>​            -A INPUT -m state –state NEW -m tcp -p tcp –dport 80 -j ACCEPT        　　 #80端口开放</p><p>​            -A INPUT -m state –state NEW -m tcp -p tcp –dport 3306 -j ACCEPT　　　 #3306端口开放</p><p>​            -I INPUT -s 113.106.93.110 -p tcp –dport 8089 -j DROP                      　　　#禁止指定IP访问 8089</p><p>​            -I INPUT -s 113.106.93.110 -p tcp –dport 8080 -j ACCEPT                 　　　#开放固定ipIP访问 8080</p><p>​    6，重启防火墙使配置文件生效</p><p>​         systemctl restart iptables.service </p><p>​     7，设置iptables防火墙为开机自动启动：</p><p>​         systemctl enable iptables.service </p><p>​          8，关闭SELINUX：</p><p>​             vi /etc/selinux/config  　</p><p>​             注释以下配置  　</p><p>​                SELINUX=enforcing  　</p><p>​                SELINUXTYPE=targeted  　  　</p><p>​             增加以下配置  　</p><p>​                SELINUX=disabled  　  　</p><p>​            使配置立即生效  　</p><p>​                setenforce 0 </p><p>​        9，上面工作完成，直接访问，会出现一个登陆的界面，需要密码。只需要将他提示的文件下的密码复制过来</p><p>​                cat /var/lib/jenkins/secrets/initialAdminPassword</p><p>​        10，到此jenkins安装就完成了</p><h3 id="3-3安装tomcat"><a href="#3-3安装tomcat" class="headerlink" title="3,3安装tomcat"></a>3,3安装tomcat</h3><p>1，使用sftp服务将tomcat的压缩包上传到linux</p><p>2，解压，然后进入bin目录执行 startup.sh</p><p>3,  浏览器访问  8080 端口</p><h3 id="3-4安装maven"><a href="#3-4安装maven" class="headerlink" title="3.4安装maven"></a>3.4安装maven</h3><p>1，使用sftp服务将maven的包上传到linux上面</p><p>2，tar -zxf apache-maven-3.5.0-bin.tar.gz -C /usr/local   （解压安装包到usrl/local目录下）</p><p>3，ln -s /usr/local/apache-maven-3.5.0/ /usr/local/maven    （建立软连接方便后续操作）</p><p>4，编辑etc目录下的profile文件：vim /etc/profile </p><p>5，source /etc/profile     (使配置文件生效)</p><p>6，验证  ：   mvn  -v   </p><p>出现下面内容说明成功：</p><p>Apache Maven 3.5.0 (ff8f5e7444045639af65f6095c62210b5713f426; 2017-04-03T12:39:06-07:00)<br>Maven home: /usr/local/maven<br>Java version: 1.8.0_121, vendor: Oracle Corporation<br>Java home: /usr/local/jdk1.8.0_121/jre<br>Default locale: en_US, platform encoding: UTF-8<br>OS name: “linux”, version: “3.10.0-327.el7.x86_64”, arch: “amd64”, family: “unix”</p><h3 id="3-5安装svn服务"><a href="#3-5安装svn服务" class="headerlink" title="3.5安装svn服务"></a>3.5安装svn服务</h3><p>1，yum -y install subversion      （yum方式安装subversion）</p><p>2，如果需要查看安装位置：  rpm -ql subversion</p><p>3，在根目录下的var目录创建版本库目录：  cd /var                mkdir  svn          cd  svn           mkdir  svnrepos</p><p>4，创建版本库：svnadmin create /var/svn/svnrepos/xxxxxx   (xxxxx是自己起的项目名)</p><p>5，配置修改：进入conf文件夹看到三个文件</p><p>​      authz：负责账号权限的管理，控制账号是否读写权限</p><p>​      passwd：负责账号和密码的用户名单管理</p><p>​          svnserve.conf：svn服务器配置文件</p><p>​    1，vi authz–&gt;在文件的末尾添加   [/]   账号名称1=rw   账号名称2=rw</p><p>​    2，vipasswd–&gt;账号密码文件无需做修改，也是直接将账号和密码信息追加到文件中即可，注意格式为：</p><p>​          账号 = 密码 比如：admin=123123</p><p>​    3，vi svnserve.conf –》将文件里的这些注释去掉：</p><p>​        anon-access = read</p><p>​        auth-access=write</p><p>​        authz-db = authz</p><p>​        realm = My First Repository</p><p>6,启动svn服务： svnserve -d -r /var/svn/svnrepos </p><p>7，在eclipse的svn资源研究库创建一个新的资源位置，然后搞一个工程上传测试ok了。</p><h3 id="3-6至此所有的准备工作都已经做完了，我们可以去进行实际操作了！！！"><a href="#3-6至此所有的准备工作都已经做完了，我们可以去进行实际操作了！！！" class="headerlink" title="3.6至此所有的准备工作都已经做完了，我们可以去进行实际操作了！！！"></a>3.6至此所有的准备工作都已经做完了，我们可以去进行实际操作了！！！</h3><h2 id="四，搭建自动化部署环境"><a href="#四，搭建自动化部署环境" class="headerlink" title="四，搭建自动化部署环境"></a>四，搭建自动化部署环境</h2><p>1，首先需要配置jenkins：</p><p>​    系统管理 ——&gt;全局工具配置——-&gt;:::::</p><p>​    1,Maven的settings.xml配置：</p><p>​        选择文件系统中的setting文件这个选项。linux命令echo $MAVEN_HOME查看settings文件目录</p><p>​    2，JDK配置</p><p>​        新增jdk，取消自动安装，nux命令echo $java_HOME查看jdk文件目录</p><p>​        3，Maven配置</p><p>​        新增maven，取消自动安装，nux命令echo $MAVEN_HOME查看maven路径</p><hr><p>​      系统管理———–&gt;插件管理—————–&gt;::::::</p><p>​       1，安装<a href="https://plugins.jenkins.io/maven-plugin" target="_blank" rel="noopener">Maven Integration</a>插件</p><p>​        2，安装<a href="https://plugins.jenkins.io/deploy" target="_blank" rel="noopener">Deploy to container</a>插件</p><p>2，配置tomcat目录下的conf中的toncat_user文件添加如下内容</p><p> ==<role rolename="manager-gui">==<br>  ==<role rolename="manager-script">==<br>  ==<role rolename="manager-jmx">==<br>  ==<role rolename="status">==<br>  ==<user username="tomcat_user" password="123123" roles="manager-gui,manager-script,manager-jmx,manager-status">==</user></role></role></role></role></p><p>3，创建构建任务：</p><p>​        命名项目名称：然后选择创建一个自由风格的项目</p><p>​        进入配置</p><p>​        ==配置源码管理：==</p><p><img src="/2018/12/25/Jenkins-SVN-Maven自动化部署/D:/blog\source\_posts\Jenkins-SVN-Maven自动化部署\1.png" alt="1545729838233">    </p><p>上面的wenxin用户名密码就是在Jenkins文件中配置的允许访问的用户名和密码</p><p>​    ==配置构建操作：==</p><p><img src="/2018/12/25/Jenkins-SVN-Maven自动化部署/D:/blog\source\_posts\Jenkins-SVN-Maven自动化部署\2png" alt="1545729887708"></p><p>​    ==配置构建后操作：==</p><p><img src="/2018/12/25/Jenkins-SVN-Maven自动化部署/D:/blog\source\_posts\Jenkins-SVN-Maven自动化部署\3.png" alt="1545729918287"></p><p>上面的tomcat_user就是上面再tmocat_user文件中配置的用户名和密码</p><p>​    ==配置钩子函数（触发器）：==只要代码提交直接出发钩子函数，去构建。</p><p><img src="/2018/12/25/Jenkins-SVN-Maven自动化部署/D:/blog\source\_posts\Jenkins-SVN-Maven自动化部署\4.png" alt="1545730125611"></p><p>​    在jenkins版本库中，进入hooks文件：拷贝post-commit.tmpl文件并且命名为 post-commit</p><p>​        cp post-commit.tmpl post-commit</p><p>​    编辑这个文件将里面的注释然后添加curl指令：</p><p>​        vim post-commit</p><p>​        curl -X post -v -u admin:ba3cc30fc70f4345b92ff5d7aaff8113<br>        <a href="http://192.168.10.138:8088/job/devops/build?token=DEV_TOKEN" target="_blank" rel="noopener">http://192.168.10.138:8088/job/devops/build?token=DEV_TOKEN</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Jenkins-SVN-Maven自动化部署&quot;&gt;&lt;a href=&quot;#Jenkins-SVN-Maven自动化部署&quot; class=&quot;headerlink&quot; title=&quot;Jenkins+SVN+Maven自动化部署&quot;&gt;&lt;/a&gt;Jenkins+SVN+Maven自动化
      
    
    </summary>
    
      <category term="自动化部署" scheme="https://jackLovewx.github.io/categories/%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/"/>
    
      <category term="持续集成" scheme="https://jackLovewx.github.io/categories/%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"/>
    
    
      <category term="Jenkins" scheme="https://jackLovewx.github.io/tags/Jenkins/"/>
    
      <category term="Svn" scheme="https://jackLovewx.github.io/tags/Svn/"/>
    
      <category term="Maven" scheme="https://jackLovewx.github.io/tags/Maven/"/>
    
      <category term="Linux" scheme="https://jackLovewx.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Vue02_组件化编程</title>
    <link href="https://jackLovewx.github.io/2018/12/14/Vue0202-%E7%BB%84%E4%BB%B6%E5%8C%96%E7%BC%96%E7%A8%8B/"/>
    <id>https://jackLovewx.github.io/2018/12/14/Vue0202-组件化编程/</id>
    <published>2018-12-14T00:41:51.000Z</published>
    <updated>2019-02-25T06:49:19.877Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Vue02-组件化编程"><a href="#Vue02-组件化编程" class="headerlink" title="Vue02_组件化编程"></a>Vue02_组件化编程</h2><h3 id="1，使用vue-cli创建模板项目"><a href="#1，使用vue-cli创建模板项目" class="headerlink" title="1，使用vue-cli创建模板项目"></a>1，使用vue-cli创建模板项目</h3><p>1）：vue是vue官方提供的脚手架工具</p><p>2）：github:<a href="https://github.com/vue/js/vue-cli" target="_blank" rel="noopener">https://github.com/vue/js/vue-cli</a></p><p>3）：作用：从 <a href="https://github.com/vuejs-templates" target="_blank" rel="noopener">https://github.com/vuejs-templates</a> 下载模板项目</p><h3 id="2，创建vue项目"><a href="#2，创建vue项目" class="headerlink" title="2，创建vue项目"></a>2，创建vue项目</h3><p>1）npm install -g  vue-cli</p><p>2）vue init webpack vue_demo</p><p>3）cd vue_demo</p><p>4）npm install</p><p>5）npm run dev</p><p>6）访问：<a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a></p><h3 id="3，模板项目结构"><a href="#3，模板项目结构" class="headerlink" title="3，模板项目结构"></a>3，模板项目结构</h3><p>|– build : webpack 相关的配置文件夹(基本不需要修改)<br>|– dev-server.js : 通过 express 启动后台服务器<br>|– config: webpack 相关的配置文件夹(基本不需要修改)<br>|– index.js: 指定的后台服务的端口号和静态资源文件夹<br>|– node_modules<br>|– src : 源码文件夹<br>|– components: vue 组件及其相关资源文件夹<br>|– App.vue: 应用根主组件<br>|– main.js: 应用入口 js<br>|– static: 静态资源文件夹<br>|– .babelrc: babel 的配置文件<br>|– .eslintignore: eslint 检查忽略的配置<br>|– .eslintrc.js: eslint 检查的配置<br>|– .gitignore: git 版本管制忽略的配置<br>|– index.html: 主页面文件<br>|– package.json: 应用包配置文件<br>|– README.md: 应用描述说明的 readme 文件</p><h3 id="4，示例代码："><a href="#4，示例代码：" class="headerlink" title="4，示例代码："></a>4，示例代码：</h3><p>1）：HelloWorld.vue</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;demo&quot; class=&quot;element2&quot;&gt;</span><br><span class="line">      &lt;p&gt;&#123;&#123;msg&#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      msg: &apos;Hello Vue Components&apos;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">  .element2 &#123;</span><br><span class="line">    color: red;</span><br><span class="line">    font-size: 30px;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>2）：App.vue:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;&quot; class=&quot;element2&quot;&gt;</span><br><span class="line">    &lt;img src=&quot;./assets/logo.png&quot; alt=&quot;&quot;&gt;</span><br><span class="line">    &lt;HelloWorld/&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import HelloWorld from &apos;./components/HelloWorld.vue&apos;</span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    HelloWorld</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">  .element2 &#123;</span><br><span class="line">    width: 400px;</span><br><span class="line">    height: 400px;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>3）：main.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &apos;vue&apos;</span><br><span class="line">import App from &apos;./App.vue&apos;</span><br><span class="line">/* eslint-disable no-new */</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &apos;#app&apos;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    App</span><br><span class="line">  &#125;,</span><br><span class="line">  template: &apos;&lt;App/&gt;&apos;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="5，效果图："><a href="#5，效果图：" class="headerlink" title="5，效果图："></a>5，效果图：</h3><h3 id="6，项目的打包与发布"><a href="#6，项目的打包与发布" class="headerlink" title="6，项目的打包与发布"></a>6，项目的打包与发布</h3><p>1）打包：    npm run build</p><p>2）使用静态服务器发布</p><p>​        npm install -g serve</p><p>​        serve dist</p><p>​        访问：<a href="http://localhost:5000" target="_blank" rel="noopener">http://localhost:5000</a></p><p>3）使用tomcat服务器发布</p><p>​        修改：webpack.prod.conf.js</p><p>​            output: </p><p>​                publicPath: ‘/xxxxx/‘</p><p>​            </p><p>​        重新打包：</p><p>​            npm run build </p><p>​        修改dist文件夹为项目名称：xxxx</p><p>​        将xxxx拷贝到tomcat的webapps目录下</p><p>​        访问：<a href="http://localhost:8080/xxxx" target="_blank" rel="noopener">http://localhost:8080/xxxx</a></p><h3 id="7，eslint"><a href="#7，eslint" class="headerlink" title="7，eslint"></a>7，eslint</h3><p>1）说明</p><p>​    eslint是一个代码规范检查工具</p><p>​    它定义了许多规则，一旦违背就会出现相应的提示</p><p>​    基本已经代替了之前的JSling</p><p>3）提供的校验</p><p>​         1）语法错误校验<br>    2) 不重要或丢失的标点符号，如分号<br>    3) 没法运行到的代码块（使用过 WebStorm 的童鞋应该了解）<br>    4) 未被使用的参数提醒<br>    5) 确保样式的统一规则，如 sass 或者 less<br>    6) 检查变量的命名</p><p>4）规则的错误等级</p><p>​    1) 0：关闭规则。<br>    2) 1：打开规则，并且作为一个警告（信息打印黄色字体）<br>    3) 2：打开规则，并且作为一个错误（信息打印红色字体）</p><p>5）相关配置文件</p><p>​    1) .eslintrc.js : 全局规则配置文件<br>            ‘rules’:<br>                ‘no-new’: 1</p><p>​    2) 在 js/vue 文件中修改局部规则<br>        /<em> eslint-disable no-new </em>/<br>        new Vue(<br>            el: ‘body’, components: { App }<br>        )<br>    3) .eslintignore: 指令检查忽略的文件<br>        <em>.js </em>.vue</p><h3 id="8，组件的定义与使用"><a href="#8，组件的定义与使用" class="headerlink" title="8，组件的定义与使用"></a>8，组件的定义与使用</h3><p>1）Vue文件的组成    分为三个部分</p><p>​    模板页面：</p><p>​        <template></template></p><p>​            页面模板</p><p>​        </p><p>​    JS模块对象：</p><p>​        `<script><br>            export default {</p><p>​                data() {return {}}, </p><p>​                methods: {}, </p><p>​                computed: {}, </p><p>​                components: {}<br>            }<br>        </script>`</p><p>​    样式：</p><p>​        <style></p><p>​            样式定义</p><p>​        </style></p><p>2）基本使用</p><p>​     ==引入组件==</p><p>​    ==映射成标签==</p><p>​    ==使用标签组件==</p><p>​    示例代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;&quot; class=&quot;element2&quot;&gt;</span><br><span class="line">    &lt;img src=&quot;./assets/logo.png&quot; alt=&quot;&quot;&gt;</span><br><span class="line">    &lt;HelloWorld/&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import HelloWorld from &apos;./components/HelloWorld.vue&apos;</span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    HelloWorld</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">  .element2 &#123;</span><br><span class="line">    width: 400px;</span><br><span class="line">    height: 400px;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>3）标签名与标签属性名书写问题</p><p>​    写法一：一模一样</p><p>​    写法二：大写变小写中间使用 - 连接</p><h3 id="9，组件之间的通信"><a href="#9，组件之间的通信" class="headerlink" title="9，组件之间的通信"></a>9，组件之间的通信</h3><h4 id="A）props："><a href="#A）props：" class="headerlink" title="A）props："></a>A）props：</h4><p>​        1）在组件内声明所有的 props<br>        2）方式一: 只指定名称<br>        props: [‘name’, ‘age’, ‘setName’]<br>        3）方式二: 指定名称和类型<br>        <code>props: {</code><br>            name: String,</p><p><code>age: Number,</code></p><p><code>​             setNmae: Function</code><br>        <code>}</code></p><p>​        4） 方式三: 指定名称/类型/必要性/默认值<br>        <code>props: {</code><br>            name: {</p><p>​                type: String, </p><p><code>​                required: true,</code></p><p><code>​                 default:xxx},</code></p><p><code>}</code></p><p>​         5）注意：</p><p>​        1) 此方式用于父组件向子组件传递数据<br>        2) 所有标签属性都会成为组件对象的属性, 模板页面可以直接引用<br>        3) 问题:<br>            a. 如果需要向非子后代传递数据必须多层逐层传递<br>            b. 兄弟组件间也不能直接 props 通信, 必须借助父组件才可以</p><p>​        </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Vue02-组件化编程&quot;&gt;&lt;a href=&quot;#Vue02-组件化编程&quot; class=&quot;headerlink&quot; title=&quot;Vue02_组件化编程&quot;&gt;&lt;/a&gt;Vue02_组件化编程&lt;/h2&gt;&lt;h3 id=&quot;1，使用vue-cli创建模板项目&quot;&gt;&lt;a href=&quot;#
      
    
    </summary>
    
      <category term="vue学习" scheme="https://jackLovewx.github.io/categories/vue%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="vue" scheme="https://jackLovewx.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue01_核心</title>
    <link href="https://jackLovewx.github.io/2018/12/05/Vue01-%E6%A0%B8%E5%BF%83/"/>
    <id>https://jackLovewx.github.io/2018/12/05/Vue01-核心/</id>
    <published>2018-12-05T06:10:32.000Z</published>
    <updated>2019-02-25T06:49:07.746Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Vue01-核心"><a href="#Vue01-核心" class="headerlink" title="Vue01_核心"></a><code>Vue01_核心</code></h2><h3 id="1，Vue的基本认识："><a href="#1，Vue的基本认识：" class="headerlink" title="1，Vue的基本认识："></a><code>1，Vue的基本认识：</code></h3><p><code>1）一位华裔前Google工程师(尤雨溪)开发的前端js库</code></p><p><code>2）作用: 动态构建用户界面</code></p><p><code>3）特点：</code></p><p><code>​    *遵循MVVM模式</code></p><p><code>​    *编码简洁, 体积小, 运行效率高, 移动/PC端开发</code></p><p><code>​    *它本身只关注UI, 可以轻松引入vue插件和其它第三库开发项目</code></p><p><code>4）与其他前端JS框架的关联</code></p><p><code>​    *借鉴angular的模板和数据绑定技术</code></p><p><code>​    *借鉴react的组件化和虚拟DOM技术</code></p><p><code>5） vue包含一系列的扩展插件(库):</code></p><pre><code>* vue-cli: vue脚手架* vue-resource(axios): ajax请求* vue-router: 路由* vuex: 状态管理* vue-lazyload: 图片懒加载* vue-scroller: 页面滑动相关* mint-ui: 基于vue的组件库(移动端)* element-ui: 基于vue的组件库(PC端)</code></pre><h3 id="2，Vue的基本使用"><a href="#2，Vue的基本使用" class="headerlink" title="2，Vue的基本使用"></a><code>2，Vue的基本使用</code></h3><p><code>1）效果：一个输入框，里面输入数据，下面显示相应的数据。</code></p><p><code>2）步骤：</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">1,引入vue.js</span></span><br><span class="line"><span class="comment">2,创建Vue实例，</span></span><br><span class="line"><span class="comment">      指定 el 选择器</span></span><br><span class="line"><span class="comment">           data</span></span><br><span class="line"><span class="comment">3，双向数据绑定： v-model</span></span><br><span class="line"><span class="comment">4，显示数据： &#123;&#123;username&#125;&#125;</span></span><br><span class="line"><span class="comment">5，理解 MVVM</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><p><code>3）代码：</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"mustang"</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"username"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;username&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    const vm = new Vue(&#123;</span></span><br><span class="line"><span class="undefined">        el: '#mustang',</span></span><br><span class="line"><span class="undefined">        data: &#123;</span></span><br><span class="line"><span class="undefined">            username: 'mustang'</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3，理解MVVM："><a href="#3，理解MVVM：" class="headerlink" title="3，理解MVVM："></a><code>3，理解MVVM：</code></h3><h3 id="4，模板语法"><a href="#4，模板语法" class="headerlink" title="4，模板语法"></a><code>4，模板语法</code></h3><p><code>1）模板的理解：</code></p><p><code>​        动态的html页面</code></p><p><code>包含了一些Js语法代码：双大括号表达式和v-开头的指令</code></p><p><code>2）双大括号表达式：</code></p><p>`        语法： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;XXXXX&#125;&#125;`</span><br></pre></td></tr></table></figure><p><code>​        功能：向页面输出数据</code></p><p><code>​        可以调用对象的方法</code></p><p><code>3）指令一：强制数据绑定</code></p><p><code>​        功能：指定变化的属性值</code></p><p><code>​        完整写法： v-bind:xxx=&#39;yyy&#39;</code></p><p><code>​        简洁语法： ：xxx=‘yyy’</code></p><p><code>4）指令二：绑定事件监听</code></p><p>​        完整写法：v-on:keyup=’xxx’       v-on:keyup=’xxx(参数)’     </p><p><code>​        简洁语法：@keyup=‘xxx’            @keyup.enter=&#39;xxx&#39;</code></p><p><code>5）示例代码：</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--双大括号表达式的用法--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>双大括号表达式的用法<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;username&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;username.toUpperCase()&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--强制数据绑定的用法--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>强制数据绑定的用法:将一个文本理解为一个表达式<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"imgUrl"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--强制数据帮顶顶的用法--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>强制数据绑定的用法:绑定监听<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"hello"</span>&gt;</span>点击弹出<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"test('带参数的 Mustang')"</span>&gt;</span>点击弹出<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    const vm = new Vue(&#123;</span></span><br><span class="line"><span class="undefined">        el: '#app',</span></span><br><span class="line"><span class="undefined">        data: &#123;</span></span><br><span class="line"><span class="undefined">            username: 'Mustang',</span></span><br><span class="line"><span class="undefined">            imgUrl: 'http://img1.imgtn.bdimg.com/it/u=4016276316,619558019&amp;fm=26&amp;gp=0.jpg'</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        methods: &#123;</span></span><br><span class="line"><span class="undefined">            hello()&#123;</span></span><br><span class="line"><span class="undefined">                alert('Hello Mustang')</span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="undefined">            test(content)&#123;</span></span><br><span class="line"><span class="undefined">                alert(content)</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5，计算属性和监视"><a href="#5，计算属性和监视" class="headerlink" title="5，计算属性和监视"></a><code>5，计算属性和监视</code></h3><p><code>1）计算属性：</code></p><p><code>在computed属性对象中定义计算属性的方法</code></p><p>​        </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在页面中使用 `&#123;&#123;方法名&#125;&#125;`来显示计算的结果</span><br></pre></td></tr></table></figure><p><code>2）    监视属性：</code></p><p><code>​        通过vm对象的$watch()或者watch配置来监视指定的属性</code></p><p><code>​        当属性变化时，回调函数会自动调用，在函数内部进行计算</code></p><p><code>3）计算属性高级：</code></p><p><code>通过getter/setter实现对属性数据的监视和显示</code></p><p><code>​        计算属性存在缓存，多次读取只进行一次getter计算</code></p><p><code>4）示例代码：</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"demo"</span>&gt;</span></span><br><span class="line">    姓: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"First Name"</span> <span class="attr">v-model</span>=<span class="string">"firstName"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    名: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"Last Name"</span> <span class="attr">v-model</span>=<span class="string">"lastName"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--fullName1是根据fistName和lastName计算产生--&gt;</span></span><br><span class="line">    姓名1(单向): <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"Full Name1"</span> <span class="attr">v-model</span>=<span class="string">"fullName1"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    姓名2(单向): <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"Full Name2"</span> <span class="attr">v-model</span>=<span class="string">"fullName2"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    姓名3(双向): <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"Full Name3"</span> <span class="attr">v-model</span>=<span class="string">"fullName3"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    const vm = new Vue(&#123;</span></span><br><span class="line"><span class="undefined">        el: '#demo',</span></span><br><span class="line"><span class="undefined">        data: &#123;</span></span><br><span class="line"><span class="undefined">          firstName: 'wx',</span></span><br><span class="line"><span class="undefined">            lastName: 'lt',</span></span><br><span class="line"><span class="undefined">          fullName2: ''</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        computed: &#123;</span></span><br><span class="line"><span class="undefined">            fullName1()&#123;</span></span><br><span class="line"><span class="undefined">                return this.firstName+ '--'+this.lastName</span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="undefined">            fullName3: &#123;</span></span><br><span class="line"><span class="undefined">                //// 当获取当前属性值时自动调用, 将返回值(根据相关的其它属性数据)作为属性值</span></span><br><span class="line"><span class="undefined">                get()&#123;</span></span><br><span class="line"><span class="undefined">                    return this.firstName+ " " + this.lastName</span></span><br><span class="line"><span class="undefined">                &#125;,</span></span><br><span class="line"><span class="undefined">                // 当属性值发生了改变时自动调用, 监视当前属性值变化, 同步更新相关的其它属性值</span></span><br><span class="line"><span class="undefined">                set(value)&#123;</span></span><br><span class="line"><span class="undefined">                    const names = value.split(' ')</span></span><br><span class="line"><span class="undefined">                    this.firstName = names[0]</span></span><br><span class="line"><span class="undefined">                    this.lastName = names[1]</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        watch: &#123;</span></span><br><span class="line"><span class="undefined">            firstName: function (value) &#123;</span></span><br><span class="line"><span class="undefined">                this.fullName2 = value + '-'+this.lastName</span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="undefined">            lastName: function (value) &#123;</span></span><br><span class="line"><span class="undefined">                this.fullName2 = this.firstName + '-'+value</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6，class绑定和style绑定"><a href="#6，class绑定和style绑定" class="headerlink" title="6，class绑定和style绑定"></a><code>6，class绑定和style绑定</code></h3><p><code>1）理解：</code></p><p><code>​        在应用界面中，某些元素的样式是变化的</code></p><p><code>​        class绑定和style绑定就是实现动态样式的技术</code></p><p><code>2）class绑定：</code></p><p><code>​        ：class=“xxx”</code></p><p><code>​        表达式是字符串：‘aClass’</code></p><p>`        </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">表达式是对象： &#123;aClass：isA，bClass: isB&#125;`</span><br></pre></td></tr></table></figure><p><code>3）style绑定：</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">`：style=“&#123;color: activeColor, fontSize: fontSize&#125;”`</span><br><span class="line"></span><br><span class="line">`activeColor和fontSize是data里面的属性`</span><br></pre></td></tr></table></figure><p><code>4）示例代码：</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>class,style绑定<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        .aClass &#123;</span></span><br><span class="line"><span class="undefined">            color: red;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        .bClass &#123;</span></span><br><span class="line"><span class="undefined">            color: blue;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        .cClass &#123;</span></span><br><span class="line"><span class="undefined">            font-size: 30px;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"demo"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>class绑定：<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">p</span> <span class="attr">:class</span>=<span class="string">"aClass"</span> <span class="attr">class</span>=<span class="string">"cClass"</span>&gt;</span>xxx是字符串<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">p</span> <span class="attr">:class</span>=<span class="string">"&#123;aClass: isAClass, bClass: isBClass&#125;"</span>&gt;</span>xxx是对象<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>style绑定：<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">:style</span>=<span class="string">"&#123;color: activeColor, &#125;"</span>&gt;</span>显示style绑定的效果啦<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"update"</span>&gt;</span>更新<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    const vm = new Vue(&#123;</span></span><br><span class="line"><span class="undefined">        el: '#demo',</span></span><br><span class="line"><span class="undefined">        data: &#123;</span></span><br><span class="line"><span class="undefined">            aClass: 'aClass',</span></span><br><span class="line"><span class="undefined">            isAClass: true,</span></span><br><span class="line"><span class="undefined">            isBClass: false,</span></span><br><span class="line"><span class="undefined">            activeColor: 'red',</span></span><br><span class="line"><span class="undefined">            size: '30px'</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        methods: &#123;</span></span><br><span class="line"><span class="undefined">            update()&#123;</span></span><br><span class="line"><span class="undefined">                this.aClass = 'bClass'</span></span><br><span class="line"><span class="undefined">                this.isAClass = false</span></span><br><span class="line"><span class="undefined">                this.isBClass = true</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="7，条件渲染指令"><a href="#7，条件渲染指令" class="headerlink" title="7，条件渲染指令"></a><code>7，条件渲染指令</code></h3><p><code>1）v-if与v-else</code></p><p><code>2）v-show</code></p><p><code>3）示例代码：</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"demo"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">"ok"</span>&gt;</span>失败<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else</span>&gt;</span>成功<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-show</span>=<span class="string">"!ok"</span>&gt;</span>哈哈成功<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-show</span>=<span class="string">"ok"</span>&gt;</span>呜呜失败<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"ok=!ok"</span>&gt;</span>切换<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    const vm = new Vue(&#123;</span></span><br><span class="line"><span class="undefined">        el: '#demo',</span></span><br><span class="line"><span class="undefined">        data: &#123;</span></span><br><span class="line"><span class="undefined">            ok: false,</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="8，列表渲染："><a href="#8，列表渲染：" class="headerlink" title="8，列表渲染："></a><code>8，列表渲染：</code></h3><p><code>1) 列表显示指令</code><br>    数组: v-for / index<br>    对象: v-for / key<br><code>2) 列表的更新显示</code><br>    删除 item<br>    替换 item<br><code>3) 列表的高级处理</code><br>    列表过滤<br>    列表排序</p><p><code>4）示例代码：</code></p><p><code>使用v-for遍历数组和对象</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"demo"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--v-for遍历数组--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(person,index) in persons"</span> <span class="attr">:key</span>=<span class="string">"index"</span>&gt;</span></span><br><span class="line">            &#123;&#123;index&#125;&#125;---&#123;&#123;person.name&#125;&#125;---&#123;&#123;person.age&#125;&#125;</span><br><span class="line">            ---<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"deletePerson(index)"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            ---<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"updatePerson(index,&#123;name:'love',age:99&#125;)"</span>&gt;</span>更新<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--v-for遍历对象，不怎么常用--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(value,key) in persons[1]"</span>&gt;</span>&#123;&#123;key&#125;&#125;---&#123;&#123;value&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--添加person--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"addPerson(&#123;name:'zhangsan',age:66&#125;)"</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    const vm = new Vue(&#123;</span></span><br><span class="line"><span class="undefined">        el: '#demo',</span></span><br><span class="line"><span class="undefined">        data: &#123;</span></span><br><span class="line"><span class="undefined">            persons: [</span></span><br><span class="line"><span class="undefined">                &#123;name:'wx',age:22&#125;,</span></span><br><span class="line"><span class="undefined">                &#123;name:'lt',age:23&#125;,</span></span><br><span class="line"><span class="undefined">                &#123;name:'jack',age:25&#125;,</span></span><br><span class="line"><span class="undefined">                &#123;name:'rose',age:24&#125;</span></span><br><span class="line"><span class="undefined">            ]</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        methods: &#123;</span></span><br><span class="line"><span class="undefined">            deletePerson(index) &#123;</span></span><br><span class="line"><span class="undefined">                this.persons.splice(index,1)</span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="undefined">            updatePerson(index,newPerson)&#123;</span></span><br><span class="line"><span class="undefined">                this.persons.splice(index,1,newPerson)</span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="undefined">            addPerson(addPerson)&#123;</span></span><br><span class="line"><span class="undefined">                this.persons.push(addPerson)</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>列表的过滤和排序功能：</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"demo"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"searchName"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(p, index) in filterPersons"</span> <span class="attr">:key</span>=<span class="string">"index"</span>&gt;</span></span><br><span class="line">            &#123;&#123;index&#125;&#125;---&#123;&#123;p.name&#125;&#125;---&#123;&#123;p.age&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"setOrderType(2)"</span>&gt;</span>年龄升序<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"setOrderType(1)"</span>&gt;</span>年龄降序<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"setOrderType(0)"</span>&gt;</span>原本顺序<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    const vm = new Vue(&#123;</span></span><br><span class="line"><span class="undefined">        el: '#demo',</span></span><br><span class="line"><span class="undefined">        data: &#123;</span></span><br><span class="line"><span class="undefined">            searchName: '',</span></span><br><span class="line"><span class="undefined">            orderType: '0',//0代表不排序，1代表升序，2代表降序</span></span><br><span class="line"><span class="undefined">            persons:[</span></span><br><span class="line"><span class="undefined">                &#123;name:'wx',age:22&#125;,</span></span><br><span class="line"><span class="undefined">                &#123;name:'lt',age:23&#125;,</span></span><br><span class="line"><span class="undefined">                &#123;name:'jack',age:24&#125;,</span></span><br><span class="line"><span class="undefined">                &#123;name:'rose',age:25&#125;</span></span><br><span class="line"><span class="undefined">            ]</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">    computed: &#123;</span></span><br><span class="line"><span class="undefined">      filterPersons()&#123;</span></span><br><span class="line"><span class="undefined">         const persons = this.persons</span></span><br><span class="line"><span class="undefined">         const searchName = this.searchName</span></span><br><span class="line"><span class="undefined">         const orderType = this.orderType</span></span><br><span class="line"><span class="undefined">         let filterPersons</span></span><br><span class="line"><span class="undefined">         filterPersons = persons.filter(person =&gt; person.name.indexOf(searchName)!==-1)</span></span><br><span class="line"><span class="undefined">         if(orderType !== 0)&#123;</span></span><br><span class="line"><span class="undefined">            filterPersons.sort(function (p1, p2) &#123;</span></span><br><span class="line"><span class="undefined">                if(orderType === 1)&#123;</span></span><br><span class="line"><span class="undefined">                    return p2.age - p1.age</span></span><br><span class="line"><span class="undefined">                &#125;else&#123;</span></span><br><span class="line"><span class="undefined">                    return p1.age - p2.age</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;)</span></span><br><span class="line"><span class="undefined">         &#125;</span></span><br><span class="line"><span class="undefined">         return filterPersons</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    methods: &#123;</span></span><br><span class="line"><span class="undefined">            setOrderType(orderType)&#123;</span></span><br><span class="line"><span class="undefined">                this.orderType = orderType</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="8，事件处理"><a href="#8，事件处理" class="headerlink" title="8，事件处理"></a><code>8，事件处理</code></h3><p><code>1）绑定监听</code></p><p><code>​        ：xxx=“fun”</code></p><p><code>​        @xxx=“fun”</code></p><p><code>​        @xxx=“fun(参数)”</code></p><p><code>​        默认事件形参：event</code></p><p><code>​        隐含属性对象：$event</code></p><p><code>2）事件修饰符：</code></p><p><code>​        .prevent:组织事件的默认行为  event.preventDefault()</code></p><p><code>​        .stop:停止事件冒泡   event.stopPropaggation()</code></p><p><code>3）按键修饰符：</code></p><p><code>​        .keycode:操作的是某个keycode的值得键</code></p><p><code>​        .keyName：操作的是某个按键名的键</code></p><p><code>4）示例代码：</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"demo"</span> <span class="attr">class</span>=<span class="string">"element2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>绑定监听<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"test1"</span>&gt;</span>test1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"test2('abc')"</span>&gt;</span>test2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"test3('abc',$event)"</span>&gt;</span>test3<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>事件修饰符<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.baidu.com"</span> @<span class="attr">click.prevent</span>=<span class="string">"test4"</span>&gt;</span>百度一下<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width: 200px;height: 200px;background: red"</span> @<span class="attr">click</span>=<span class="string">"test5"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width: 100px;height: 100px;background: blue"</span> @<span class="attr">click.stop</span>=<span class="string">"test6"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>按键修饰符<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> @<span class="attr">keyup.13</span>=<span class="string">"test7"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> @<span class="attr">keyup.enter</span>=<span class="string">"test7"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    const vm = new Vue(&#123;</span></span><br><span class="line"><span class="undefined">        el: '#demo',</span></span><br><span class="line"><span class="undefined">        data: &#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        methods: &#123;</span></span><br><span class="line"><span class="undefined">            test1(event)&#123;</span></span><br><span class="line"><span class="undefined">                alert(event.target.innerHTML)</span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="undefined">            test2(message)&#123;</span></span><br><span class="line"><span class="undefined">                alert(message)</span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="undefined">            test3(message,event)&#123;</span></span><br><span class="line"><span class="undefined">                alert(message + event.target.textContent)</span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="undefined">            test4 () &#123;</span></span><br><span class="line"><span class="undefined">                alert('点击了链接')</span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="undefined">            test5 () &#123;</span></span><br><span class="line"><span class="undefined">                alert('out')</span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="undefined">            test6 () &#123;</span></span><br><span class="line"><span class="undefined">                alert('inner')</span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="undefined">            test7 (event) &#123;</span></span><br><span class="line"><span class="undefined">                alert(event.target.value)</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="9，表单输入绑定"><a href="#9，表单输入绑定" class="headerlink" title="9，表单输入绑定"></a><code>9，表单输入绑定</code></h3><p><code>1）使用v-model对表单数据自动收集</code></p><p><code>​        text/textarea</code></p><p><code>​        checkbox</code></p><p><code>​        radio</code></p><p><code>​        select</code></p><p><code>2）示例代码：</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"demo"</span> <span class="attr">class</span>=<span class="string">"element2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/xxx"</span> @<span class="attr">submit.prevent</span>=<span class="string">"handleSubmit"</span>&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"username"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"password"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>性别: <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"male"</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">value</span>=<span class="string">"男"</span> <span class="attr">id</span>=<span class="string">"male"</span> <span class="attr">v-model</span>=<span class="string">"sex"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"female"</span>&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">value</span>=<span class="string">"女"</span> <span class="attr">id</span>=<span class="string">"female"</span> <span class="attr">v-model</span>=<span class="string">"sex"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>爱好<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"basket"</span> <span class="attr">value</span>=<span class="string">"basket"</span> <span class="attr">v-model</span>=<span class="string">"hobbys"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"basket"</span>&gt;</span>篮球<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"foot"</span> <span class="attr">value</span>=<span class="string">"foot"</span> <span class="attr">v-model</span>=<span class="string">"hobbys"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"foot"</span>&gt;</span>足球<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"pingpang"</span> <span class="attr">value</span>=<span class="string">"pingpang"</span> <span class="attr">v-model</span>=<span class="string">"hobbys"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"pingpang"</span>&gt;</span>乒乓<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>城市<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-modle</span>=<span class="string">"cityId"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>未选择<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">v-for</span>=<span class="string">"(city,index) in allCitys"</span> <span class="attr">:key</span>=<span class="string">"city.id"</span> <span class="attr">:value</span>=<span class="string">"city.id"</span>&gt;</span>&#123;&#123;city.name&#125;&#125;<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>介绍: <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">rows</span>=<span class="string">"10"</span> <span class="attr">v-model</span>=<span class="string">"info"</span> <span class="attr">v-model</span>=<span class="string">"content"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"注册"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    const vm = new Vue(&#123;</span></span><br><span class="line"><span class="undefined">        el: '#demo',</span></span><br><span class="line"><span class="undefined">        data: &#123;</span></span><br><span class="line"><span class="undefined">            username: '',</span></span><br><span class="line"><span class="undefined">            password: '',</span></span><br><span class="line"><span class="undefined">            content: 'hello word',</span></span><br><span class="line"><span class="undefined">            sex: '男',</span></span><br><span class="line"><span class="undefined">            hobbys: ['basket'],</span></span><br><span class="line"><span class="undefined">            allCitys: [</span></span><br><span class="line"><span class="undefined">                &#123;id: 1, name: '北京'&#125;,</span></span><br><span class="line"><span class="undefined">                &#123;id: 2, name: '内蒙古'&#125;,</span></span><br><span class="line"><span class="undefined">                &#123;id: 3, name: '黑龙江'&#125;,</span></span><br><span class="line"><span class="undefined">            ],</span></span><br><span class="line"><span class="undefined">            cityId: 2,</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        methods: &#123;</span></span><br><span class="line"><span class="undefined">            handleSubmit () &#123;</span></span><br><span class="line"><span class="undefined">                alert('提交注册的ajax请求')</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="10，Vue实例生命周期"><a href="#10，Vue实例生命周期" class="headerlink" title="10，Vue实例生命周期"></a><code>10，Vue实例生命周期</code></h3><p><code>1）流程图：</code></p><p><code>2）Vue生命周期分析：</code></p><p><code>初始化显示：</code></p><p><code>​    beforeCreate（）     created()      beforeMount    mounted()</code></p><p><code>更新状态：</code></p><p><code>​    beforeUpdate()      updated()</code></p><p><code>销毁Vue实例：</code></p><p><code>​    beforeDestory         destoryed</code></p><p><code>3）常用的生命周期方法</code></p><p><code>​    created和mounted：发送ajax请求，启动定时器等异步任务</code></p><p><code>​    beforeDestoryed:收尾工作，比如清除定时器</code></p><p><code>4）示例代码：</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"demo"</span> <span class="attr">class</span>=<span class="string">"element2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"destroyVue"</span>&gt;</span>destory vue<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-show</span>=<span class="string">"isShow"</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    const vm = new Vue(&#123;</span></span><br><span class="line"><span class="undefined">        el: '#demo',</span></span><br><span class="line"><span class="undefined">        data: &#123;</span></span><br><span class="line"><span class="undefined">            isShow: 'true',</span></span><br><span class="line"><span class="undefined">            message: '普元信息技术股份有限公司'</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        methods: &#123;</span></span><br><span class="line"><span class="undefined">            destroyVue () &#123;</span></span><br><span class="line"><span class="undefined">                this.$destroy()</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        beforeCreate()&#123;</span></span><br><span class="line"><span class="undefined">            console.log('beforeCreate......')</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        created()&#123;</span></span><br><span class="line"><span class="undefined">            console.log('created.......')</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        beforeMount()&#123;</span></span><br><span class="line"><span class="undefined">            console.log('beforeMount.....')</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        mounted()&#123;</span></span><br><span class="line"><span class="undefined">            console.log('mount.......')</span></span><br><span class="line"><span class="undefined">            this.intervalId = setInterval(() =&gt; &#123;</span></span><br><span class="line"><span class="undefined">                console.log('-----')</span></span><br><span class="line"><span class="undefined">                this.isShow = !this.isShow</span></span><br><span class="line"><span class="undefined">            &#125;, 500)</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        beforeUpdate()&#123;</span></span><br><span class="line"><span class="undefined">            console.log('beforeUpdate.....')</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        updated()&#123;</span></span><br><span class="line"><span class="undefined">            console.log('updated.....')</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        beforeDestory()&#123;</span></span><br><span class="line"><span class="undefined">            console.log('beforeDestory.....')</span></span><br><span class="line"><span class="undefined">            clearInterval(this.intervalId)</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        destoryed()&#123;</span></span><br><span class="line"><span class="undefined">            console.log('destoryed......')</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="11，过渡动画"><a href="#11，过渡动画" class="headerlink" title="11，过渡动画"></a><code>11，过渡动画</code></h3><p><code>1）操作css的transition和animation</code></p><p><code>2）vue会给特定的元素添加或者移除class</code></p><p><code>3）过渡的相关类名：</code></p><p><code>​        .xxx-enter-active 指定显示的transition</code></p><p><code>​        .xxx-leave-active 指定隐藏的transition</code></p><p><code>​        .xxx-enter 指定隐藏的样式</code></p><p><code>​        .xxx-leave-to  指定隐藏的样式</code></p><p><code>4）基本过渡动画的步骤及示例代码：</code></p><p><code>​        在目标元素外包裹==&lt;transition  name=&quot;xxxx&quot;&gt; &lt;/transition&gt;==</code></p><p><code>​        指定过渡样式： transition</code></p><p><code>​        指定隐藏时的样式：opacity: 0/其他</code></p><p><code>5）示例代码：</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>过度动画<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        /*指定过渡样式*/</span></span><br><span class="line"><span class="undefined">        .fade-enter-active, .fade-leave-active&#123;</span></span><br><span class="line"><span class="undefined">            transition: opacity 1s;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        /*指定隐藏时的样式*/</span></span><br><span class="line"><span class="undefined">        .fade-enter, .fade-leave-to&#123;</span></span><br><span class="line"><span class="undefined">            opacity: 0;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        /*指定demo2的显示样式*/</span></span><br><span class="line"><span class="undefined">        .move-enter-active&#123;</span></span><br><span class="line"><span class="undefined">            transition: all 1s;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        .move-leave-active&#123;</span></span><br><span class="line"><span class="undefined">            transition: all 3s;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        /*指定demo2的隐藏样式*/</span></span><br><span class="line"><span class="undefined">        .move-enter, .move-leave-to&#123;</span></span><br><span class="line"><span class="undefined">            opacity: 0;</span></span><br><span class="line"><span class="undefined">            transform: translateX(25px);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"demo"</span> <span class="attr">class</span>=<span class="string">"element2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"isShow=!isShow"</span>&gt;</span>Toggle<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">"fade"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-show</span>=<span class="string">"isShow"</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"demo2"</span> <span class="attr">class</span>=<span class="string">"element2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"isShow=!isShow"</span>&gt;</span>Toggle<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">"move"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-show</span>=<span class="string">"isShow"</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    const vm = new Vue(&#123;</span></span><br><span class="line"><span class="undefined">        el: '#demo',</span></span><br><span class="line"><span class="undefined">        data: &#123;</span></span><br><span class="line"><span class="undefined">            isShow: 'true'</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined">    const vm2 = new Vue(&#123;</span></span><br><span class="line"><span class="undefined">        el: '#demo2',</span></span><br><span class="line"><span class="undefined">        data: &#123;</span></span><br><span class="line"><span class="undefined">            isShow: 'true'</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="12，过滤器："><a href="#12，过滤器：" class="headerlink" title="12，过滤器："></a><code>12，过滤器：</code></h3><p><code>1）效果图：</code></p><p><code>2）理解过滤器：</code></p><p><code>​        对要显示的数据进行格式化再进行显示</code></p><p><code>​        没有改变原来的数据，但是产生新的数据</code></p><p><code>3）定义过滤器：</code></p><p>`        </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Vue.filter(date,function()&#123;`</span><br><span class="line"></span><br><span class="line">`return   newValue`</span><br><span class="line"></span><br><span class="line">`&#125;)`</span><br></pre></td></tr></table></figure><p><code>4）使用过滤器：</code></p><p>`    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;&#123;&#123; time | filterName &#125;&#125;&lt;/p&gt;`</span><br><span class="line">&lt;p&gt;&#123;&#123; time | filterName(&apos;YYYY-MM-DD&apos;) &#125;&#125;&lt;/p&gt;指定显示的样式</span><br></pre></td></tr></table></figure><p><code>5）示例代码：</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"demo"</span> <span class="attr">class</span>=<span class="string">"element2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>日期的格式化<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;time&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>完整版 &#123;&#123;time | timeString &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>年月日 &#123;&#123;time | timeString('YYYY-MM-DD')&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>时分秒 &#123;&#123;time | timeString('HH:mm:ss')&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/moment.js/2.22.1/moment.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    Vue.filter('timeString',function (value,format) &#123;</span></span><br><span class="line"><span class="undefined">        return moment(value).format(format || 'YYYY-MM-DD HH:mm:ss')</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined">    const vm = new Vue(&#123;</span></span><br><span class="line"><span class="undefined">        el: '#demo',</span></span><br><span class="line"><span class="undefined">        data: &#123;</span></span><br><span class="line"><span class="undefined">            time: new Date()</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="13，Vue常用内置指令和自定义指令"><a href="#13，Vue常用内置指令和自定义指令" class="headerlink" title="13，Vue常用内置指令和自定义指令"></a><code>13，Vue常用内置指令和自定义指令</code></h3><p><code>1）常用内置指令：</code></p><p>`        </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">v-if:如果为 true, 当前标签才会输出到页面`</span><br><span class="line"></span><br><span class="line">`v-else:如果为 false, 当前标签才会输出到页面`</span><br><span class="line"></span><br><span class="line">`  v-text:更新元素的 textContent`</span><br><span class="line"></span><br><span class="line">`v-html:更新元素的 innerHTML`</span><br><span class="line"></span><br><span class="line">`v-model:双向数据绑定`</span><br><span class="line"></span><br><span class="line">`v-show:通过控制 display 样式来控制显示/隐藏`</span><br><span class="line"></span><br><span class="line">`v-on:绑定事件监听, 一般简写为@`</span><br><span class="line"></span><br><span class="line">`v-for:遍历数组/对象`</span><br><span class="line"></span><br><span class="line">`v-bind:强制绑定解析表达式, 可以省略 v-bind`</span><br><span class="line"></span><br><span class="line">`ref:指定唯一标识, vue 对象通过$els 属性访问这个元素对象`</span><br><span class="line"></span><br><span class="line">`v-cloak:防止闪现, 与 css 配合: [v-cloak] &#123; display: none &#125;`</span><br></pre></td></tr></table></figure><p><code>2）示例代码：</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"demo"</span> <span class="attr">class</span>=<span class="string">"element2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-text</span>=<span class="string">"msg"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-html</span>=<span class="string">"msg"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">ref</span>=<span class="string">"content"</span>&gt;</span>www.wenxin.wiki<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"hint"</span>&gt;</span>提示<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    const vm = new Vue(&#123;</span></span><br><span class="line"><span class="undefined">        el: '#demo',</span></span><br><span class="line"><span class="undefined">        data: &#123;</span></span><br><span class="line"><span class="undefined">            msg: 'www.baidu.com'</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        methods: &#123;</span></span><br><span class="line"><span class="undefined">            hint()&#123;</span></span><br><span class="line"><span class="undefined">              alert(this.$refs.content.innerHTML)</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>3）自定义指令：</code></p><p>​`     </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> 注册全局指令：`</span><br><span class="line"></span><br><span class="line">`Vue.directive(&apos;指令名不带v-&apos;,function(el,binding)&#123;`</span><br><span class="line"></span><br><span class="line">`el.innerHTML = binding.value.toupperCase()`</span><br><span class="line"></span><br><span class="line">`&#125;)`</span><br><span class="line"></span><br><span class="line">`      注册局部指令：`</span><br><span class="line"></span><br><span class="line">`directives:&#123;`</span><br><span class="line"></span><br><span class="line">`&apos;指令名不带v-&apos;(el,binding)&#123;`</span><br><span class="line"></span><br><span class="line">`el.ijnnerHtml = binding,value.toLowerCase()`</span><br><span class="line"></span><br><span class="line">`&#125;`</span><br><span class="line"></span><br><span class="line">`&#125;`</span><br></pre></td></tr></table></figure><p><code>4）示例代码：</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"demo1"</span> <span class="attr">class</span>=<span class="string">"element2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-upper-text</span>=<span class="string">"msg"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-lower-text</span>=<span class="string">"msg"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"demo2"</span> <span class="attr">class</span>=<span class="string">"element2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-upper-text</span>=<span class="string">"msg"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-lower-text</span>=<span class="string">"msg"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    Vue.directive('upper-text',function (el,binding) &#123;</span></span><br><span class="line"><span class="undefined">        el.innerHTML = binding.value.toUpperCase()</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined">    Vue.directive('lower-text',function (el,binding) &#123;</span></span><br><span class="line"><span class="undefined">        el.innerHTML = binding.value.toLowerCase()</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined">    const vm  = new Vue(&#123;</span></span><br><span class="line"><span class="undefined">        el: '#demo1',</span></span><br><span class="line"><span class="undefined">        data: &#123;</span></span><br><span class="line"><span class="undefined">            msg: 'NBA I Love This Game'</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined">    const vm2 = new Vue(&#123;</span></span><br><span class="line"><span class="undefined">        el: '#demo2',</span></span><br><span class="line"><span class="undefined">        data: &#123;</span></span><br><span class="line"><span class="undefined">            msg: 'Just Do It'</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        directives: &#123;</span></span><br><span class="line"><span class="undefined">            'upper-text'(el,binding)&#123;</span></span><br><span class="line"><span class="undefined">                el.innerHTML = binding.value.toUpperCase()</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>### </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Vue01-核心&quot;&gt;&lt;a href=&quot;#Vue01-核心&quot; class=&quot;headerlink&quot; title=&quot;Vue01_核心&quot;&gt;&lt;/a&gt;&lt;code&gt;Vue01_核心&lt;/code&gt;&lt;/h2&gt;&lt;h3 id=&quot;1，Vue的基本认识：&quot;&gt;&lt;a href=&quot;#1，Vue
      
    
    </summary>
    
      <category term="vue学习" scheme="https://jackLovewx.github.io/categories/vue%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="vue" scheme="https://jackLovewx.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Ansible10_roles详细介绍</title>
    <link href="https://jackLovewx.github.io/2018/12/04/Ansible10-roles%E8%AF%A6%E7%BB%86%E4%BB%8B%E7%BB%8D/"/>
    <id>https://jackLovewx.github.io/2018/12/04/Ansible10-roles详细介绍/</id>
    <published>2018-12-04T02:32:48.000Z</published>
    <updated>2018-12-04T05:43:50.610Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Ansible10-roles详细介绍"><a href="#Ansible10-roles详细介绍" class="headerlink" title="Ansible10_roles详细介绍"></a>Ansible10_roles详细介绍</h2><h3 id="1-Roles-角色"><a href="#1-Roles-角色" class="headerlink" title="1,Roles:角色"></a>1,Roles:角色</h3><p>ansible自1.2版本引入的新特性，用于层次性，结构化的组织playbook，角色能够根据层次性结构自动转载变量文件</p><p>tasks以及handlers等，要使用角色只需在playbook中使用include指令即可，简单来讲，角色就是通过分别将变量，文件</p><p>任务，模板以及处理器放置于单独的目录中，并且可以快捷的include他们的一种机制，角色一般用于基于主机构建服务的</p><p>场景中，但是也可以用于构建守护进程等场景中。</p><p>复杂场景：建议使用roles，代码的复用度高</p><h3 id="2，Roles的目录结构"><a href="#2，Roles的目录结构" class="headerlink" title="2，Roles的目录结构"></a>2，Roles的目录结构</h3><p>每个角色，以特定的层级目录结构进行组织</p><h4 id="roles目录机构："><a href="#roles目录机构：" class="headerlink" title="roles目录机构："></a>roles目录机构：</h4><p>​    playbook.yml</p><p>​    roles/</p><p>​      project/</p><p>​        tasks:定义task，role的基本元素，至少包含一个名为main.yml的文件，其他文件在此文件中include包含</p><p>​        files:存放有copy或者script模块等调用的文件</p><p>​        vars:不常用，定义变量，至少有一个名为main.yml文件。</p><p>​        default:不常用，设定默认变量时，使用此目录中的main.yml文件</p><p>​        templates:template模块查找说需要的模板文件的目录</p><pre><code>handlers:至少有一个名为main.yml文件，其他文件用include包含</code></pre><p>​        meta:不常用，定义当前角色的特殊设定，及依赖关系，至少包含main.yml文件 </p><h3 id="3，角色应用的综合示例：以http服务器为例"><a href="#3，角色应用的综合示例：以http服务器为例" class="headerlink" title="3，角色应用的综合示例：以http服务器为例"></a>3，角色应用的综合示例：以http服务器为例</h3><p>1，mkdir roles</p><p>2，mkdir  app</p><p>3，mkdir tasks template vars handlers files</p><p>4，tree可以查看目录结构</p><p>tasks（任务）：</p><p>5，创建组：group 组名：app  系统组： system=yes gid=123 </p><p>6，创建用户：user  用户名：app 将用户添加到组中，系统用户， shell=/sbin/nologin</p><p>7，安装包：yum  包：httpd</p><p>8，拷贝一些模板文件：/etc/httpd/conf/http.conf 复制到 /templates下改名为 http.conf.j2</p><p>​      修改问价内容，该Listen为  该user为 </p><p>​      该group为 </p><p>9，准备变量文件 /var/main.yml ——–username: app   groupname: app</p><p>10,编写template.yml任务，  src dest</p><p>11，添加 handlers和 notify</p><p>12，启动服务</p><p>13，重启服务</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Ansible10-roles详细介绍&quot;&gt;&lt;a href=&quot;#Ansible10-roles详细介绍&quot; class=&quot;headerlink&quot; title=&quot;Ansible10_roles详细介绍&quot;&gt;&lt;/a&gt;Ansible10_roles详细介绍&lt;/h2&gt;&lt;h3 i
      
    
    </summary>
    
      <category term="Ansible学习" scheme="https://jackLovewx.github.io/categories/Ansible%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Ansible" scheme="https://jackLovewx.github.io/tags/Ansible/"/>
    
  </entry>
  
  <entry>
    <title>Ansible09_Playbook详细介绍</title>
    <link href="https://jackLovewx.github.io/2018/12/03/Ansible09-Playbook%E8%AF%A6%E7%BB%86%E4%BB%8B%E7%BB%8D/"/>
    <id>https://jackLovewx.github.io/2018/12/03/Ansible09-Playbook详细介绍/</id>
    <published>2018-12-03T08:29:15.000Z</published>
    <updated>2018-12-04T02:31:40.905Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Ansible09-Playbook详细介绍"><a href="#Ansible09-Playbook详细介绍" class="headerlink" title="Ansible09_Playbook详细介绍"></a>Ansible09_Playbook详细介绍</h2><h3 id="一：playbook简介："><a href="#一：playbook简介：" class="headerlink" title="一：playbook简介："></a>一：playbook简介：</h3><p>1,playbook是由一个或者多个play组成的列表</p><p>2，play的主要作用在于将事先归并为一组的主机装扮成事先通过ansible的task定义好的角色</p><p>​      从根本上讲，所谓task无非是调用ansible的一个module，将多个play组织在一个playbook中，</p><p>​      可以让他们联同起来按事先编排的机制协同工作。</p><p>3，playbook采用的是yml语言编写</p><h3 id="二，playbook的工作流程："><a href="#二，playbook的工作流程：" class="headerlink" title="二，playbook的工作流程："></a>二，playbook的工作流程：</h3><p><img src="/2018/12/03/Ansible09-Playbook详细介绍/1.jpg" alt=""></p><p>1,流程解析：</p><p> 我们编写了一个playbook，然后去调用playbook，最终也是用ansible命令执行的，去调用一个一个的play，</p><p>当然每个play都有自己的任务，那么任务的执行本质来讲就是来调用模块，模块在执行的时候，要看看是针对</p><p>主机清单中的哪些主机执行的</p><p>2，如果说ansible的单个模块相当于linux中的单行命令，那么playbook就相当于脚本的概念，将许多命令放在</p><p>脚本里面，按照自己定义的顺序执行。</p><h3 id="三playbook的核心元素概览"><a href="#三playbook的核心元素概览" class="headerlink" title="三playbook的核心元素概览"></a>三playbook的核心元素概览</h3><p>1，hosts：执行的远程主机列表</p><p>2，tasks：任务集</p><p>3，varniables：内置变量或者自定义变量在playbook中调用</p><p>4，templates：模板，可替换模板文件中的变量，并实现一些简单逻辑的文件</p><p>5，Handlers:和notify配合使用，有特定的条件触发的操作，满足条件执行，否则就不执行</p><p>6，tags：标签，执行某任务的执行，用于选择playbook中部分代码，ansible具有幂等性，因此会自动跳过</p><p>​      没有变化的部分。</p><pre><code>eg： ansible-playbook -t tagname useradd.yml</code></pre><h3 id="四：playbook的基础组件"><a href="#四：playbook的基础组件" class="headerlink" title="四：playbook的基础组件"></a>四：playbook的基础组件</h3><p>1,hosts:</p><p>​    playbook中每一个play的目的都是为了让某一个或者某些主机以某个指定的用户身份执行任务，</p><p>​    hosts用于执行要执行的指定任务的主机，事先电仪在主机清单中。</p><p>   形式：</p><p>​    192.168.10.129或者192.168.10.*</p><p>​    webservers或者webservers:dbservers或者webservers&amp;appservers或者webservers:! appservers</p><p>2,remote_user:</p><p>​        可用于host和task中，也可以通过指定其sudo的方式在远程主机上执行任务</p><p>3，tasks：任务列表</p><p>使用ignore-errors来忽略错误信息。<img src="/2018/12/03/Ansible09-Playbook详细介绍/2.jpg" alt="1543827227812"></p><p>上图是一个基本的playbook的结构。</p><h3 id="五，运行playbook"><a href="#五，运行playbook" class="headerlink" title="五，运行playbook"></a>五，运行playbook</h3><p>1，方式： </p><p>​        ansible-playbook   xxxx.yml</p><p>2,常见选项：</p><p>​        –check  或者 -C :  只检查语法，不真正的运行</p><p>​        –list-hosts:列出运行任务的主机</p><p>​        –limit  主机列表：只针对主机列表中的主机执行</p><pre><code>-v：显示过程  --v显示详细的过程</code></pre><p>​    示例：</p><p>​        ansible-playbookl file.yml -C</p><p>​        ansible-playbook file,.yml</p><p>​        ansible-playbook file.yml –limit webservers</p><h3 id="六：handlers和notify结合使用触发条件"><a href="#六：handlers和notify结合使用触发条件" class="headerlink" title="六：handlers和notify结合使用触发条件"></a>六：handlers和notify结合使用触发条件</h3><p>1，handlers：相当于一个触发器</p><p>​      是task列表，这些task于之前task本质相同，用于关注的资源发生变化时，才会执行一定的操作</p><p>2，notify：此action可以用于在每个play的最后触发，这样可以避免多次有改变发生时，每次都执行的</p><p>​      操作，仅在所有的变化发生完成后一次性执行指定操作，在notify中列出的操作成为handler，即</p><p>​      notify中调用handler中定义的操作。 </p><h3 id="七，变量的使用："><a href="#七，变量的使用：" class="headerlink" title="七，变量的使用："></a>七，变量的使用：</h3><p>1， 变量名：仅能由字母，数字，下划线组成，且只能以字母开头。</p><p>2，变量的来源：</p><p>​    1，ansible的setup模块中，这些变量定义了本机的系统信息。</p><p>​          可以使用 ansible webservers -m setup -a ‘filter=<em>address</em>‘用过滤器查找相关的变量</p><p>​     2，在/etc/ansible/hosts中定义</p><p>​           普通变量：主机组中主机单独定义，优先级高于公共变量</p><p>​            公共变量：针对主机组中所有主机定义同一变量</p><p>​     3，通过命令行指定变量，优先级最高</p><pre><code>ansible-playbook -e varname=value</code></pre><p>​     4，在playbook中定义变量：</p><p>​        vars:</p><p>​                  var1: value1</p><p>​                 var2: value2</p><p>​     5，在角色中定义</p><p>3，变量的调用方式：</p><p>​    通过   来调用变量，变量名前后加空格。</p><p>4，变量的优先级：</p><p>​    -e &gt;  playbok &gt;  主机清单 定义的变量</p><h3 id="八：模板templates的使用"><a href="#八：模板templates的使用" class="headerlink" title="八：模板templates的使用"></a>八：模板templates的使用</h3><p>​    1，根据西永的配置文件状态，生成对用的文件</p><p>​    2，文本文件嵌套有Jinja2语言，使用字面量，有如下形式：</p><p>​        字符串：使用单引号或者双引号</p><p>​        数字：整数，浮点型</p><p>​        列表：[item1,item2,item…]</p><p>​        元组:(item1,item2,item…)</p><p>​        字典：{key:value,key2:value…}</p><p>​        布尔：true、false</p><p>​        算术运算： + - *  //  /  % </p><p>​        比较：==  !=  &gt;  &lt;  &gt;=  &lt;=</p><p>​        逻辑： and  or   not</p><p>​        for  if  when</p><p>​    3,when:条件测试：如果需要根据变量facts，或者此前任务的执行结果来作为某task执行与否的前提时，需要用到</p><p>​              通过when语句实现在task中，jinja2语法格式。在task后添加when子句即可使用条件测试</p><p>​         eg： - name: ‘shut down RedHat flavored systemc’</p><p>​            command: /sbin/shutdown  -h  now</p><p>​            when:  ansible -os_family == “RedHat”        </p><p>​    4,迭代：with_items</p><p>​       当有需要重复性的执行的任务时，可以使用迭代机制</p><p>​       对迭代项目的应用，固定变量名为item，要在task中使用with_items给定要迭代的元素列表</p><p>​        <img src="/2018/12/03/Ansible09-Playbook详细介绍/3png" alt="1543889853566"></p><p>​    eg:需求：创建三个用户将用户加到刚刚创建的组中。</p><p>​    <img src="/2018/12/03/Ansible09-Playbook详细介绍/4.png" alt="1543889947561"></p><p>​        </p><p>​    </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Ansible09-Playbook详细介绍&quot;&gt;&lt;a href=&quot;#Ansible09-Playbook详细介绍&quot; class=&quot;headerlink&quot; title=&quot;Ansible09_Playbook详细介绍&quot;&gt;&lt;/a&gt;Ansible09_Playbook详细
      
    
    </summary>
    
      <category term="Ansible学习" scheme="https://jackLovewx.github.io/categories/Ansible%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Ansible" scheme="https://jackLovewx.github.io/tags/Ansible/"/>
    
  </entry>
  
  <entry>
    <title>Ansible08_ansible-console介绍</title>
    <link href="https://jackLovewx.github.io/2018/12/03/Ansible08-ansible-console%E4%BB%8B%E7%BB%8D/"/>
    <id>https://jackLovewx.github.io/2018/12/03/Ansible08-ansible-console介绍/</id>
    <published>2018-12-03T08:18:52.000Z</published>
    <updated>2018-12-03T08:25:02.309Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Ansible08-ansible-console介绍"><a href="#Ansible08-ansible-console介绍" class="headerlink" title="Ansible08_ansible-console介绍"></a>Ansible08_ansible-console介绍</h2><h4 id="1-ansible2-0新增，可以交互执行命令"><a href="#1-ansible2-0新增，可以交互执行命令" class="headerlink" title="1.ansible2.0新增，可以交互执行命令"></a>1.ansible2.0新增，可以交互执行命令</h4><h4 id="2-root-test-2-f-10"><a href="#2-root-test-2-f-10" class="headerlink" title="2,root@test(2)[f:10] $"></a>2,root@test(2)[f:10] $</h4><p>解析：root为当前的执行用户，test为当前操作的主机组</p><pre><code>(2)为当前组的主机数量，[f:10] 10代表并发数</code></pre><h4 id="3，设置并发数：-eg：forks-n"><a href="#3，设置并发数：-eg：forks-n" class="headerlink" title="3，设置并发数： eg：forks  n"></a>3，设置并发数： eg：forks  n</h4><h4 id="4-切换组：-cd-主机组-eg：cd-webservers"><a href="#4-切换组：-cd-主机组-eg：cd-webservers" class="headerlink" title="4,切换组：  cd  主机组  eg：cd webservers"></a>4,切换组：  cd  主机组  eg：cd webservers</h4><h4 id="5，列出所有的内置命令-或者help"><a href="#5，列出所有的内置命令-或者help" class="headerlink" title="5，列出所有的内置命令  ? 或者help"></a>5，列出所有的内置命令  ? 或者help</h4><h4 id="6-列出当前组的主机列表：list"><a href="#6-列出当前组的主机列表：list" class="headerlink" title="6,列出当前组的主机列表：list"></a>6,列出当前组的主机列表：list</h4><h4 id="6，示例："><a href="#6，示例：" class="headerlink" title="6，示例："></a>6，示例：</h4><h3 id="root-all-2-f-5-list"><a href="#root-all-2-f-5-list" class="headerlink" title="root@all(2)[f:5]$ list"></a>root@all(2)[f:5]$ list</h3><h3 id="root-all-2-f-5-cd-webservers"><a href="#root-all-2-f-5-cd-webservers" class="headerlink" title="root@all(2)[f:5]$ cd webservers"></a>root@all(2)[f:5]$ cd webservers</h3><h3 id="root-all-2-f-5-yum-name-httpd-state-present"><a href="#root-all-2-f-5-yum-name-httpd-state-present" class="headerlink" title="root@all(2)[f:5]$ yum name=httpd state=present"></a>root@all(2)[f:5]$ yum name=httpd state=present</h3><h3 id="root-all-2-f-5-service-name-httpd-state-started"><a href="#root-all-2-f-5-service-name-httpd-state-started" class="headerlink" title="root@all(2)[f:5]$ service name=httpd state=started"></a>root@all(2)[f:5]$ service name=httpd state=started</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Ansible08-ansible-console介绍&quot;&gt;&lt;a href=&quot;#Ansible08-ansible-console介绍&quot; class=&quot;headerlink&quot; title=&quot;Ansible08_ansible-console介绍&quot;&gt;&lt;/a&gt;Ansib
      
    
    </summary>
    
      <category term="Ansible学习" scheme="https://jackLovewx.github.io/categories/Ansible%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Ansible" scheme="https://jackLovewx.github.io/tags/Ansible/"/>
    
  </entry>
  
  <entry>
    <title>Ansible07_Ansible-vault介绍</title>
    <link href="https://jackLovewx.github.io/2018/12/03/Ansible07-Ansible-vault%E4%BB%8B%E7%BB%8D/"/>
    <id>https://jackLovewx.github.io/2018/12/03/Ansible07-Ansible-vault介绍/</id>
    <published>2018-12-03T08:13:24.000Z</published>
    <updated>2018-12-03T08:16:52.182Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Ansible07-Ansible-vault介绍"><a href="#Ansible07-Ansible-vault介绍" class="headerlink" title="Ansible07_Ansible-vault介绍"></a>Ansible07_Ansible-vault介绍</h2><h3 id="1，功能：管理加密解密yml文件的"><a href="#1，功能：管理加密解密yml文件的" class="headerlink" title="1，功能：管理加密解密yml文件的"></a>1，功能：管理加密解密yml文件的</h3><h3 id="2，相关命令："><a href="#2，相关命令：" class="headerlink" title="2，相关命令："></a>2，相关命令：</h3><h4 id="加密：ansible-vault-encrypt-hello-yml"><a href="#加密：ansible-vault-encrypt-hello-yml" class="headerlink" title="加密：ansible-vault encrypt hello.yml"></a>加密：ansible-vault encrypt hello.yml</h4><h4 id="解密：ansible-vault-decrypt-hello-yml"><a href="#解密：ansible-vault-decrypt-hello-yml" class="headerlink" title="解密：ansible-vault decrypt hello.yml"></a>解密：ansible-vault decrypt hello.yml</h4><h4 id="查看：ansible-vault-view-hello-yml"><a href="#查看：ansible-vault-view-hello-yml" class="headerlink" title="查看：ansible-vault view hello.yml"></a>查看：ansible-vault view hello.yml</h4><h4 id="编辑加密文件：ansible-vault-edithello-yml"><a href="#编辑加密文件：ansible-vault-edithello-yml" class="headerlink" title="编辑加密文件：ansible-vault edithello.yml"></a>编辑加密文件：ansible-vault edithello.yml</h4><h4 id="修改口令：ansible-vault-rekey-hello-yml"><a href="#修改口令：ansible-vault-rekey-hello-yml" class="headerlink" title="修改口令：ansible-vault rekey hello.yml"></a>修改口令：ansible-vault rekey hello.yml</h4><h4 id="创建新文件：ansible-vault-create-hello-yml"><a href="#创建新文件：ansible-vault-create-hello-yml" class="headerlink" title="创建新文件：ansible-vault create hello.yml"></a>创建新文件：ansible-vault create hello.yml</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Ansible07-Ansible-vault介绍&quot;&gt;&lt;a href=&quot;#Ansible07-Ansible-vault介绍&quot; class=&quot;headerlink&quot; title=&quot;Ansible07_Ansible-vault介绍&quot;&gt;&lt;/a&gt;Ansible07_A
      
    
    </summary>
    
      <category term="Ansible学习" scheme="https://jackLovewx.github.io/categories/Ansible%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Ansible" scheme="https://jackLovewx.github.io/tags/Ansible/"/>
    
  </entry>
  
  <entry>
    <title>Ansible06_galaxy介绍</title>
    <link href="https://jackLovewx.github.io/2018/12/03/Ansible06-galaxy%E4%BB%8B%E7%BB%8D/"/>
    <id>https://jackLovewx.github.io/2018/12/03/Ansible06-galaxy介绍/</id>
    <published>2018-12-03T08:08:26.000Z</published>
    <updated>2018-12-03T08:12:40.785Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Ansible06-galaxy介绍"><a href="#Ansible06-galaxy介绍" class="headerlink" title="Ansible06_galaxy介绍"></a>Ansible06_galaxy介绍</h2><p>1，ansible-falaxy：链接ansible网络的一个工具</p><p>2，链接<a href="https://galaxy.ansible.com" target="_blank" rel="noopener">https://galaxy.ansible.com</a> 下载对应的roles</p><p>3，安装：</p><p>​        ansible-galaxy install geerlingguy.redis  下载之后会提示下载到哪个目录了在最后一行</p><p>4，删除galaxy：</p><pre><code>ansible-galaxy remove geerlingguy.redis</code></pre><h3 id="总结：可以联网下载自己所需的角色，下载之后可以改成自己能用的"><a href="#总结：可以联网下载自己所需的角色，下载之后可以改成自己能用的" class="headerlink" title="总结：可以联网下载自己所需的角色，下载之后可以改成自己能用的"></a>总结：可以联网下载自己所需的角色，下载之后可以改成自己能用的</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Ansible06-galaxy介绍&quot;&gt;&lt;a href=&quot;#Ansible06-galaxy介绍&quot; class=&quot;headerlink&quot; title=&quot;Ansible06_galaxy介绍&quot;&gt;&lt;/a&gt;Ansible06_galaxy介绍&lt;/h2&gt;&lt;p&gt;1，ansi
      
    
    </summary>
    
      <category term="Ansible学习" scheme="https://jackLovewx.github.io/categories/Ansible%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Ansible" scheme="https://jackLovewx.github.io/tags/Ansible/"/>
    
  </entry>
  
  <entry>
    <title>Ansible05_常用模块详细介绍</title>
    <link href="https://jackLovewx.github.io/2018/12/03/Ansible05-%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97%E8%AF%A6%E7%BB%86%E4%BB%8B%E7%BB%8D/"/>
    <id>https://jackLovewx.github.io/2018/12/03/Ansible05-常用模块详细介绍/</id>
    <published>2018-12-03T06:57:52.000Z</published>
    <updated>2018-12-04T05:52:27.550Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Ansible05-常用模块详细介绍"><a href="#Ansible05-常用模块详细介绍" class="headerlink" title="Ansible05_常用模块详细介绍"></a>Ansible05_常用模块详细介绍</h2><p>首先介绍一下ansible命令的格式写法：</p><h3 id="ansible-all-m-command-a-‘-xxxxxxx-‘"><a href="#ansible-all-m-command-a-‘-xxxxxxx-‘" class="headerlink" title="ansible    all     -m    command   -a   ‘ xxxxxxx ‘"></a>ansible    all     -m    command   -a   ‘ xxxxxxx ‘</h3><p>all：代表的是所有的被控端，all也可以替换成为部分被控端的组的名称</p><p>-m：指定要用哪个模块</p><p>command：默认模块，可以忽略不写</p><p>‘xxxxx’：代表的是要执行的命令  比如：  ls  /data/      ‘df -h’  查看分区利用率</p><h3 id="注：Ansible所有的模块我们在使用的时候都可以通过-ansible-doc-模块名-来查询相应的用法"><a href="#注：Ansible所有的模块我们在使用的时候都可以通过-ansible-doc-模块名-来查询相应的用法" class="headerlink" title="注：Ansible所有的模块我们在使用的时候都可以通过 ansible-doc  模块名   来查询相应的用法"></a>注：Ansible所有的模块我们在使用的时候都可以通过 ansible-doc  模块名   来查询相应的用法</h3><h3 id="1，Command模块："><a href="#1，Command模块：" class="headerlink" title="1，Command模块："></a>1，Command模块：</h3><p>参数： </p><p>​      chdir：切换到某一个文件夹再执行命令</p><p>​      creates：如果后该参数后面跟一个文件或者文件夹，如果存在，将不执行后面的命令</p><p>​      removes：如果该参数和面跟一个文件或者文件夹，如果不存在，将不执行和面的命令</p><p>不支持的条件：<br>      此命令不支持命令中带有  |   $  变量   &lt;   &gt;  &amp;  等等 得使用shell模块实现</p><h3 id="2，Shell模块："><a href="#2，Shell模块：" class="headerlink" title="2，Shell模块："></a>2，Shell模块：</h3><p>参数：</p><p>​        和command类似</p><p>eg：</p><p>​         ansible all -m shell -a ‘ps aux grep|nginx’</p><h3 id="3-Script-运行脚本的模块"><a href="#3-Script-运行脚本的模块" class="headerlink" title="3,Script:运行脚本的模块"></a>3,Script:运行脚本的模块</h3><h4 id="tips：在编写脚本的时候，应该遵循规范在第一行加上：-bin-bash"><a href="#tips：在编写脚本的时候，应该遵循规范在第一行加上：-bin-bash" class="headerlink" title="tips：在编写脚本的时候，应该遵循规范在第一行加上：   #!/bin/bash"></a>tips：在编写脚本的时候，应该遵循规范在第一行加上：   #!/bin/bash</h4><h4 id="eg-echo-hostname-gt-test-sh"><a href="#eg-echo-hostname-gt-test-sh" class="headerlink" title="eg:    echo hostname &gt; test.sh"></a>eg:    echo hostname &gt; test.sh</h4><h4 id="chmod-x-test-sh"><a href="#chmod-x-test-sh" class="headerlink" title="chmod +x test.sh"></a>chmod +x test.sh</h4><h4 id="ansible-all-m-script-a-‘-test-sh’"><a href="#ansible-all-m-script-a-‘-test-sh’" class="headerlink" title="ansible all - m script -a ‘./test.sh’"></a>ansible all - m script -a ‘./test.sh’</h4><h3 id="4-copy模块：从主控端复制文件到被控端"><a href="#4-copy模块：从主控端复制文件到被控端" class="headerlink" title="4.copy模块：从主控端复制文件到被控端"></a>4.copy模块：从主控端复制文件到被控端</h3><p>ansible all -m copy -a ‘src=/root/test.sh dest=/tmp/test.sh backup=yes’</p><h4 id="参数："><a href="#参数：" class="headerlink" title="参数："></a>参数：</h4><pre><code>src:主控端的路径</code></pre><p>​        dest:要复制到被控端的文件路径</p><p>​    backup=yes：将原来的文件做一个备份，如果目标存在先进行备份再复制</p><h3 id="5，fetch模块："><a href="#5，fetch模块：" class="headerlink" title="5，fetch模块："></a>5，fetch模块：</h3><p>从被控端取文件到主控端与copy相反：</p><p>但是只能抓取被控端的一个文件，如果想抓取多个，将多个文件进行打包再fetch过来，</p><h4 id="命令格式："><a href="#命令格式：" class="headerlink" title="命令格式："></a>命令格式：</h4><h4 id="抓取：ansible-all-m-fetch-a-‘src-root-log-tar-xz-dest-data-‘"><a href="#抓取：ansible-all-m-fetch-a-‘src-root-log-tar-xz-dest-data-‘" class="headerlink" title="抓取：ansible all -m ==fetch== -a ‘src=/root/log.tar.xz dest=/data/‘"></a>抓取：ansible all -m ==fetch== -a ‘src=/root/log.tar.xz dest=/data/‘</h4><h4 id="打包：ansible-all-m-shell-a-‘tar-Jcf-log-tar-xz-var-log-log’"><a href="#打包：ansible-all-m-shell-a-‘tar-Jcf-log-tar-xz-var-log-log’" class="headerlink" title="打包：ansible all -m shell -a ‘tar Jcf log.tar.xz   /var/log/*.log’"></a>打包：ansible all -m shell -a ‘tar Jcf log.tar.xz   /var/log/*.log’</h4><h4 id="预览：tar-tvf-log-tar-xz"><a href="#预览：tar-tvf-log-tar-xz" class="headerlink" title="预览：tar tvf log.tar.xz"></a>预览：tar tvf log.tar.xz</h4><h3 id="6-File模块：设置文件的属性"><a href="#6-File模块：设置文件的属性" class="headerlink" title="6,File模块：设置文件的属性"></a>6,File模块：设置文件的属性</h3><h4 id="创建一个文件：ansible-all-m-file-a-‘path-root-test-owner-wx-state-touch-’"><a href="#创建一个文件：ansible-all-m-file-a-‘path-root-test-owner-wx-state-touch-’" class="headerlink" title="创建一个文件：ansible all -m file -a ‘path=/root/test owner=wx ==state=touch==’"></a>创建一个文件：ansible all -m file -a ‘path=/root/test owner=wx ==state=touch==’</h4><h4 id="删除一个文件：ansible-all-m-file-a-‘path-root-test-state-absent’"><a href="#删除一个文件：ansible-all-m-file-a-‘path-root-test-state-absent’" class="headerlink" title="删除一个文件：ansible all -m file -a ‘path=/root/test ==state=absent’=="></a>删除一个文件：ansible all -m file -a ‘path=/root/test ==state=absent’==</h4><h4 id="创建一文件夹：ansible-all-m-file-a-‘path-root-test-state-directory-’"><a href="#创建一文件夹：ansible-all-m-file-a-‘path-root-test-state-directory-’" class="headerlink" title="创建一文件夹：ansible all -m file -a ‘path=/root/test ==state=directory==’"></a>创建一文件夹：ansible all -m file -a ‘path=/root/test ==state=directory==’</h4><h4 id="复制文件到被控端：ansible-all-m-file-a-‘-src-app-test-file-dest-app-test-file-’"><a href="#复制文件到被控端：ansible-all-m-file-a-‘-src-app-test-file-dest-app-test-file-’" class="headerlink" title="复制文件到被控端：ansible all -m file -a ‘==src=/app/test/file dest=/app/test/file==’"></a>复制文件到被控端：ansible all -m file -a ‘==src=/app/test/file dest=/app/test/file==’</h4><h3 id="7-hostname模块-管理主机名"><a href="#7-hostname模块-管理主机名" class="headerlink" title="7,hostname模块:管理主机名"></a>7,hostname模块:管理主机名</h3><h4 id="eg-ansible-192-168-10-129-m-hostname-a-‘-name-hostOne’"><a href="#eg-ansible-192-168-10-129-m-hostname-a-‘-name-hostOne’" class="headerlink" title="eg:    ansible 192.168.10.129 -m ==hostname== -a ‘==name===hostOne’"></a>eg:    ansible 192.168.10.129 -m ==hostname== -a ‘==name===hostOne’</h4><h3 id="8，Cron模块：计划任务"><a href="#8，Cron模块：计划任务" class="headerlink" title="8，Cron模块：计划任务"></a>8，Cron模块：计划任务</h3><h4 id="先查询广播路径：-which-wall-—-gt-usr-bin-wall"><a href="#先查询广播路径：-which-wall-—-gt-usr-bin-wall" class="headerlink" title="先查询广播路径： which wall  —&gt;/usr/bin/wall"></a>先查询广播路径： which wall  —&gt;/usr/bin/wall</h4><h4 id="支持时间：-minute-hour-day-month-weekday"><a href="#支持时间：-minute-hour-day-month-weekday" class="headerlink" title="支持时间： minute  hour day month weekday"></a>支持时间： minute  hour day month weekday</h4><h4 id="命令："><a href="#命令：" class="headerlink" title="命令："></a>命令：</h4><h4 id="创建名为name的任务-：ansible-all-m-cron-a-‘minute-job-”-usr-bin-wall”-NBA-Warning-name-warningcron’"><a href="#创建名为name的任务-：ansible-all-m-cron-a-‘minute-job-”-usr-bin-wall”-NBA-Warning-name-warningcron’" class="headerlink" title="创建名为name的任务 ：ansible all  -m cron -a ‘minute=* job=”/usr/bin/wall” NBA Warning name=warningcron’"></a>创建名为name的任务 ：ansible all  -m cron -a ‘minute=* job=”/usr/bin/wall” NBA Warning name=warningcron’</h4><h4 id="禁用任务：ansible-all-m-cron-a-‘-disabled-true-job-”-usr-bin-wall-NBA-Warning”-name-warningcron’"><a href="#禁用任务：ansible-all-m-cron-a-‘-disabled-true-job-”-usr-bin-wall-NBA-Warning”-name-warningcron’" class="headerlink" title="禁用任务：ansible all -m cron -a ‘==disabled=true== job=”/usr/bin/wall NBA Warning” name=warningcron’"></a>禁用任务：ansible all -m cron -a ‘==disabled=true== job=”/usr/bin/wall NBA Warning” name=warningcron’</h4><h4 id="启用任务：将上面的disabled改为false即可"><a href="#启用任务：将上面的disabled改为false即可" class="headerlink" title="启用任务：将上面的disabled改为false即可"></a>启用任务：将上面的disabled改为false即可</h4><h4 id="删除任务：ansible-all-m-cron-a-‘job-”-usr-bin-wall-NBAWarning”-name-warincron-state-absent-’"><a href="#删除任务：ansible-all-m-cron-a-‘job-”-usr-bin-wall-NBAWarning”-name-warincron-state-absent-’" class="headerlink" title="删除任务：ansible all -m cron -a ‘job=”/usr/bin/wall NBAWarning” name=warincron ==state=absent==’"></a>删除任务：ansible all -m cron -a ‘job=”/usr/bin/wall NBAWarning” name=warincron ==state=absent==’</h4><h4 id="查看任务：crontab-e"><a href="#查看任务：crontab-e" class="headerlink" title="查看任务：crontab  -e"></a>查看任务：crontab  -e</h4><h3 id="9-yum模块：管理包"><a href="#9-yum模块：管理包" class="headerlink" title="9,yum模块：管理包"></a>9,yum模块：管理包</h3><h4 id="前提：被控端都有yum3，检查yum仓库"><a href="#前提：被控端都有yum3，检查yum仓库" class="headerlink" title="前提：被控端都有yum3，检查yum仓库"></a>前提：被控端都有yum3，检查yum仓库</h4><p>/etc/yum.repos.d/base.repo</p><h4 id="安装：ansible-all-m-yum-a-‘name-httpd’"><a href="#安装：ansible-all-m-yum-a-‘name-httpd’" class="headerlink" title="安装：ansible all -m yum -a ‘name=httpd’"></a>安装：ansible all -m yum -a ‘name=httpd’</h4><h4 id="查看一已经安装的包：ansible-all-m-yum-a-‘list-installed’"><a href="#查看一已经安装的包：ansible-all-m-yum-a-‘list-installed’" class="headerlink" title="查看一已经安装的包：ansible all -m yum -a ‘list=installed’"></a>查看一已经安装的包：ansible all -m yum -a ‘list=installed’</h4><h4 id="卸载包：ansible-all-m-yum-a-‘name-httpd-state-absent-’"><a href="#卸载包：ansible-all-m-yum-a-‘name-httpd-state-absent-’" class="headerlink" title="卸载包：ansible all -m yum -a ‘name=httpd ==state=absent==’"></a>卸载包：ansible all -m yum -a ‘name=httpd ==state=absent==’</h4><h4 id="查看是否卸载了：ansible-all-m-shell-a-‘rpm-q-httpd’"><a href="#查看是否卸载了：ansible-all-m-shell-a-‘rpm-q-httpd’" class="headerlink" title="查看是否卸载了：ansible all -m shell -a ‘rpm -q httpd’"></a>查看是否卸载了：ansible all -m shell -a ‘rpm -q httpd’</h4><p>如果要安装多个包使用逗号隔开即可</p><p>yum更新缓存：update_cache=yes</p><h3 id="10-service模块：管理服务"><a href="#10-service模块：管理服务" class="headerlink" title="10,service模块：管理服务"></a>10,service模块：管理服务</h3><p>state:代表状态，状态不同服务也不同</p><p>enabled:代表的是开机是否自启动</p><h4 id="开启服务-ansible-all-m-service-a-‘name-httpd-state-started-enabled-yes’"><a href="#开启服务-ansible-all-m-service-a-‘name-httpd-state-started-enabled-yes’" class="headerlink" title="开启服务:ansible  all -m service -a ‘name=httpd state=started enabled=yes’"></a>开启服务:ansible  all -m service -a ‘name=httpd state=started enabled=yes’</h4><h4 id="停止服务：ansible-all-m-service-a-‘name-httpd-state-restarted’"><a href="#停止服务：ansible-all-m-service-a-‘name-httpd-state-restarted’" class="headerlink" title="停止服务：ansible  all -m service -a ‘name=httpd state=restarted’"></a>停止服务：ansible  all -m service -a ‘name=httpd state=restarted’</h4><h4 id="重启服务：ansible-all-m-service-a-‘name-httpd-state-stopped’"><a href="#重启服务：ansible-all-m-service-a-‘name-httpd-state-stopped’" class="headerlink" title="重启服务：ansible  all -m service -a ‘name=httpd state=stopped’"></a>重启服务：ansible  all -m service -a ‘name=httpd state=stopped’</h4><h4 id="确认开机是否自启动了：-systemctl-is-enabled-httpd"><a href="#确认开机是否自启动了：-systemctl-is-enabled-httpd" class="headerlink" title="确认开机是否自启动了：  systemctl  is-enabled httpd"></a>确认开机是否自启动了：  systemctl  is-enabled httpd</h4><h4 id="确认是否启动了：systemctl-status-httpd"><a href="#确认是否启动了：systemctl-status-httpd" class="headerlink" title="确认是否启动了：systemctl status httpd"></a>确认是否启动了：systemctl status httpd</h4><h3 id="11-user模块-管理用户"><a href="#11-user模块-管理用户" class="headerlink" title="11,user模块:管理用户"></a>11,user模块:管理用户</h3><h4 id="创建一个用户：ansible-all-m-user-a-‘name-wenxin-shell-sbin-nologin-system-yes-groups-root-uid-80’"><a href="#创建一个用户：ansible-all-m-user-a-‘name-wenxin-shell-sbin-nologin-system-yes-groups-root-uid-80’" class="headerlink" title="创建一个用户：ansible all -m user -a ‘name=wenxin shell=/sbin/nologin system=yes groups=root uid=80’"></a>创建一个用户：ansible all -m user -a ‘name=wenxin shell=/sbin/nologin system=yes groups=root uid=80’</h4><h4 id="查看用户：ansible-all-a-‘getent-passwd-wenxin’"><a href="#查看用户：ansible-all-a-‘getent-passwd-wenxin’" class="headerlink" title="查看用户：ansible all -a ‘getent passwd wenxin’"></a>查看用户：ansible all -a ‘getent passwd wenxin’</h4><h4 id="删除用户：-ansible-all-m-user-a-‘name-wenixn-state-absent’"><a href="#删除用户：-ansible-all-m-user-a-‘name-wenixn-state-absent’" class="headerlink" title="删除用户： ansible all -m user -a ‘name=wenixn state=absent’"></a>删除用户： ansible all -m user -a ‘name=wenixn state=absent’</h4><h3 id="12-group模块：管理组"><a href="#12-group模块：管理组" class="headerlink" title="12.group模块：管理组"></a>12.group模块：管理组</h3><h4 id="创建组：-ansible-all-m-group-a-‘name-nginx-system-yes-gid-82’"><a href="#创建组：-ansible-all-m-group-a-‘name-nginx-system-yes-gid-82’" class="headerlink" title="创建组： ansible all -m group -a ‘name=nginx system=yes gid=82’"></a>创建组： ansible all -m group -a ‘name=nginx system=yes gid=82’</h4><h4 id="验证：ansible-all-m-shel-a-‘getent-group-nginx’"><a href="#验证：ansible-all-m-shel-a-‘getent-group-nginx’" class="headerlink" title="验证：ansible all -m shel -a ‘getent group nginx’"></a>验证：ansible all -m shel -a ‘getent group nginx’</h4><h4 id="删除：ansible-all-m-group-a-‘name-nginx-state-absent’"><a href="#删除：ansible-all-m-group-a-‘name-nginx-state-absent’" class="headerlink" title="删除：ansible all =m group -a ‘name=nginx state=absent’"></a>删除：ansible all =m group -a ‘name=nginx state=absent’</h4><h3 id="13ping模块："><a href="#13ping模块：" class="headerlink" title="13ping模块："></a>13ping模块：</h3><h4 id="检查主控端和被控端的连通性"><a href="#检查主控端和被控端的连通性" class="headerlink" title="检查主控端和被控端的连通性"></a>检查主控端和被控端的连通性</h4><h4 id="命令：ansible-all-m-ping"><a href="#命令：ansible-all-m-ping" class="headerlink" title="命令：ansible all -m ping"></a>命令：ansible all -m ping</h4><h3 id="14-总结：ansible中的模块有1000多个我只是学了常用的13个模块，如果想要学习新的模块可以到官网。"><a href="#14-总结：ansible中的模块有1000多个我只是学了常用的13个模块，如果想要学习新的模块可以到官网。" class="headerlink" title="14,总结：ansible中的模块有1000多个我只是学了常用的13个模块，如果想要学习新的模块可以到官网。"></a>14,总结：ansible中的模块有1000多个我只是学了常用的13个模块，如果想要学习新的模块可以到官网。</h3><h3 id="平时在学习的过程中可以使用：-ansible-doc-s-模块名-来看看这个模块怎么用。"><a href="#平时在学习的过程中可以使用：-ansible-doc-s-模块名-来看看这个模块怎么用。" class="headerlink" title="平时在学习的过程中可以使用：  ansible-doc    -s     模块名   来看看这个模块怎么用。"></a>平时在学习的过程中可以使用：  ansible-doc    -s     模块名   来看看这个模块怎么用。</h3><p>#### </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Ansible05-常用模块详细介绍&quot;&gt;&lt;a href=&quot;#Ansible05-常用模块详细介绍&quot; class=&quot;headerlink&quot; title=&quot;Ansible05_常用模块详细介绍&quot;&gt;&lt;/a&gt;Ansible05_常用模块详细介绍&lt;/h2&gt;&lt;p&gt;首先介绍一下
      
    
    </summary>
    
      <category term="Ansible学习" scheme="https://jackLovewx.github.io/categories/Ansible%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Ansible" scheme="https://jackLovewx.github.io/tags/Ansible/"/>
    
  </entry>
  
  <entry>
    <title>test2</title>
    <link href="https://jackLovewx.github.io/2018/11/29/test2/"/>
    <id>https://jackLovewx.github.io/2018/11/29/test2/</id>
    <published>2018-11-29T09:09:12.000Z</published>
    <updated>2018-11-29T09:09:12.588Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Ansible02_运维自动化之ansible</title>
    <link href="https://jackLovewx.github.io/2018/11/27/Ansible02-%E8%BF%90%E7%BB%B4%E8%87%AA%E5%8A%A8%E5%8C%96%E4%B9%8Bansible/"/>
    <id>https://jackLovewx.github.io/2018/11/27/Ansible02-运维自动化之ansible/</id>
    <published>2018-11-27T14:15:24.000Z</published>
    <updated>2019-01-09T08:56:19.969Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Ansible02-配置文件及命令概览"><a href="#Ansible02-配置文件及命令概览" class="headerlink" title="Ansible02_配置文件及命令概览"></a>Ansible02_配置文件及命令概览</h2><h3 id="1-Ansible-一个主机控制多台主机"><a href="#1-Ansible-一个主机控制多台主机" class="headerlink" title="1,Ansible:一个主机控制多台主机"></a>1,Ansible:一个主机控制多台主机</h3><p>这个主机被称为：主控端</p><p>被控制的多台主机称为：被控端</p><h3 id="2，Ansible特性"><a href="#2，Ansible特性" class="headerlink" title="2，Ansible特性"></a>2，Ansible特性</h3><p>模块化：调用特定的模块完成特定的任务</p><p>基于Python语言实现</p><p>部署简单</p><p>安全：基于OpenSession</p><p>支持Playbook任务编排</p><p>幂等性：一个任务执行一遍和执行N遍的效果是一样的，不因重复发的执行带来意外的情况</p><p>无需代理，不依赖KPI</p><h3 id="3，Ansible架构图："><a href="#3，Ansible架构图：" class="headerlink" title="3，Ansible架构图："></a>3，Ansible架构图：</h3><p><img src="/2018/11/27/Ansible02-运维自动化之ansible/1.png" alt=""></p><p><img src="/2018/11/27/Ansible02-运维自动化之ansible/2.png" alt=""></p><h3 id="4-Ansible的主要组成部分"><a href="#4-Ansible的主要组成部分" class="headerlink" title="4,Ansible的主要组成部分"></a>4,Ansible的主要组成部分</h3><p>​    1，PlayBooks:任务剧本，编排任务集的配置文件，由ansible顺序执行，通常是Json格式的yml文件</p><p>​    2，Inventory：管理主机清单  /etc./ansible/hosts</p><p>​    3，Modules:Ansible执行命令的功能模块</p><p>​    4，plugins：模块功能的补充</p><p>​    5，API：供第三方程序调用的借口</p><p>​    6，Ansible：ansible的命令工具</p><h3 id="5，Ansible的安装："><a href="#5，Ansible的安装：" class="headerlink" title="5，Ansible的安装："></a>5，Ansible的安装：</h3><p>​    yum install ansible</p><p>如果在执行ansible的命令时报错：</p><p>ERROR! Unexpected Exception, this is probably a bug: (cryptography 0.8.2 (/usr/lib64/python2.7/site-packages), Requirement.parse(‘cryptography&gt;=1.1‘)) </p><p>解决方案：</p><p>删除列出的软件包，重新安装ansible即可</p><h4 id="root-kazihuo-rpm-qa-grep-python-crypto"><a href="#root-kazihuo-rpm-qa-grep-python-crypto" class="headerlink" title="[root@kazihuo ~]# rpm -qa |grep python-crypto"></a>[root@kazihuo ~]# rpm -qa |grep python-crypto</h4><p>[root@kazihuo ~]# yum -y remove python-cryptography</p><p>[root@kazihuo ~]# yum -y install ansible</p><h3 id="6，Ansible相关配置文件："><a href="#6，Ansible相关配置文件：" class="headerlink" title="6，Ansible相关配置文件："></a>6，Ansible相关配置文件：</h3><p>/etc/ansible/ansible.cfg：主配置文件</p><p>/etc/ansible/hosts：主机清单配置文件</p><p>​    风格：  [webservers]</p><p>​             192.168.10.128                    </p><p>​             192.168.10.129            或者 9 192.168.10.12[….]</p><p>​             192.168.10.130</p><p>/etc/ansible/roles：存放角色目录 </p><h3 id="7-程序："><a href="#7-程序：" class="headerlink" title="7.程序："></a>7.程序：</h3><p>/usr/bin/ansible：主程序，临时命令的执行工具</p><p>/usr/bin/ansible-doc：查看配置文档，模块功能查看工具</p><p>/usr/bin/ansible-galaxy：下载/上传代码</p><p>/usr/bin/ansible-playbook：定制自动化服务</p><p>/usr/bin/ansible-vault：文件加密工具</p><p>/usr/bin/ansible-console：基于console界面与用户交互的执行工具</p><h3 id="8-Ansible配置文件-etc-ansible-ansible-cfg"><a href="#8-Ansible配置文件-etc-ansible-ansible-cfg" class="headerlink" title="8,Ansible配置文件 /etc/ansible/ansible.cfg"></a>8,Ansible配置文件 /etc/ansible/ansible.cfg</h3><h4 id="invengory-etc-ansible-hosts-主机列表配置文件"><a href="#invengory-etc-ansible-hosts-主机列表配置文件" class="headerlink" title="#invengory=etc/ansible/hosts   #主机列表配置文件"></a>#invengory=etc/ansible/hosts   #主机列表配置文件</h4><h4 id="libraay-usr-share-my-modules-库文件的存放目录"><a href="#libraay-usr-share-my-modules-库文件的存放目录" class="headerlink" title="#libraay=/usr/share/my-modules/     #库文件的存放目录"></a>#libraay=/usr/share/my-modules/     #库文件的存放目录</h4><h4 id="remote-tmp-HOME-ansible-tmp-临时py命令存放在远程主机目录"><a href="#remote-tmp-HOME-ansible-tmp-临时py命令存放在远程主机目录" class="headerlink" title="#remote_tmp=$HOME/.ansible/tmp    #临时py命令存放在远程主机目录"></a>#remote_tmp=$HOME/.ansible/tmp    #临时py命令存放在远程主机目录</h4><h4 id="local-tmp-HOME-ansible-tmp-本机的临时命令执行目录"><a href="#local-tmp-HOME-ansible-tmp-本机的临时命令执行目录" class="headerlink" title="#local_tmp=$HOME/.ansible/tmp  #本机的临时命令执行目录"></a>#local_tmp=$HOME/.ansible/tmp  #本机的临时命令执行目录</h4><h4 id="forks-5-默认的并发数"><a href="#forks-5-默认的并发数" class="headerlink" title="#forks =5  #默认的并发数"></a>#forks =5  #默认的并发数</h4><h4 id="sudo-user-root-默认的sudo用户"><a href="#sudo-user-root-默认的sudo用户" class="headerlink" title="#sudo-user=root #默认的sudo用户"></a>#sudo-user=root #默认的sudo用户</h4><h4 id="ask-sudo-pass-True-每次执行ansible命令是否询问ssh密码"><a href="#ask-sudo-pass-True-每次执行ansible命令是否询问ssh密码" class="headerlink" title="#ask-sudo-pass=True #每次执行ansible命令是否询问ssh密码"></a>#ask-sudo-pass=True #每次执行ansible命令是否询问ssh密码</h4><h4 id="ask-pass-True"><a href="#ask-pass-True" class="headerlink" title="#ask-pass=True"></a>#ask-pass=True</h4><h4 id="remote-port-22"><a href="#remote-port-22" class="headerlink" title="#remote-port=22"></a>#remote-port=22</h4><h4 id="host-key-checking-False-检测对应服务器的Host-key建议取消注释"><a href="#host-key-checking-False-检测对应服务器的Host-key建议取消注释" class="headerlink" title="#host-key-checking-False  #检测对应服务器的Host-key建议取消注释"></a>#host-key-checking-False  #检测对应服务器的Host-key建议取消注释</h4><h3 id="9，Ansible系列命令：没有注解的后面会详细说。"><a href="#9，Ansible系列命令：没有注解的后面会详细说。" class="headerlink" title="9，Ansible系列命令：没有注解的后面会详细说。"></a>9，Ansible系列命令：没有注解的后面会详细说。</h3><p>ansible</p><p>ansible-doc：显示模块帮助</p><p>​    ansible-doc [module]<br>    ansible-doc  -a : 显示所有模块的文档 （不常用）</p><p>​    ansible-doc  –list 列出所有的可用模块</p><p>eg:</p><p>​    ansible-doc  -s  ping ：-s的作用就是显示指定模块的playbook片段</p><p>​    ansible-doc  ping   :    查看指定模块(ping)的帮助用法 </p><p>​    ansible-doc   -l   :   列出所有模块</p><p>ansible-playbook</p><p>​    执行playbook的工具</p><p>ansible-vault</p><p>​    用于playbook的加密解密作用</p><p>ansible-console</p><p>ansible-galaxy</p><p>ansible-pull</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Ansible02-配置文件及命令概览&quot;&gt;&lt;a href=&quot;#Ansible02-配置文件及命令概览&quot; class=&quot;headerlink&quot; title=&quot;Ansible02_配置文件及命令概览&quot;&gt;&lt;/a&gt;Ansible02_配置文件及命令概览&lt;/h2&gt;&lt;h3 i
      
    
    </summary>
    
      <category term="Ansible学习" scheme="https://jackLovewx.github.io/categories/Ansible%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Ansible" scheme="https://jackLovewx.github.io/tags/Ansible/"/>
    
  </entry>
  
</feed>
